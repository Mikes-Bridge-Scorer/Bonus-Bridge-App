{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport BridgeGameUI from './BridgeGameUI';\nimport ScoreAdjustment from './components/ScoreAdjustment';\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\nimport ScoreProcessor from './components/ScoreProcessor';\nimport GameSummary from './components/GameSummary';\nimport { determineVulnerability, parseContract, calculateBridgeScore } from './utils/scoring';\nimport './global.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to track current view (main game, score adjustment, or final analysis)\n  const [currentView, setCurrentView] = useState('game');\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    gameNumber: 1,\n    dealNumber: 1,\n    deals: [],\n    scores: {\n      nsPoints: 0,\n      ewPoints: 0,\n      nsTotal: 0,\n      ewTotal: 0\n    },\n    currentDeal: {\n      dealNumber: 1,\n      vulnerable: determineVulnerability(1),\n      contract: '',\n      result: null,\n      tricks: null,\n      nsPoints: 0,\n      ewPoints: 0,\n      rawScore: 0,\n      bonusScoringEnabled: true,\n      handAnalysis: null\n    },\n    showScorePopup: false,\n    isAwake: false,\n    gameEnded: false\n  });\n\n  // Function to handle score calculation from ScoreProcessor\n  const handleScoreCalculated = scoreResult => {\n    const {\n      nsPoints,\n      ewPoints,\n      rawScore\n    } = scoreResult;\n\n    // Update the current deal with the calculated scores\n    setGameState(prevState => {\n      const updatedCurrentDeal = {\n        ...prevState.currentDeal,\n        nsPoints,\n        ewPoints,\n        rawScore\n      };\n      return {\n        ...prevState,\n        currentDeal: updatedCurrentDeal\n      };\n    });\n  };\n\n  // Function to update current deal\n  const updateCurrentDeal = useCallback(dealUpdates => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        ...dealUpdates\n      }\n    }));\n  }, []);\n\n  // Function to handle adjustment input\n  const handleSaveAdjustment = adjustmentData => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        handAnalysis: adjustmentData,\n        bonusScoringEnabled: true\n      }\n    }));\n    setCurrentView('analysis');\n  };\n\n  // Function to handle score analysis saving\n  const handleSaveAnalysis = scoreResult => {\n    // First, save the current deal to the deals array\n    const currentDealWithFinalScores = {\n      ...gameState.currentDeal,\n      dealNumber: gameState.dealNumber,\n      nsPoints: scoreResult.nsPoints,\n      ewPoints: scoreResult.ewPoints\n    };\n\n    // Calculate running totals\n    const nsTotal = (gameState.scores.nsTotal || 0) + (scoreResult.nsPoints || 0);\n    const ewTotal = (gameState.scores.ewTotal || 0) + (scoreResult.ewPoints || 0);\n\n    // Update game state with new deal\n    setGameState(prevState => {\n      return {\n        ...prevState,\n        dealNumber: prevState.dealNumber + 1,\n        deals: [...prevState.deals, currentDealWithFinalScores],\n        scores: {\n          nsPoints: scoreResult.nsPoints || 0,\n          ewPoints: scoreResult.ewPoints || 0,\n          nsTotal,\n          ewTotal\n        },\n        currentDeal: {\n          dealNumber: prevState.dealNumber + 1,\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        }\n      };\n    });\n\n    // Return to the game view\n    setCurrentView('game');\n  };\n\n  // Function to handle next deal without adjustments\n  const handleNextDeal = () => {\n    // If no scores have been calculated, calculate standard scores\n    if (!gameState.currentDeal.nsPoints && !gameState.currentDeal.ewPoints && gameState.currentDeal.contract) {\n      const contractDetails = parseContract(gameState.currentDeal.contract, gameState.currentDeal.result, gameState.currentDeal.vulnerable);\n      if (contractDetails) {\n        const standardScore = calculateBridgeScore(contractDetails);\n\n        // Update current deal with standard scores\n        const currentDealWithScores = {\n          ...gameState.currentDeal,\n          dealNumber: gameState.dealNumber,\n          nsPoints: standardScore.nsPoints || 0,\n          ewPoints: standardScore.ewPoints || 0,\n          rawScore: Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0)),\n          bonusScoringEnabled: false\n        };\n\n        // Calculate running totals\n        const nsTotal = (gameState.scores.nsTotal || 0) + (standardScore.nsPoints || 0);\n        const ewTotal = (gameState.scores.ewTotal || 0) + (standardScore.ewPoints || 0);\n\n        // Update game state with new deal\n        setGameState(prevState => {\n          return {\n            ...prevState,\n            dealNumber: prevState.dealNumber + 1,\n            deals: [...prevState.deals, currentDealWithScores],\n            scores: {\n              nsPoints: standardScore.nsPoints || 0,\n              ewPoints: standardScore.ewPoints || 0,\n              nsTotal,\n              ewTotal\n            },\n            currentDeal: {\n              dealNumber: prevState.dealNumber + 1,\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\n              contract: '',\n              result: null,\n              tricks: null,\n              nsPoints: 0,\n              ewPoints: 0,\n              rawScore: 0,\n              bonusScoringEnabled: true,\n              handAnalysis: null\n            }\n          };\n        });\n      }\n    } else {\n      // Scores have been calculated, proceed as usual\n      const currentDealWithScores = {\n        ...gameState.currentDeal,\n        dealNumber: gameState.dealNumber\n      };\n\n      // Calculate running totals\n      const nsTotal = (gameState.scores.nsTotal || 0) + (currentDealWithScores.nsPoints || 0);\n      const ewTotal = (gameState.scores.ewTotal || 0) + (currentDealWithScores.ewPoints || 0);\n\n      // Update game state with new deal\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          dealNumber: prevState.dealNumber + 1,\n          deals: [...prevState.deals, currentDealWithScores],\n          scores: {\n            nsPoints: currentDealWithScores.nsPoints || 0,\n            ewPoints: currentDealWithScores.ewPoints || 0,\n            nsTotal,\n            ewTotal\n          },\n          currentDeal: {\n            dealNumber: prevState.dealNumber + 1,\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\n            contract: '',\n            result: null,\n            tricks: null,\n            nsPoints: 0,\n            ewPoints: 0,\n            rawScore: 0,\n            bonusScoringEnabled: true,\n            handAnalysis: null\n          }\n        };\n      });\n    }\n  };\n\n  // Function to start a new game\n  const handleNewGame = () => {\n    // Check if we're ending the current game or starting fresh\n    if (gameState.deals.length > 0) {\n      // Mark game as ended to show summary\n      setGameState(prevState => ({\n        ...prevState,\n        gameEnded: true\n      }));\n    } else {\n      // Reset the game state for a fresh start\n      setGameState({\n        gameNumber: gameState.gameNumber + 1,\n        dealNumber: 1,\n        deals: [],\n        scores: {\n          nsPoints: 0,\n          ewPoints: 0,\n          nsTotal: 0,\n          ewTotal: 0\n        },\n        currentDeal: {\n          dealNumber: 1,\n          vulnerable: determineVulnerability(1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        },\n        showScorePopup: false,\n        isAwake: gameState.isAwake,\n        gameEnded: false\n      });\n    }\n  };\n\n  // Function to return to the game after viewing summary\n  const handleReturnToGame = () => {\n    // Reset the game state for a fresh start\n    setGameState({\n      gameNumber: gameState.gameNumber + 1,\n      dealNumber: 1,\n      deals: [],\n      scores: {\n        nsPoints: 0,\n        ewPoints: 0,\n        nsTotal: 0,\n        ewTotal: 0\n      },\n      currentDeal: {\n        dealNumber: 1,\n        vulnerable: determineVulnerability(1),\n        contract: '',\n        result: null,\n        tricks: null,\n        nsPoints: 0,\n        ewPoints: 0,\n        rawScore: 0,\n        bonusScoringEnabled: true,\n        handAnalysis: null\n      },\n      showScorePopup: false,\n      isAwake: gameState.isAwake,\n      gameEnded: false\n    });\n  };\n\n  // Function to handle choosing Bonus Bridge scoring\n  const handleChooseBonusBridge = () => {\n    setCurrentView('adjustment');\n  };\n\n  // Function to handle choosing Party Bridge scoring (standard)\n  const handleChoosePartyBridge = () => {\n    // Calculate standard bridge score\n    const contractDetails = parseContract(gameState.currentDeal.contract, gameState.currentDeal.result, gameState.currentDeal.vulnerable);\n    if (contractDetails) {\n      const standardScore = calculateBridgeScore(contractDetails);\n\n      // Update current deal with standard scores\n      const currentDealWithScores = {\n        ...gameState.currentDeal,\n        nsPoints: standardScore.nsPoints || 0,\n        ewPoints: standardScore.ewPoints || 0,\n        rawScore: Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0)),\n        bonusScoringEnabled: false\n      };\n\n      // Calculate running totals\n      const nsTotal = (gameState.scores.nsTotal || 0) + (standardScore.nsPoints || 0);\n      const ewTotal = (gameState.scores.ewTotal || 0) + (standardScore.ewPoints || 0);\n\n      // Update game state with scores\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          currentDeal: currentDealWithScores,\n          scores: {\n            ...prevState.scores,\n            nsPoints: standardScore.nsPoints || 0,\n            ewPoints: standardScore.ewPoints || 0\n          }\n        };\n      });\n\n      // Proceed to next deal\n      handleNextDeal();\n    }\n  };\n\n  // Determine which view to show\n  const renderCurrentView = () => {\n    if (gameState.gameEnded) {\n      return /*#__PURE__*/_jsxDEV(GameSummary, {\n        gameState: gameState,\n        onNewGame: handleReturnToGame,\n        onGoToHome: handleReturnToGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this);\n    }\n    switch (currentView) {\n      case 'adjustment':\n        return /*#__PURE__*/_jsxDEV(ScoreAdjustment, {\n          currentDeal: gameState.currentDeal,\n          onSaveAdjustment: handleSaveAdjustment,\n          onCancel: () => setCurrentView('game')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this);\n      case 'analysis':\n        return /*#__PURE__*/_jsxDEV(FinalScoreAnalysis, {\n          analysisData: gameState.currentDeal.handAnalysis,\n          currentDeal: gameState.currentDeal,\n          onSave: handleSaveAnalysis,\n          onEdit: () => setCurrentView('adjustment')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this);\n      case 'game':\n      default:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ScoreProcessor, {\n            currentDeal: gameState.currentDeal,\n            onScoreCalculated: handleScoreCalculated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BridgeGameUI, {\n            gameState: gameState,\n            updateCurrentDeal: updateCurrentDeal,\n            onNextDeal: handleNextDeal,\n            onNewGame: handleNewGame,\n            setGameState: setGameState,\n            onChooseBonusBridge: handleChooseBonusBridge,\n            onChoosePartyBridge: handleChoosePartyBridge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: renderCurrentView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mflmLveK6irWYXlC+pXL5fhQSf4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BridgeGameUI","ScoreAdjustment","FinalScoreAnalysis","ScoreProcessor","GameSummary","determineVulnerability","parseContract","calculateBridgeScore","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentView","setCurrentView","gameState","setGameState","gameNumber","dealNumber","deals","scores","nsPoints","ewPoints","nsTotal","ewTotal","currentDeal","vulnerable","contract","result","tricks","rawScore","bonusScoringEnabled","handAnalysis","showScorePopup","isAwake","gameEnded","handleScoreCalculated","scoreResult","prevState","updatedCurrentDeal","updateCurrentDeal","dealUpdates","handleSaveAdjustment","adjustmentData","handleSaveAnalysis","currentDealWithFinalScores","handleNextDeal","contractDetails","standardScore","currentDealWithScores","Math","max","abs","handleNewGame","length","handleReturnToGame","handleChooseBonusBridge","handleChoosePartyBridge","renderCurrentView","onNewGame","onGoToHome","fileName","_jsxFileName","lineNumber","columnNumber","onSaveAdjustment","onCancel","analysisData","onSave","onEdit","children","onScoreCalculated","onNextDeal","onChooseBonusBridge","onChoosePartyBridge","className","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport ScoreAdjustment from './components/ScoreAdjustment';\r\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\r\nimport ScoreProcessor from './components/ScoreProcessor';\r\nimport GameSummary from './components/GameSummary';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract,\r\n  calculateBridgeScore\r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  // State to track current view (main game, score adjustment, or final analysis)\r\n  const [currentView, setCurrentView] = useState('game');\r\n  \r\n  // Game state\r\n  const [gameState, setGameState] = useState({\r\n    gameNumber: 1,\r\n    dealNumber: 1,\r\n    deals: [],\r\n    scores: {\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      nsTotal: 0,\r\n      ewTotal: 0\r\n    },\r\n    currentDeal: {\r\n      dealNumber: 1,\r\n      vulnerable: determineVulnerability(1),\r\n      contract: '',\r\n      result: null,\r\n      tricks: null,\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      rawScore: 0,\r\n      bonusScoringEnabled: true,\r\n      handAnalysis: null\r\n    },\r\n    showScorePopup: false,\r\n    isAwake: false,\r\n    gameEnded: false\r\n  });\r\n  \r\n  // Function to handle score calculation from ScoreProcessor\r\n  const handleScoreCalculated = (scoreResult) => {\r\n    const { nsPoints, ewPoints, rawScore } = scoreResult;\r\n    \r\n    // Update the current deal with the calculated scores\r\n    setGameState(prevState => {\r\n      const updatedCurrentDeal = {\r\n        ...prevState.currentDeal,\r\n        nsPoints,\r\n        ewPoints,\r\n        rawScore\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        currentDeal: updatedCurrentDeal\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Function to update current deal\r\n  const updateCurrentDeal = useCallback((dealUpdates) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        ...dealUpdates\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  // Function to handle adjustment input\r\n  const handleSaveAdjustment = (adjustmentData) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        handAnalysis: adjustmentData,\r\n        bonusScoringEnabled: true\r\n      }\r\n    }));\r\n    \r\n    setCurrentView('analysis');\r\n  };\r\n  \r\n  // Function to handle score analysis saving\r\n  const handleSaveAnalysis = (scoreResult) => {\r\n    // First, save the current deal to the deals array\r\n    const currentDealWithFinalScores = {\r\n      ...gameState.currentDeal,\r\n      dealNumber: gameState.dealNumber,\r\n      nsPoints: scoreResult.nsPoints,\r\n      ewPoints: scoreResult.ewPoints\r\n    };\r\n    \r\n    // Calculate running totals\r\n    const nsTotal = (gameState.scores.nsTotal || 0) + (scoreResult.nsPoints || 0);\r\n    const ewTotal = (gameState.scores.ewTotal || 0) + (scoreResult.ewPoints || 0);\r\n    \r\n    // Update game state with new deal\r\n    setGameState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        dealNumber: prevState.dealNumber + 1,\r\n        deals: [...prevState.deals, currentDealWithFinalScores],\r\n        scores: {\r\n          nsPoints: scoreResult.nsPoints || 0,\r\n          ewPoints: scoreResult.ewPoints || 0,\r\n          nsTotal,\r\n          ewTotal\r\n        },\r\n        currentDeal: {\r\n          dealNumber: prevState.dealNumber + 1,\r\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        }\r\n      };\r\n    });\r\n    \r\n    // Return to the game view\r\n    setCurrentView('game');\r\n  };\r\n  \r\n  // Function to handle next deal without adjustments\r\n  const handleNextDeal = () => {\r\n    // If no scores have been calculated, calculate standard scores\r\n    if (!gameState.currentDeal.nsPoints && !gameState.currentDeal.ewPoints && gameState.currentDeal.contract) {\r\n      const contractDetails = parseContract(\r\n        gameState.currentDeal.contract, \r\n        gameState.currentDeal.result, \r\n        gameState.currentDeal.vulnerable\r\n      );\r\n      \r\n      if (contractDetails) {\r\n        const standardScore = calculateBridgeScore(contractDetails);\r\n        \r\n        // Update current deal with standard scores\r\n        const currentDealWithScores = {\r\n          ...gameState.currentDeal,\r\n          dealNumber: gameState.dealNumber,\r\n          nsPoints: standardScore.nsPoints || 0,\r\n          ewPoints: standardScore.ewPoints || 0,\r\n          rawScore: Math.max(\r\n            Math.abs(standardScore.nsPoints || 0), \r\n            Math.abs(standardScore.ewPoints || 0)\r\n          ),\r\n          bonusScoringEnabled: false\r\n        };\r\n        \r\n        // Calculate running totals\r\n        const nsTotal = (gameState.scores.nsTotal || 0) + (standardScore.nsPoints || 0);\r\n        const ewTotal = (gameState.scores.ewTotal || 0) + (standardScore.ewPoints || 0);\r\n        \r\n        // Update game state with new deal\r\n        setGameState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            dealNumber: prevState.dealNumber + 1,\r\n            deals: [...prevState.deals, currentDealWithScores],\r\n            scores: {\r\n              nsPoints: standardScore.nsPoints || 0,\r\n              ewPoints: standardScore.ewPoints || 0,\r\n              nsTotal,\r\n              ewTotal\r\n            },\r\n            currentDeal: {\r\n              dealNumber: prevState.dealNumber + 1,\r\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n              contract: '',\r\n              result: null,\r\n              tricks: null,\r\n              nsPoints: 0,\r\n              ewPoints: 0,\r\n              rawScore: 0,\r\n              bonusScoringEnabled: true,\r\n              handAnalysis: null\r\n            }\r\n          };\r\n        });\r\n      }\r\n    } else {\r\n      // Scores have been calculated, proceed as usual\r\n      const currentDealWithScores = {\r\n        ...gameState.currentDeal,\r\n        dealNumber: gameState.dealNumber\r\n      };\r\n      \r\n      // Calculate running totals\r\n      const nsTotal = (gameState.scores.nsTotal || 0) + (currentDealWithScores.nsPoints || 0);\r\n      const ewTotal = (gameState.scores.ewTotal || 0) + (currentDealWithScores.ewPoints || 0);\r\n      \r\n      // Update game state with new deal\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          dealNumber: prevState.dealNumber + 1,\r\n          deals: [...prevState.deals, currentDealWithScores],\r\n          scores: {\r\n            nsPoints: currentDealWithScores.nsPoints || 0,\r\n            ewPoints: currentDealWithScores.ewPoints || 0,\r\n            nsTotal,\r\n            ewTotal\r\n          },\r\n          currentDeal: {\r\n            dealNumber: prevState.dealNumber + 1,\r\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n            contract: '',\r\n            result: null,\r\n            tricks: null,\r\n            nsPoints: 0,\r\n            ewPoints: 0,\r\n            rawScore: 0,\r\n            bonusScoringEnabled: true,\r\n            handAnalysis: null\r\n          }\r\n        };\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to start a new game\r\n  const handleNewGame = () => {\r\n    // Check if we're ending the current game or starting fresh\r\n    if (gameState.deals.length > 0) {\r\n      // Mark game as ended to show summary\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        gameEnded: true\r\n      }));\r\n    } else {\r\n      // Reset the game state for a fresh start\r\n      setGameState({\r\n        gameNumber: gameState.gameNumber + 1,\r\n        dealNumber: 1,\r\n        deals: [],\r\n        scores: {\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          nsTotal: 0,\r\n          ewTotal: 0\r\n        },\r\n        currentDeal: {\r\n          dealNumber: 1,\r\n          vulnerable: determineVulnerability(1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false,\r\n        isAwake: gameState.isAwake,\r\n        gameEnded: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to return to the game after viewing summary\r\n  const handleReturnToGame = () => {\r\n    // Reset the game state for a fresh start\r\n    setGameState({\r\n      gameNumber: gameState.gameNumber + 1,\r\n      dealNumber: 1,\r\n      deals: [],\r\n      scores: {\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        nsTotal: 0,\r\n        ewTotal: 0\r\n      },\r\n      currentDeal: {\r\n        dealNumber: 1,\r\n        vulnerable: determineVulnerability(1),\r\n        contract: '',\r\n        result: null,\r\n        tricks: null,\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        rawScore: 0,\r\n        bonusScoringEnabled: true,\r\n        handAnalysis: null\r\n      },\r\n      showScorePopup: false,\r\n      isAwake: gameState.isAwake,\r\n      gameEnded: false\r\n    });\r\n  };\r\n  \r\n  // Function to handle choosing Bonus Bridge scoring\r\n  const handleChooseBonusBridge = () => {\r\n    setCurrentView('adjustment');\r\n  };\r\n  \r\n  // Function to handle choosing Party Bridge scoring (standard)\r\n  const handleChoosePartyBridge = () => {\r\n    // Calculate standard bridge score\r\n    const contractDetails = parseContract(\r\n      gameState.currentDeal.contract, \r\n      gameState.currentDeal.result, \r\n      gameState.currentDeal.vulnerable\r\n    );\r\n    \r\n    if (contractDetails) {\r\n      const standardScore = calculateBridgeScore(contractDetails);\r\n      \r\n      // Update current deal with standard scores\r\n      const currentDealWithScores = {\r\n        ...gameState.currentDeal,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        rawScore: Math.max(\r\n          Math.abs(standardScore.nsPoints || 0), \r\n          Math.abs(standardScore.ewPoints || 0)\r\n        ),\r\n        bonusScoringEnabled: false\r\n      };\r\n      \r\n      // Calculate running totals\r\n      const nsTotal = (gameState.scores.nsTotal || 0) + (standardScore.nsPoints || 0);\r\n      const ewTotal = (gameState.scores.ewTotal || 0) + (standardScore.ewPoints || 0);\r\n      \r\n      // Update game state with scores\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          currentDeal: currentDealWithScores,\r\n          scores: {\r\n            ...prevState.scores,\r\n            nsPoints: standardScore.nsPoints || 0,\r\n            ewPoints: standardScore.ewPoints || 0\r\n          }\r\n        };\r\n      });\r\n      \r\n      // Proceed to next deal\r\n      handleNextDeal();\r\n    }\r\n  };\r\n  \r\n  // Determine which view to show\r\n  const renderCurrentView = () => {\r\n    if (gameState.gameEnded) {\r\n      return (\r\n        <GameSummary \r\n          gameState={gameState}\r\n          onNewGame={handleReturnToGame}\r\n          onGoToHome={handleReturnToGame}\r\n        />\r\n      );\r\n    }\r\n    \r\n    switch(currentView) {\r\n      case 'adjustment':\r\n        return (\r\n          <ScoreAdjustment \r\n            currentDeal={gameState.currentDeal}\r\n            onSaveAdjustment={handleSaveAdjustment}\r\n            onCancel={() => setCurrentView('game')}\r\n          />\r\n        );\r\n      case 'analysis':\r\n        return (\r\n          <FinalScoreAnalysis \r\n            analysisData={gameState.currentDeal.handAnalysis}\r\n            currentDeal={gameState.currentDeal}\r\n            onSave={handleSaveAnalysis}\r\n            onEdit={() => setCurrentView('adjustment')}\r\n          />\r\n        );\r\n      case 'game':\r\n      default:\r\n        return (\r\n          <>\r\n            <ScoreProcessor \r\n              currentDeal={gameState.currentDeal}\r\n              onScoreCalculated={handleScoreCalculated}\r\n            />\r\n            <BridgeGameUI \r\n              gameState={gameState}\r\n              updateCurrentDeal={updateCurrentDeal}\r\n              onNextDeal={handleNextDeal}\r\n              onNewGame={handleNewGame}\r\n              setGameState={setGameState}\r\n              onChooseBonusBridge={handleChooseBonusBridge}\r\n              onChoosePartyBridge={handleChoosePartyBridge}\r\n            />\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {renderCurrentView()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}