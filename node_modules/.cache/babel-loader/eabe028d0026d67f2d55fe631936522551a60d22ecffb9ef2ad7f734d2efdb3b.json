{"ast":null,"code":"// TrialManager.js - Core trial management system\nimport CryptoJS from 'crypto-js';\nclass TrialManager {\n  constructor() {\n    // TEST SETTINGS - We'll start with 5 deals for testing\n    this.maxDeals = 5; // Change to 50 later\n    this.warningThreshold = 3; // Warning at 3 deals (change to 40 later)\n\n    // Security settings\n    this.storageKey = 'bonus_bridge_trial';\n    this.hashKey = 'bb_secure_2025';\n\n    // Generate unique identifier for this browser\n    this.browserFingerprint = this.generateFingerprint();\n\n    // Initialize the trial\n    this.initialize();\n  }\n\n  // Create a unique identifier for this browser/device\n  generateFingerprint() {\n    const data = {\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      screen: `${window.screen.width}x${window.screen.height}`,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    };\n    return CryptoJS.SHA256(JSON.stringify(data)).toString();\n  }\n\n  // Initialize trial data on first load\n  initialize() {\n    const existing = this.getTrialData();\n    if (!existing) {\n      // First time user - create new trial\n      const trialData = {\n        startDate: new Date().toISOString(),\n        fingerprint: this.browserFingerprint,\n        dealsPlayed: 0,\n        gamesCompleted: 0,\n        isExpired: false,\n        warnings: 0\n      };\n      this.saveTrialData(trialData);\n      console.log('ðŸŽ¯ Trial initialized: 5 deals available');\n    } else {\n      // Existing user - check fingerprint\n      if (existing.fingerprint !== this.browserFingerprint) {\n        console.warn('ðŸš« Browser fingerprint mismatch - trial reset');\n        this.resetTrial();\n      }\n    }\n  }\n\n  // Get trial data from storage (decrypted)\n  getTrialData() {\n    try {\n      const encrypted = localStorage.getItem(this.storageKey);\n      if (!encrypted) return null;\n      const decrypted = CryptoJS.AES.decrypt(encrypted, this.hashKey).toString(CryptoJS.enc.Utf8);\n      return JSON.parse(decrypted);\n    } catch (error) {\n      console.warn('Trial data corrupted, resetting...');\n      return null;\n    }\n  }\n\n  // Save trial data to storage (encrypted)\n  saveTrialData(data) {\n    try {\n      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.hashKey).toString();\n      localStorage.setItem(this.storageKey, encrypted);\n    } catch (error) {\n      console.error('Failed to save trial data:', error);\n    }\n  }\n\n  // Check if more deals are allowed\n  canPlayDeals() {\n    const data = this.getTrialData();\n    if (!data) return false;\n    return !data.isExpired && data.dealsPlayed < this.maxDeals;\n  }\n\n  // Increment the deal counter\n  incrementDeals() {\n    const data = this.getTrialData();\n    if (!data) return false;\n    data.dealsPlayed++;\n\n    // Check if limit reached\n    if (data.dealsPlayed >= this.maxDeals) {\n      data.isExpired = true;\n    }\n    this.saveTrialData(data);\n    console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${this.maxDeals} completed`);\n    return !data.isExpired;\n  }\n\n  // Get remaining deals\n  getRemainingDeals() {\n    const data = this.getTrialData();\n    if (!data) return 0;\n    return Math.max(0, this.maxDeals - data.dealsPlayed);\n  }\n\n  // Check if warning should be shown\n  shouldShowWarning() {\n    const data = this.getTrialData();\n    if (!data) return false;\n    return data.dealsPlayed >= this.warningThreshold && !data.isExpired;\n  }\n\n  // Check if trial is expired\n  isExpired() {\n    const data = this.getTrialData();\n    return data ? data.isExpired : false;\n  }\n\n  // Reset trial (for suspicious activity)\n  resetTrial() {\n    localStorage.removeItem(this.storageKey);\n    const expiredData = {\n      startDate: new Date().toISOString(),\n      fingerprint: this.browserFingerprint,\n      dealsPlayed: this.maxDeals,\n      isExpired: true,\n      suspicious: true\n    };\n    this.saveTrialData(expiredData);\n  }\n\n  // Get trial statistics for display\n  getStats() {\n    const data = this.getTrialData();\n    if (!data) return null;\n    const startDate = new Date(data.startDate);\n    const daysUsed = Math.floor((new Date() - startDate) / (1000 * 60 * 60 * 24));\n    return {\n      dealsPlayed: data.dealsPlayed,\n      maxDeals: this.maxDeals,\n      gamesCompleted: data.gamesCompleted || 0,\n      daysUsed: Math.max(1, daysUsed),\n      startDate: startDate.toLocaleDateString()\n    };\n  }\n\n  // Generate feedback email\n  generateFeedbackEmail() {\n    const stats = this.getStats();\n    if (!stats) return null;\n    const subject = 'Bonus Bridge - Evaluation Feedback';\n    const body = `Dear Mike,\n\nI've been testing the Bonus Bridge app and here's my feedback:\n\nUSAGE STATISTICS:\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\nâ€¢ Games Completed: ${stats.gamesCompleted}\nâ€¢ Days Used: ${stats.daysUsed}\nâ€¢ Started: ${stats.startDate}\n\nFEEDBACK:\n[Please share your thoughts here]\n\nOVERALL RATING: ___/10\n\nPlease send me an extension code to continue testing.\n\nBest regards,\n[Mike]`;\n    return {\n      subject: encodeURIComponent(subject),\n      body: encodeURIComponent(body)\n    };\n  }\n\n  // Simple extension code validation\n  validateExtensionCode(code, email) {\n    // Simple validation - you can customize this\n    const validCode = `EXTEND_${email.toUpperCase()}_2025`;\n    return code === validCode;\n  }\n\n  // Extend trial with valid code\n  extendTrial(code, email) {\n    if (!this.validateExtensionCode(code, email)) {\n      return {\n        success: false,\n        message: 'Invalid extension code'\n      };\n    }\n    const data = this.getTrialData();\n    if (!data) {\n      return {\n        success: false,\n        message: 'No trial data found'\n      };\n    }\n\n    // Reset to allow more deals\n    data.dealsPlayed = 0;\n    data.isExpired = false;\n    data.warnings = 0;\n    data.extended = true;\n    this.saveTrialData(data);\n    console.log('ðŸŽ‰ Trial extended successfully!');\n    return {\n      success: true,\n      message: 'Trial extended successfully!'\n    };\n  }\n}\nexport default TrialManager;","map":{"version":3,"names":["CryptoJS","TrialManager","constructor","maxDeals","warningThreshold","storageKey","hashKey","browserFingerprint","generateFingerprint","initialize","data","userAgent","navigator","language","screen","window","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","SHA256","JSON","stringify","toString","existing","getTrialData","trialData","startDate","Date","toISOString","fingerprint","dealsPlayed","gamesCompleted","isExpired","warnings","saveTrialData","console","log","warn","resetTrial","encrypted","localStorage","getItem","decrypted","AES","decrypt","enc","Utf8","parse","error","encrypt","setItem","canPlayDeals","incrementDeals","getRemainingDeals","Math","max","shouldShowWarning","removeItem","expiredData","suspicious","getStats","daysUsed","floor","toLocaleDateString","generateFeedbackEmail","stats","subject","body","encodeURIComponent","validateExtensionCode","code","email","validCode","toUpperCase","extendTrial","success","message","extended"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/TrialManager.js"],"sourcesContent":["// TrialManager.js - Core trial management system\r\nimport CryptoJS from 'crypto-js';\r\n\r\nclass TrialManager {\r\n  constructor() {\r\n    // TEST SETTINGS - We'll start with 5 deals for testing\r\n    this.maxDeals = 5;        // Change to 50 later\r\n    this.warningThreshold = 3; // Warning at 3 deals (change to 40 later)\r\n    \r\n    // Security settings\r\n    this.storageKey = 'bonus_bridge_trial';\r\n    this.hashKey = 'bb_secure_2025';\r\n    \r\n    // Generate unique identifier for this browser\r\n    this.browserFingerprint = this.generateFingerprint();\r\n    \r\n    // Initialize the trial\r\n    this.initialize();\r\n  }\r\n\r\n  // Create a unique identifier for this browser/device\r\n  generateFingerprint() {\r\n    const data = {\r\n      userAgent: navigator.userAgent,\r\n      language: navigator.language,\r\n      screen: `${window.screen.width}x${window.screen.height}`,\r\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    };\r\n    \r\n    return CryptoJS.SHA256(JSON.stringify(data)).toString();\r\n  }\r\n\r\n  // Initialize trial data on first load\r\n  initialize() {\r\n    const existing = this.getTrialData();\r\n    \r\n    if (!existing) {\r\n      // First time user - create new trial\r\n      const trialData = {\r\n        startDate: new Date().toISOString(),\r\n        fingerprint: this.browserFingerprint,\r\n        dealsPlayed: 0,\r\n        gamesCompleted: 0,\r\n        isExpired: false,\r\n        warnings: 0\r\n      };\r\n      \r\n      this.saveTrialData(trialData);\r\n      console.log('ðŸŽ¯ Trial initialized: 5 deals available');\r\n    } else {\r\n      // Existing user - check fingerprint\r\n      if (existing.fingerprint !== this.browserFingerprint) {\r\n        console.warn('ðŸš« Browser fingerprint mismatch - trial reset');\r\n        this.resetTrial();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get trial data from storage (decrypted)\r\n  getTrialData() {\r\n    try {\r\n      const encrypted = localStorage.getItem(this.storageKey);\r\n      if (!encrypted) return null;\r\n      \r\n      const decrypted = CryptoJS.AES.decrypt(encrypted, this.hashKey).toString(CryptoJS.enc.Utf8);\r\n      return JSON.parse(decrypted);\r\n    } catch (error) {\r\n      console.warn('Trial data corrupted, resetting...');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Save trial data to storage (encrypted)\r\n  saveTrialData(data) {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.hashKey).toString();\r\n      localStorage.setItem(this.storageKey, encrypted);\r\n    } catch (error) {\r\n      console.error('Failed to save trial data:', error);\r\n    }\r\n  }\r\n\r\n  // Check if more deals are allowed\r\n  canPlayDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n    \r\n    return !data.isExpired && data.dealsPlayed < this.maxDeals;\r\n  }\r\n\r\n  // Increment the deal counter\r\n  incrementDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n\r\n    data.dealsPlayed++;\r\n    \r\n    // Check if limit reached\r\n    if (data.dealsPlayed >= this.maxDeals) {\r\n      data.isExpired = true;\r\n    }\r\n    \r\n    this.saveTrialData(data);\r\n    \r\n    console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${this.maxDeals} completed`);\r\n    return !data.isExpired;\r\n  }\r\n\r\n  // Get remaining deals\r\n  getRemainingDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return 0;\r\n    \r\n    return Math.max(0, this.maxDeals - data.dealsPlayed);\r\n  }\r\n\r\n  // Check if warning should be shown\r\n  shouldShowWarning() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n    \r\n    return data.dealsPlayed >= this.warningThreshold && !data.isExpired;\r\n  }\r\n\r\n  // Check if trial is expired\r\n  isExpired() {\r\n    const data = this.getTrialData();\r\n    return data ? data.isExpired : false;\r\n  }\r\n\r\n  // Reset trial (for suspicious activity)\r\n  resetTrial() {\r\n    localStorage.removeItem(this.storageKey);\r\n    \r\n    const expiredData = {\r\n      startDate: new Date().toISOString(),\r\n      fingerprint: this.browserFingerprint,\r\n      dealsPlayed: this.maxDeals,\r\n      isExpired: true,\r\n      suspicious: true\r\n    };\r\n    \r\n    this.saveTrialData(expiredData);\r\n  }\r\n\r\n  // Get trial statistics for display\r\n  getStats() {\r\n    const data = this.getTrialData();\r\n    if (!data) return null;\r\n    \r\n    const startDate = new Date(data.startDate);\r\n    const daysUsed = Math.floor((new Date() - startDate) / (1000 * 60 * 60 * 24));\r\n    \r\n    return {\r\n      dealsPlayed: data.dealsPlayed,\r\n      maxDeals: this.maxDeals,\r\n      gamesCompleted: data.gamesCompleted || 0,\r\n      daysUsed: Math.max(1, daysUsed),\r\n      startDate: startDate.toLocaleDateString()\r\n    };\r\n  }\r\n\r\n  // Generate feedback email\r\n  generateFeedbackEmail() {\r\n    const stats = this.getStats();\r\n    if (!stats) return null;\r\n    \r\n    const subject = 'Bonus Bridge - Evaluation Feedback';\r\n    const body = `Dear Mike,\r\n\r\nI've been testing the Bonus Bridge app and here's my feedback:\r\n\r\nUSAGE STATISTICS:\r\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\r\nâ€¢ Games Completed: ${stats.gamesCompleted}\r\nâ€¢ Days Used: ${stats.daysUsed}\r\nâ€¢ Started: ${stats.startDate}\r\n\r\nFEEDBACK:\r\n[Please share your thoughts here]\r\n\r\nOVERALL RATING: ___/10\r\n\r\nPlease send me an extension code to continue testing.\r\n\r\nBest regards,\r\n[Mike]`;\r\n\r\n    return {\r\n      subject: encodeURIComponent(subject),\r\n      body: encodeURIComponent(body)\r\n    };\r\n  }\r\n\r\n  // Simple extension code validation\r\n  validateExtensionCode(code, email) {\r\n    // Simple validation - you can customize this\r\n    const validCode = `EXTEND_${email.toUpperCase()}_2025`;\r\n    return code === validCode;\r\n  }\r\n\r\n  // Extend trial with valid code\r\n  extendTrial(code, email) {\r\n    if (!this.validateExtensionCode(code, email)) {\r\n      return { success: false, message: 'Invalid extension code' };\r\n    }\r\n    \r\n    const data = this.getTrialData();\r\n    if (!data) {\r\n      return { success: false, message: 'No trial data found' };\r\n    }\r\n    \r\n    // Reset to allow more deals\r\n    data.dealsPlayed = 0;\r\n    data.isExpired = false;\r\n    data.warnings = 0;\r\n    data.extended = true;\r\n    \r\n    this.saveTrialData(data);\r\n    console.log('ðŸŽ‰ Trial extended successfully!');\r\n    return { success: true, message: 'Trial extended successfully!' };\r\n  }\r\n}\r\n\r\nexport default TrialManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}