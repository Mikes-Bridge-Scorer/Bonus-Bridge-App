{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./TrickInput.css';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const TrickInput=_ref=>{let{onTrickChange,initialResult=null,contract='',onChangeContract}=_ref;const[selectedTrick,setSelectedTrick]=useState(null);const[requiredTricks,setRequiredTricks]=useState(7);// Calculate required tricks when contract changes\nuseEffect(()=>{if(contract){const contractMatch=contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);if(contractMatch){const level=parseInt(contractMatch[1]);setRequiredTricks(level+6);}}},[contract]);// Set selected trick from initialResult if provided\nuseEffect(()=>{if(initialResult!==null&&requiredTricks){const actualTricks=requiredTricks+initialResult;setSelectedTrick(actualTricks);}},[initialResult,requiredTricks]);// Handle trick button click\nconst handleTrickClick=numTricks=>{setSelectedTrick(numTricks);const result=numTricks-requiredTricks;onTrickChange(result,numTricks);};// Get result preview text and style\nconst getResultPreview=()=>{if(selectedTrick===null)return null;const result=selectedTrick-requiredTricks;let text='';let className='result-preview';if(result===0){text='Made exactly';className+=' exact';}else if(result>0){text=`Made +${result}`;className+=' made';}else{text=`Down ${Math.abs(result)}`;className+=' down';}return/*#__PURE__*/_jsxs(\"div\",{className:className,children:[text,\" (\",selectedTrick,\" tricks)\"]});};// Render trick buttons in a 5-column grid with better layout\nconst renderTrickGrid=()=>{// Create buttons for 0-13, but arrange them in a specific order\nconst buttonOrder=[1,2,3,4,5,// Row 1: 1-5\n6,7,8,9,10,// Row 2: 6-10\n11,12,13,0,''// Row 3: 11, 12, 13, 0, empty\n];return/*#__PURE__*/_jsx(\"div\",{className:\"trick-grid\",children:buttonOrder.map((num,index)=>{// Skip empty cells\nif(num===''){return/*#__PURE__*/_jsx(\"div\",{className:\"trick-grid-empty\"},`empty-${index}`);}const isExact=num===requiredTricks;const isMade=num>requiredTricks;const isDown=num<requiredTricks;let buttonClass=\"trick-btn\";if(isDown)buttonClass+=\" trick-btn-down\";else if(isExact)buttonClass+=\" trick-btn-exact\";else if(isMade)buttonClass+=\" trick-btn-made\";if(selectedTrick===num)buttonClass+=\" selected\";return/*#__PURE__*/_jsx(\"button\",{className:buttonClass,onClick:()=>handleTrickClick(num),children:num},`trick-${num}`);})});};return/*#__PURE__*/_jsxs(\"div\",{className:\"trick-input\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"required-tricks\",children:[\"Required tricks: \",requiredTricks]}),renderTrickGrid(),getResultPreview(),/*#__PURE__*/_jsx(\"button\",{className:\"change-contract-btn\",onClick:onChangeContract,children:\"Change Contract\"})]});};export default TrickInput;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","TrickInput","_ref","onTrickChange","initialResult","contract","onChangeContract","selectedTrick","setSelectedTrick","requiredTricks","setRequiredTricks","contractMatch","match","level","parseInt","actualTricks","handleTrickClick","numTricks","result","getResultPreview","text","className","Math","abs","children","renderTrickGrid","buttonOrder","map","num","index","isExact","isMade","isDown","buttonClass","onClick"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrickInput.css';\r\n\r\nconst TrickInput = ({ onTrickChange, initialResult = null, contract = '', onChangeContract }) => {\r\n  const [selectedTrick, setSelectedTrick] = useState(null);\r\n  const [requiredTricks, setRequiredTricks] = useState(7);\r\n  \r\n  // Calculate required tricks when contract changes\r\n  useEffect(() => {\r\n    if (contract) {\r\n      const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n      if (contractMatch) {\r\n        const level = parseInt(contractMatch[1]);\r\n        setRequiredTricks(level + 6);\r\n      }\r\n    }\r\n  }, [contract]);\r\n  \r\n  // Set selected trick from initialResult if provided\r\n  useEffect(() => {\r\n    if (initialResult !== null && requiredTricks) {\r\n      const actualTricks = requiredTricks + initialResult;\r\n      setSelectedTrick(actualTricks);\r\n    }\r\n  }, [initialResult, requiredTricks]);\r\n  \r\n  // Handle trick button click\r\n  const handleTrickClick = (numTricks) => {\r\n    setSelectedTrick(numTricks);\r\n    const result = numTricks - requiredTricks;\r\n    onTrickChange(result, numTricks);\r\n  };\r\n  \r\n  // Get result preview text and style\r\n  const getResultPreview = () => {\r\n    if (selectedTrick === null) return null;\r\n    \r\n    const result = selectedTrick - requiredTricks;\r\n    let text = '';\r\n    let className = 'result-preview';\r\n    \r\n    if (result === 0) {\r\n      text = 'Made exactly';\r\n      className += ' exact';\r\n    } else if (result > 0) {\r\n      text = `Made +${result}`;\r\n      className += ' made';\r\n    } else {\r\n      text = `Down ${Math.abs(result)}`;\r\n      className += ' down';\r\n    }\r\n    \r\n    return (\r\n      <div className={className}>\r\n        {text} ({selectedTrick} tricks)\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Render trick buttons in a 5-column grid with better layout\r\n  const renderTrickGrid = () => {\r\n    // Create buttons for 0-13, but arrange them in a specific order\r\n    const buttonOrder = [\r\n      1, 2, 3, 4, 5,    // Row 1: 1-5\r\n      6, 7, 8, 9, 10,   // Row 2: 6-10\r\n      11, 12, 13, 0, '' // Row 3: 11, 12, 13, 0, empty\r\n    ];\r\n    \r\n    return (\r\n      <div className=\"trick-grid\">\r\n        {buttonOrder.map((num, index) => {\r\n          // Skip empty cells\r\n          if (num === '') {\r\n            return <div key={`empty-${index}`} className=\"trick-grid-empty\"></div>;\r\n          }\r\n          \r\n          const isExact = num === requiredTricks;\r\n          const isMade = num > requiredTricks;\r\n          const isDown = num < requiredTricks;\r\n          \r\n          let buttonClass = \"trick-btn\";\r\n          if (isDown) buttonClass += \" trick-btn-down\";\r\n          else if (isExact) buttonClass += \" trick-btn-exact\";\r\n          else if (isMade) buttonClass += \" trick-btn-made\";\r\n          \r\n          if (selectedTrick === num) buttonClass += \" selected\";\r\n          \r\n          return (\r\n            <button\r\n              key={`trick-${num}`}\r\n              className={buttonClass}\r\n              onClick={() => handleTrickClick(num)}\r\n            >\r\n              {num}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div className=\"trick-input\">\r\n      <div className=\"required-tricks\">\r\n        Required tricks: {requiredTricks}\r\n      </div>\r\n      \r\n      {/* Trick Grid */}\r\n      {renderTrickGrid()}\r\n      \r\n      {/* Result Preview - shows immediately after selection */}\r\n      {getResultPreview()}\r\n      \r\n      {/* Change Contract Button */}\r\n      <button \r\n        className=\"change-contract-btn\"\r\n        onClick={onChangeContract}\r\n      >\r\n        Change Contract\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}