{"ast":null,"code":"import React,{useEffect}from'react';import{parseContract,calculateBridgeScore,calculateBonusBridgeScore}from'../utils/scoring';/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */const ScoreProcessor=_ref=>{var _currentDeal$vulnerab,_currentDeal$vulnerab2;let{currentDeal,onScoreCalculated}=_ref;// Add debug logging\nuseEffect(()=>{console.log('ScoreProcessor received deal:',currentDeal);},[currentDeal]);// FIXED: Improved dependency array to ensure score recalculation happens reliably\nuseEffect(()=>{// Only process scores if we have a valid contract and result\nif(currentDeal&&currentDeal.contract&&currentDeal.result!==null&&currentDeal.result!==undefined){console.log('Processing score for deal:',currentDeal);processDealScore(currentDeal);}},[currentDeal===null||currentDeal===void 0?void 0:currentDeal.contract,currentDeal===null||currentDeal===void 0?void 0:currentDeal.result,currentDeal===null||currentDeal===void 0?void 0:(_currentDeal$vulnerab=currentDeal.vulnerable)===null||_currentDeal$vulnerab===void 0?void 0:_currentDeal$vulnerab.ns,currentDeal===null||currentDeal===void 0?void 0:(_currentDeal$vulnerab2=currentDeal.vulnerable)===null||_currentDeal$vulnerab2===void 0?void 0:_currentDeal$vulnerab2.ew,onScoreCalculated// FIXED: Added callback to dependencies \n]);// Process the current deal and calculate scores\nconst processDealScore=deal=>{// Parse the contract string\nconst contractDetails=parseContract(deal.contract,deal.result,deal.vulnerable);if(!contractDetails){console.error('Unable to parse contract',deal.contract);return;}// Calculate standard bridge score\nconst standardScore=calculateBridgeScore(contractDetails);console.log('Standard bridge score calculated:',standardScore);// If we have HCP data, calculate bonus bridge score\nlet bonusScore=standardScore;if(deal.handAnalysis){bonusScore=calculateBonusBridgeScore(contractDetails,deal.handAnalysis);console.log('Bonus bridge score calculated:',bonusScore);}// Determine which score to use based on the scoring mode\nconst finalScore=deal.bonusScoringEnabled?bonusScore:standardScore;// Calculate raw score - the maximum absolute value of NS or EW points\nconst rawScore=Math.max(Math.abs(finalScore.nsPoints||0),Math.abs(finalScore.ewPoints||0));console.log('Raw score calculated:',rawScore);// FIXED: Ensure we always have defined scores to prevent undefined values\nconst nsPoints=finalScore.nsPoints||0;const ewPoints=finalScore.ewPoints||0;// Format the score for sending to parent component\nconst scoreResult={nsPoints:nsPoints,ewPoints:ewPoints,rawScore:rawScore,bonusScoringEnabled:deal.bonusScoringEnabled||false,handAnalysis:deal.handAnalysis||null,madeContract:contractDetails.madeContract};console.log('Final score result:',scoreResult);// Make sure we're passing zero instead of undefined/null\nif(isNaN(scoreResult.nsPoints))scoreResult.nsPoints=0;if(isNaN(scoreResult.ewPoints))scoreResult.ewPoints=0;if(isNaN(scoreResult.rawScore))scoreResult.rawScore=0;// FIXED: Added additional debug logging\nconsole.log('Score calculation complete for deal:',deal.dealNumber);console.log('NS Points:',scoreResult.nsPoints);console.log('EW Points:',scoreResult.ewPoints);console.log('Raw Score:',scoreResult.rawScore);// Send the calculated score to the parent component\nonScoreCalculated(scoreResult);};// This is a utility component, so it doesn't render anything\nreturn null;};export default ScoreProcessor;","map":{"version":3,"names":["React","useEffect","parseContract","calculateBridgeScore","calculateBonusBridgeScore","ScoreProcessor","_ref","_currentDeal$vulnerab","_currentDeal$vulnerab2","currentDeal","onScoreCalculated","console","log","contract","result","undefined","processDealScore","vulnerable","ns","ew","deal","contractDetails","error","standardScore","bonusScore","handAnalysis","finalScore","bonusScoringEnabled","rawScore","Math","max","abs","nsPoints","ewPoints","scoreResult","madeContract","isNaN","dealNumber"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/ScoreProcessor.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { \r\n  parseContract, \r\n  calculateBridgeScore, \r\n  calculateBonusBridgeScore\r\n} from '../utils/scoring';\r\n\r\n/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */\r\nconst ScoreProcessor = ({ currentDeal, onScoreCalculated }) => {\r\n  // Add debug logging\r\n  useEffect(() => {\r\n    console.log('ScoreProcessor received deal:', currentDeal);\r\n  }, [currentDeal]);\r\n  \r\n  // FIXED: Improved dependency array to ensure score recalculation happens reliably\r\n  useEffect(() => {\r\n    // Only process scores if we have a valid contract and result\r\n    if (currentDeal && currentDeal.contract && currentDeal.result !== null && currentDeal.result !== undefined) {\r\n      console.log('Processing score for deal:', currentDeal);\r\n      processDealScore(currentDeal);\r\n    }\r\n  }, [\r\n    currentDeal?.contract, \r\n    currentDeal?.result, \r\n    currentDeal?.vulnerable?.ns, \r\n    currentDeal?.vulnerable?.ew,\r\n    onScoreCalculated  // FIXED: Added callback to dependencies \r\n  ]);\r\n  \r\n  // Process the current deal and calculate scores\r\n  const processDealScore = (deal) => {\r\n    // Parse the contract string\r\n    const contractDetails = parseContract(deal.contract, deal.result, deal.vulnerable);\r\n    \r\n    if (!contractDetails) {\r\n      console.error('Unable to parse contract', deal.contract);\r\n      return;\r\n    }\r\n    \r\n    // Calculate standard bridge score\r\n    const standardScore = calculateBridgeScore(contractDetails);\r\n    console.log('Standard bridge score calculated:', standardScore);\r\n    \r\n    // If we have HCP data, calculate bonus bridge score\r\n    let bonusScore = standardScore;\r\n    \r\n    if (deal.handAnalysis) {\r\n      bonusScore = calculateBonusBridgeScore(contractDetails, deal.handAnalysis);\r\n      console.log('Bonus bridge score calculated:', bonusScore);\r\n    }\r\n    \r\n    // Determine which score to use based on the scoring mode\r\n    const finalScore = deal.bonusScoringEnabled ? bonusScore : standardScore;\r\n    \r\n    // Calculate raw score - the maximum absolute value of NS or EW points\r\n    const rawScore = Math.max(\r\n      Math.abs(finalScore.nsPoints || 0), \r\n      Math.abs(finalScore.ewPoints || 0)\r\n    );\r\n    \r\n    console.log('Raw score calculated:', rawScore);\r\n    \r\n    // FIXED: Ensure we always have defined scores to prevent undefined values\r\n    const nsPoints = finalScore.nsPoints || 0;\r\n    const ewPoints = finalScore.ewPoints || 0;\r\n    \r\n    // Format the score for sending to parent component\r\n    const scoreResult = {\r\n      nsPoints: nsPoints,\r\n      ewPoints: ewPoints,\r\n      rawScore: rawScore,\r\n      bonusScoringEnabled: deal.bonusScoringEnabled || false,\r\n      handAnalysis: deal.handAnalysis || null,\r\n      madeContract: contractDetails.madeContract\r\n    };\r\n    \r\n    console.log('Final score result:', scoreResult);\r\n    \r\n    // Make sure we're passing zero instead of undefined/null\r\n    if (isNaN(scoreResult.nsPoints)) scoreResult.nsPoints = 0;\r\n    if (isNaN(scoreResult.ewPoints)) scoreResult.ewPoints = 0;\r\n    if (isNaN(scoreResult.rawScore)) scoreResult.rawScore = 0;\r\n    \r\n    // FIXED: Added additional debug logging\r\n    console.log('Score calculation complete for deal:', deal.dealNumber);\r\n    console.log('NS Points:', scoreResult.nsPoints);\r\n    console.log('EW Points:', scoreResult.ewPoints);\r\n    console.log('Raw Score:', scoreResult.rawScore);\r\n    \r\n    // Send the calculated score to the parent component\r\n    onScoreCalculated(scoreResult);\r\n  };\r\n  \r\n  // This is a utility component, so it doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default ScoreProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}