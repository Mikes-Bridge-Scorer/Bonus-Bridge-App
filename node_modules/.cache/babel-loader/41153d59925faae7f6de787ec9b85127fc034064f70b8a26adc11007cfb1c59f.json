{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport WelcomePage from './components/WelcomePage'; // NEW: Welcome page import\nimport BridgeGameUI from './BridgeGameUI';\nimport ScoreAdjustment from './components/ScoreAdjustment';\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\nimport ScoreProcessor from './components/ScoreProcessor';\nimport GameScoreSheet from './components/GameScoreSheet';\nimport { determineVulnerability, parseContract, calculateBridgeScore } from './utils/scoring';\nimport './global.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // NEW: State for showing welcome page\n  const [showWelcome, setShowWelcome] = useState(false);\n\n  // State to track current view (main game, score adjustment, or final analysis)\n  const [currentView, setCurrentView] = useState('game');\n\n  // Game state with updated scores structure\n  const [gameState, setGameState] = useState({\n    gameNumber: 1,\n    dealNumber: 1,\n    deals: [],\n    scores: {\n      // Standard bridge (Party Bridge) scores\n      nsPoints: 0,\n      ewPoints: 0,\n      nsTotal: 0,\n      ewTotal: 0,\n      // Bonus Bridge scores - separate tracking\n      bonusNsPoints: 0,\n      bonusEwPoints: 0,\n      bonusNsTotal: 0,\n      bonusEwTotal: 0,\n      // Track which deal number we're on\n      currentDealNumber: 1\n    },\n    currentDeal: {\n      dealNumber: 1,\n      vulnerable: determineVulnerability(1),\n      contract: '',\n      result: null,\n      tricks: null,\n      // Standard bridge scores\n      nsPoints: 0,\n      ewPoints: 0,\n      rawScore: 0,\n      // Bonus bridge scores\n      bonusNsPoints: 0,\n      bonusEwPoints: 0,\n      bonusRawScore: 0,\n      bonusScoringEnabled: true,\n      handAnalysis: null\n    },\n    showScorePopup: false,\n    isAwake: false,\n    gameEnded: false\n  });\n\n  // NEW: Function to start the game from welcome page\n  const handleStartGame = () => {\n    setShowWelcome(false);\n  };\n\n  // Function to handle score calculation from ScoreProcessor\n  const handleScoreCalculated = scoreResult => {\n    const {\n      nsPoints,\n      ewPoints,\n      rawScore\n    } = scoreResult;\n    console.log('App received score calculation:', scoreResult);\n\n    // Update the current deal with the calculated scores\n    setGameState(prevState => {\n      // Check if scores have changed\n      if (prevState.currentDeal.nsPoints === nsPoints && prevState.currentDeal.ewPoints === ewPoints) {\n        return prevState; // No change needed\n      }\n      const updatedCurrentDeal = {\n        ...prevState.currentDeal,\n        nsPoints,\n        ewPoints,\n        rawScore: rawScore || Math.max(Math.abs(nsPoints), Math.abs(ewPoints))\n      };\n\n      // Calculate which team gets the raw score based on which has positive points\n      const nsScores = nsPoints > 0;\n      const ewScores = ewPoints > 0;\n\n      // Calculate running totals for Party Bridge (standard) scoring\n      // Only add raw score to the running total of the team that scored\n      const calculatedNsTotal = nsScores ? (prevState.scores.nsTotal || 0) + rawScore : prevState.scores.nsTotal || 0;\n      const calculatedEwTotal = ewScores ? (prevState.scores.ewTotal || 0) + rawScore : prevState.scores.ewTotal || 0;\n\n      // Log the calculation details\n      console.log('Party Bridge (standard) score calculation:', {\n        previousNsTotal: prevState.scores.nsTotal || 0,\n        previousEwTotal: prevState.scores.ewTotal || 0,\n        nsScores,\n        ewScores,\n        rawScore,\n        newNsTotal: calculatedNsTotal,\n        newEwTotal: calculatedEwTotal\n      });\n\n      // Updated scores with correct running totals\n      const updatedScores = {\n        ...prevState.scores,\n        nsPoints,\n        ewPoints,\n        nsTotal: calculatedNsTotal,\n        ewTotal: calculatedEwTotal,\n        currentDealNumber: prevState.dealNumber\n      };\n      console.log('Updating score state:', {\n        currentDeal: updatedCurrentDeal,\n        scores: updatedScores\n      });\n      return {\n        ...prevState,\n        currentDeal: updatedCurrentDeal,\n        scores: updatedScores\n      };\n    });\n  };\n\n  // Function to update current deal\n  const updateCurrentDeal = useCallback(dealUpdates => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        ...dealUpdates\n      }\n    }));\n  }, []);\n\n  // Function to handle adjustment input\n  const handleSaveAdjustment = adjustmentData => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        handAnalysis: adjustmentData,\n        bonusScoringEnabled: true\n      }\n    }));\n    setCurrentView('analysis');\n  };\n\n  // Function to handle score analysis saving - UPDATED\n  const handleSaveAnalysis = scoreResult => {\n    console.log('Handling save analysis with result:', scoreResult);\n\n    // Extract the complete deal with bonus scores\n    const currentDealWithBonusScores = scoreResult.currentDealWithBonusScores || {\n      ...gameState.currentDeal,\n      dealNumber: gameState.dealNumber,\n      bonusNsPoints: scoreResult.nsPoints || 0,\n      // Store as bonus scores\n      bonusEwPoints: scoreResult.ewPoints || 0 // Store as bonus scores\n    };\n\n    // Calculate raw score for bonus scoring if not provided\n    const bonusRawScore = Math.max(Math.abs(scoreResult.nsPoints || 0), Math.abs(scoreResult.ewPoints || 0));\n\n    // Calculate running totals for bonus scoring\n    const nsScores = scoreResult.nsPoints > 0;\n    const ewScores = scoreResult.ewPoints > 0;\n    const bonusNsTotal = nsScores ? (gameState.scores.bonusNsTotal || 0) + bonusRawScore : gameState.scores.bonusNsTotal || 0;\n    const bonusEwTotal = ewScores ? (gameState.scores.bonusEwTotal || 0) + bonusRawScore : gameState.scores.bonusEwTotal || 0;\n    console.log('Bonus Bridge score calculation:', {\n      nsScores,\n      ewScores,\n      bonusRawScore,\n      previousBonusNsTotal: gameState.scores.bonusNsTotal || 0,\n      previousBonusEwTotal: gameState.scores.bonusEwTotal || 0,\n      newBonusNsTotal: bonusNsTotal,\n      newBonusEwTotal: bonusEwTotal\n    });\n\n    // Store the complete deal with both raw and bonus scores\n    const completeCurrentDeal = {\n      ...currentDealWithBonusScores,\n      rawScore: currentDealWithBonusScores.rawScore || 0,\n      // Party Bridge score\n      bonusRawScore: bonusRawScore,\n      // Bonus Bridge score\n      nsPoints: currentDealWithBonusScores.nsPoints || 0,\n      // Party Bridge points\n      ewPoints: currentDealWithBonusScores.ewPoints || 0,\n      // Party Bridge points\n      bonusNsPoints: scoreResult.nsPoints || 0,\n      // Bonus Bridge points\n      bonusEwPoints: scoreResult.ewPoints || 0 // Bonus Bridge points\n    };\n\n    // Update game state with new deal\n    setGameState(prevState => {\n      return {\n        ...prevState,\n        dealNumber: prevState.dealNumber + 1,\n        deals: [...prevState.deals, completeCurrentDeal],\n        scores: {\n          ...prevState.scores,\n          // Reset current deal scores to 0\n          nsPoints: 0,\n          ewPoints: 0,\n          // Preserve running totals for both scoring systems\n          nsTotal: prevState.scores.nsTotal || 0,\n          ewTotal: prevState.scores.ewTotal || 0,\n          bonusNsTotal: bonusNsTotal,\n          bonusEwTotal: bonusEwTotal,\n          currentDealNumber: prevState.dealNumber + 1\n        },\n        currentDeal: {\n          dealNumber: prevState.dealNumber + 1,\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusNsPoints: 0,\n          bonusEwPoints: 0,\n          bonusRawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        },\n        showScorePopup: false\n      };\n    });\n\n    // Return to the game view\n    setCurrentView('game');\n  };\n\n  // Function to handle next deal without adjustments\n  const handleNextDeal = (currentDealWithScores = null, updatedScores = null) => {\n    // Use provided scores or current state\n    const dealToSave = currentDealWithScores || gameState.currentDeal;\n    const scoresToUse = updatedScores || gameState.scores;\n\n    // Ensure the deal has scores\n    if (!dealToSave.nsPoints && !dealToSave.ewPoints && dealToSave.contract) {\n      // Calculate if needed\n      const contractDetails = parseContract(dealToSave.contract, dealToSave.result, dealToSave.vulnerable);\n      if (contractDetails) {\n        const standardScore = calculateBridgeScore(contractDetails);\n\n        // Calculate raw score\n        const rawScore = Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0));\n\n        // Update scores\n        dealToSave.nsPoints = standardScore.nsPoints || 0;\n        dealToSave.ewPoints = standardScore.ewPoints || 0;\n        dealToSave.rawScore = rawScore;\n\n        // Determine which team scores positive points\n        const nsScores = standardScore.nsPoints > 0;\n        const ewScores = standardScore.ewPoints > 0;\n\n        // Calculate running totals for Party Bridge\n        const calculatedNsTotal = nsScores ? (scoresToUse.nsTotal || 0) + rawScore : scoresToUse.nsTotal || 0;\n        const calculatedEwTotal = ewScores ? (scoresToUse.ewTotal || 0) + rawScore : scoresToUse.ewTotal || 0;\n        console.log('Next deal Party Bridge score calculation:', {\n          nsScores,\n          ewScores,\n          rawScore,\n          previousNsTotal: scoresToUse.nsTotal || 0,\n          previousEwTotal: scoresToUse.ewTotal || 0,\n          newNsTotal: calculatedNsTotal,\n          newEwTotal: calculatedEwTotal\n        });\n\n        // Update game state with new deal\n        setGameState(prevState => {\n          return {\n            ...prevState,\n            dealNumber: prevState.dealNumber + 1,\n            deals: [...prevState.deals, dealToSave],\n            scores: {\n              ...prevState.scores,\n              nsPoints: 0,\n              // Reset to 0 for the new deal\n              ewPoints: 0,\n              // Reset to 0 for the new deal\n              nsTotal: calculatedNsTotal,\n              ewTotal: calculatedEwTotal,\n              // Keep bonus scores unchanged\n              bonusNsTotal: prevState.scores.bonusNsTotal || 0,\n              bonusEwTotal: prevState.scores.bonusEwTotal || 0,\n              currentDealNumber: prevState.dealNumber + 1\n            },\n            currentDeal: {\n              dealNumber: prevState.dealNumber + 1,\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\n              contract: '',\n              result: null,\n              tricks: null,\n              nsPoints: 0,\n              ewPoints: 0,\n              rawScore: 0,\n              bonusNsPoints: 0,\n              bonusEwPoints: 0,\n              bonusRawScore: 0,\n              bonusScoringEnabled: true,\n              handAnalysis: null\n            },\n            showScorePopup: false\n          };\n        });\n      }\n    } else {\n      // Already has scores, just save and proceed\n      const rawScore = dealToSave.rawScore || Math.max(Math.abs(dealToSave.nsPoints || 0), Math.abs(dealToSave.ewPoints || 0));\n      const nsScores = dealToSave.nsPoints > 0;\n      const ewScores = dealToSave.ewPoints > 0;\n      const calculatedNsTotal = nsScores ? (scoresToUse.nsTotal || 0) + rawScore : scoresToUse.nsTotal || 0;\n      const calculatedEwTotal = ewScores ? (scoresToUse.ewTotal || 0) + rawScore : scoresToUse.ewTotal || 0;\n      console.log('Next deal with existing scores:', {\n        nsScores,\n        ewScores,\n        rawScore,\n        previousNsTotal: scoresToUse.nsTotal || 0,\n        previousEwTotal: scoresToUse.ewTotal || 0,\n        newNsTotal: calculatedNsTotal,\n        newEwTotal: calculatedEwTotal\n      });\n\n      // Update game state with new deal\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          dealNumber: prevState.dealNumber + 1,\n          deals: [...prevState.deals, dealToSave],\n          scores: {\n            ...prevState.scores,\n            nsPoints: 0,\n            // Reset to 0 for the new deal\n            ewPoints: 0,\n            // Reset to 0 for the new deal\n            nsTotal: calculatedNsTotal,\n            ewTotal: calculatedEwTotal,\n            // Keep bonus scores unchanged\n            bonusNsTotal: prevState.scores.bonusNsTotal || 0,\n            bonusEwTotal: prevState.scores.bonusEwTotal || 0,\n            currentDealNumber: prevState.dealNumber + 1\n          },\n          currentDeal: {\n            dealNumber: prevState.dealNumber + 1,\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\n            contract: '',\n            result: null,\n            tricks: null,\n            nsPoints: 0,\n            ewPoints: 0,\n            rawScore: 0,\n            bonusNsPoints: 0,\n            bonusEwPoints: 0,\n            bonusRawScore: 0,\n            bonusScoringEnabled: true,\n            handAnalysis: null\n          },\n          showScorePopup: false\n        };\n      });\n    }\n  };\n\n  // Function to start a new game\n  const handleNewGame = () => {\n    // Check if we're ending the current game or starting fresh\n    if (gameState.deals.length > 0) {\n      // Mark game as ended to show summary\n      setGameState(prevState => ({\n        ...prevState,\n        gameEnded: true\n      }));\n    } else {\n      // Reset the game state for a fresh start\n      setGameState({\n        gameNumber: gameState.gameNumber + 1,\n        dealNumber: 1,\n        deals: [],\n        scores: {\n          nsPoints: 0,\n          ewPoints: 0,\n          nsTotal: 0,\n          ewTotal: 0,\n          bonusNsPoints: 0,\n          bonusEwPoints: 0,\n          bonusNsTotal: 0,\n          bonusEwTotal: 0,\n          currentDealNumber: 1\n        },\n        currentDeal: {\n          dealNumber: 1,\n          vulnerable: determineVulnerability(1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusNsPoints: 0,\n          bonusEwPoints: 0,\n          bonusRawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        },\n        showScorePopup: false,\n        isAwake: gameState.isAwake,\n        gameEnded: false\n      });\n    }\n  };\n\n  // Function to return to the game after viewing summary\n  const handleReturnToGame = () => {\n    // Reset the game state for a fresh start\n    setGameState({\n      gameNumber: gameState.gameNumber + 1,\n      dealNumber: 1,\n      deals: [],\n      scores: {\n        nsPoints: 0,\n        ewPoints: 0,\n        nsTotal: 0,\n        ewTotal: 0,\n        bonusNsPoints: 0,\n        bonusEwPoints: 0,\n        bonusNsTotal: 0,\n        bonusEwTotal: 0,\n        currentDealNumber: 1\n      },\n      currentDeal: {\n        dealNumber: 1,\n        vulnerable: determineVulnerability(1),\n        contract: '',\n        result: null,\n        tricks: null,\n        nsPoints: 0,\n        ewPoints: 0,\n        rawScore: 0,\n        bonusNsPoints: 0,\n        bonusEwPoints: 0,\n        bonusRawScore: 0,\n        bonusScoringEnabled: true,\n        handAnalysis: null\n      },\n      showScorePopup: false,\n      isAwake: gameState.isAwake,\n      gameEnded: false\n    });\n  };\n\n  // Function to handle choosing Bonus Bridge scoring\n  const handleChooseBonusBridge = () => {\n    setCurrentView('adjustment');\n  };\n\n  // Function to handle choosing Party Bridge scoring (standard)\n  const handleChoosePartyBridge = () => {\n    // Calculate standard bridge score\n    const contractDetails = parseContract(gameState.currentDeal.contract, gameState.currentDeal.result, gameState.currentDeal.vulnerable);\n    if (contractDetails) {\n      const standardScore = calculateBridgeScore(contractDetails);\n\n      // Calculate raw score\n      const rawScore = Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0));\n\n      // Update current deal with standard scores\n      const currentDealWithScores = {\n        ...gameState.currentDeal,\n        nsPoints: standardScore.nsPoints || 0,\n        ewPoints: standardScore.ewPoints || 0,\n        rawScore,\n        bonusScoringEnabled: false\n      };\n\n      // Calculate running totals using raw scores\n      const nsScores = standardScore.nsPoints > 0;\n      const ewScores = standardScore.ewPoints > 0;\n      const nsRawTotal = nsScores ? (gameState.scores.nsTotal || 0) + rawScore : gameState.scores.nsTotal || 0;\n      const ewRawTotal = ewScores ? (gameState.scores.ewTotal || 0) + rawScore : gameState.scores.ewTotal || 0;\n\n      // For immediate feedback of the current score\n      const updatedScores = {\n        ...gameState.scores,\n        nsPoints: standardScore.nsPoints || 0,\n        ewPoints: standardScore.ewPoints || 0,\n        nsTotal: nsRawTotal,\n        ewTotal: ewRawTotal,\n        // Important: Don't update bonus scores for Party Bridge\n        currentDealNumber: gameState.dealNumber\n      };\n\n      // Update game state with scores\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          currentDeal: currentDealWithScores,\n          scores: updatedScores,\n          showScorePopup: false // Make sure popup is closed\n        };\n      });\n\n      // Then proceed to next deal after a short delay to ensure UI updates\n      setTimeout(() => {\n        handleNextDeal(currentDealWithScores, updatedScores);\n      }, 100);\n    }\n  };\n\n  // Determine which view to show - UPDATED with welcome page\n  const renderCurrentView = () => {\n    // NEW: Show welcome page first\n    if (showWelcome) {\n      return /*#__PURE__*/_jsxDEV(WelcomePage, {\n        onStartGame: handleStartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 14\n      }, this);\n    }\n    if (gameState.gameEnded) {\n      return /*#__PURE__*/_jsxDEV(GameScoreSheet, {\n        gameState: gameState,\n        onNewGame: handleReturnToGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this);\n    }\n    switch (currentView) {\n      case 'adjustment':\n        return /*#__PURE__*/_jsxDEV(ScoreAdjustment, {\n          currentDeal: gameState.currentDeal,\n          onSaveAdjustment: handleSaveAdjustment,\n          onCancel: () => setCurrentView('game')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this);\n      case 'analysis':\n        return /*#__PURE__*/_jsxDEV(FinalScoreAnalysis, {\n          analysisData: gameState.currentDeal.handAnalysis,\n          currentDeal: gameState.currentDeal,\n          onSave: handleSaveAnalysis,\n          onEdit: () => setCurrentView('adjustment'),\n          setGameState: setGameState,\n          scores: gameState.scores\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this);\n      case 'game':\n      default:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ScoreProcessor, {\n            currentDeal: gameState.currentDeal,\n            onScoreCalculated: handleScoreCalculated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BridgeGameUI, {\n            gameState: gameState,\n            updateCurrentDeal: updateCurrentDeal,\n            onNextDeal: handleNextDeal,\n            onNewGame: handleNewGame,\n            setGameState: setGameState,\n            onChooseBonusBridge: handleChooseBonusBridge,\n            onChoosePartyBridge: handleChoosePartyBridge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: renderCurrentView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 632,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Q2EXfn71LNtTKUZycNepZ/nE9Bs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","WelcomePage","BridgeGameUI","ScoreAdjustment","FinalScoreAnalysis","ScoreProcessor","GameScoreSheet","determineVulnerability","parseContract","calculateBridgeScore","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","showWelcome","setShowWelcome","currentView","setCurrentView","gameState","setGameState","gameNumber","dealNumber","deals","scores","nsPoints","ewPoints","nsTotal","ewTotal","bonusNsPoints","bonusEwPoints","bonusNsTotal","bonusEwTotal","currentDealNumber","currentDeal","vulnerable","contract","result","tricks","rawScore","bonusRawScore","bonusScoringEnabled","handAnalysis","showScorePopup","isAwake","gameEnded","handleStartGame","handleScoreCalculated","scoreResult","console","log","prevState","updatedCurrentDeal","Math","max","abs","nsScores","ewScores","calculatedNsTotal","calculatedEwTotal","previousNsTotal","previousEwTotal","newNsTotal","newEwTotal","updatedScores","updateCurrentDeal","dealUpdates","handleSaveAdjustment","adjustmentData","handleSaveAnalysis","currentDealWithBonusScores","previousBonusNsTotal","previousBonusEwTotal","newBonusNsTotal","newBonusEwTotal","completeCurrentDeal","handleNextDeal","currentDealWithScores","dealToSave","scoresToUse","contractDetails","standardScore","handleNewGame","length","handleReturnToGame","handleChooseBonusBridge","handleChoosePartyBridge","nsRawTotal","ewRawTotal","setTimeout","renderCurrentView","onStartGame","fileName","_jsxFileName","lineNumber","columnNumber","onNewGame","onSaveAdjustment","onCancel","analysisData","onSave","onEdit","children","onScoreCalculated","onNextDeal","onChooseBonusBridge","onChoosePartyBridge","className","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport WelcomePage from './components/WelcomePage'; // NEW: Welcome page import\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport ScoreAdjustment from './components/ScoreAdjustment';\r\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\r\nimport ScoreProcessor from './components/ScoreProcessor';\r\nimport GameScoreSheet from './components/GameScoreSheet';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract,\r\n  calculateBridgeScore\r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  // NEW: State for showing welcome page\r\n  const [showWelcome, setShowWelcome] = useState(false);\r\n  \r\n  // State to track current view (main game, score adjustment, or final analysis)\r\n  const [currentView, setCurrentView] = useState('game');\r\n  \r\n  // Game state with updated scores structure\r\n  const [gameState, setGameState] = useState({\r\n    gameNumber: 1,\r\n    dealNumber: 1,\r\n    deals: [],\r\n    scores: {\r\n      // Standard bridge (Party Bridge) scores\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      nsTotal: 0,\r\n      ewTotal: 0,\r\n      \r\n      // Bonus Bridge scores - separate tracking\r\n      bonusNsPoints: 0,\r\n      bonusEwPoints: 0,\r\n      bonusNsTotal: 0,\r\n      bonusEwTotal: 0,\r\n      \r\n      // Track which deal number we're on\r\n      currentDealNumber: 1\r\n    },\r\n    currentDeal: {\r\n      dealNumber: 1,\r\n      vulnerable: determineVulnerability(1),\r\n      contract: '',\r\n      result: null,\r\n      tricks: null,\r\n      \r\n      // Standard bridge scores\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      rawScore: 0,\r\n      \r\n      // Bonus bridge scores\r\n      bonusNsPoints: 0,\r\n      bonusEwPoints: 0,\r\n      bonusRawScore: 0,\r\n      \r\n      bonusScoringEnabled: true,\r\n      handAnalysis: null\r\n    },\r\n    showScorePopup: false,\r\n    isAwake: false,\r\n    gameEnded: false\r\n  });\r\n\r\n  // NEW: Function to start the game from welcome page\r\n  const handleStartGame = () => {\r\n    setShowWelcome(false);\r\n  };\r\n  \r\n  // Function to handle score calculation from ScoreProcessor\r\n  const handleScoreCalculated = (scoreResult) => {\r\n    const { nsPoints, ewPoints, rawScore } = scoreResult;\r\n    \r\n    console.log('App received score calculation:', scoreResult);\r\n    \r\n    // Update the current deal with the calculated scores\r\n    setGameState(prevState => {\r\n      // Check if scores have changed\r\n      if (prevState.currentDeal.nsPoints === nsPoints && \r\n          prevState.currentDeal.ewPoints === ewPoints) {\r\n        return prevState; // No change needed\r\n      }\r\n      \r\n      const updatedCurrentDeal = {\r\n        ...prevState.currentDeal,\r\n        nsPoints,\r\n        ewPoints,\r\n        rawScore: rawScore || Math.max(Math.abs(nsPoints), Math.abs(ewPoints))\r\n      };\r\n      \r\n      // Calculate which team gets the raw score based on which has positive points\r\n      const nsScores = nsPoints > 0;\r\n      const ewScores = ewPoints > 0;\r\n      \r\n      // Calculate running totals for Party Bridge (standard) scoring\r\n      // Only add raw score to the running total of the team that scored\r\n      const calculatedNsTotal = nsScores ? \r\n        (prevState.scores.nsTotal || 0) + rawScore : \r\n        (prevState.scores.nsTotal || 0);\r\n        \r\n      const calculatedEwTotal = ewScores ? \r\n        (prevState.scores.ewTotal || 0) + rawScore : \r\n        (prevState.scores.ewTotal || 0);\r\n      \r\n      // Log the calculation details\r\n      console.log('Party Bridge (standard) score calculation:', {\r\n        previousNsTotal: prevState.scores.nsTotal || 0,\r\n        previousEwTotal: prevState.scores.ewTotal || 0,\r\n        nsScores,\r\n        ewScores,\r\n        rawScore,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n      \r\n      // Updated scores with correct running totals\r\n      const updatedScores = {\r\n        ...prevState.scores,\r\n        nsPoints,\r\n        ewPoints,\r\n        nsTotal: calculatedNsTotal,\r\n        ewTotal: calculatedEwTotal,\r\n        currentDealNumber: prevState.dealNumber\r\n      };\r\n      \r\n      console.log('Updating score state:', {\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      });\r\n      \r\n      return {\r\n        ...prevState,\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Function to update current deal\r\n  const updateCurrentDeal = useCallback((dealUpdates) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        ...dealUpdates\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  // Function to handle adjustment input\r\n  const handleSaveAdjustment = (adjustmentData) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        handAnalysis: adjustmentData,\r\n        bonusScoringEnabled: true\r\n      }\r\n    }));\r\n    \r\n    setCurrentView('analysis');\r\n  };\r\n  \r\n  // Function to handle score analysis saving - UPDATED\r\n  const handleSaveAnalysis = (scoreResult) => {\r\n    console.log('Handling save analysis with result:', scoreResult);\r\n    \r\n    // Extract the complete deal with bonus scores\r\n    const currentDealWithBonusScores = scoreResult.currentDealWithBonusScores || {\r\n      ...gameState.currentDeal,\r\n      dealNumber: gameState.dealNumber,\r\n      bonusNsPoints: scoreResult.nsPoints || 0,  // Store as bonus scores\r\n      bonusEwPoints: scoreResult.ewPoints || 0   // Store as bonus scores\r\n    };\r\n    \r\n    // Calculate raw score for bonus scoring if not provided\r\n    const bonusRawScore = Math.max(\r\n      Math.abs(scoreResult.nsPoints || 0),\r\n      Math.abs(scoreResult.ewPoints || 0)\r\n    );\r\n    \r\n    // Calculate running totals for bonus scoring\r\n    const nsScores = scoreResult.nsPoints > 0;\r\n    const ewScores = scoreResult.ewPoints > 0;\r\n    \r\n    const bonusNsTotal = nsScores ? \r\n      (gameState.scores.bonusNsTotal || 0) + bonusRawScore : \r\n      (gameState.scores.bonusNsTotal || 0);\r\n    \r\n    const bonusEwTotal = ewScores ? \r\n      (gameState.scores.bonusEwTotal || 0) + bonusRawScore : \r\n      (gameState.scores.bonusEwTotal || 0);\r\n    \r\n    console.log('Bonus Bridge score calculation:', {\r\n      nsScores,\r\n      ewScores,\r\n      bonusRawScore,\r\n      previousBonusNsTotal: gameState.scores.bonusNsTotal || 0,\r\n      previousBonusEwTotal: gameState.scores.bonusEwTotal || 0,\r\n      newBonusNsTotal: bonusNsTotal,\r\n      newBonusEwTotal: bonusEwTotal\r\n    });\r\n    \r\n    // Store the complete deal with both raw and bonus scores\r\n    const completeCurrentDeal = {\r\n      ...currentDealWithBonusScores,\r\n      rawScore: currentDealWithBonusScores.rawScore || 0,  // Party Bridge score\r\n      bonusRawScore: bonusRawScore,                        // Bonus Bridge score\r\n      nsPoints: currentDealWithBonusScores.nsPoints || 0,  // Party Bridge points\r\n      ewPoints: currentDealWithBonusScores.ewPoints || 0,  // Party Bridge points\r\n      bonusNsPoints: scoreResult.nsPoints || 0,            // Bonus Bridge points\r\n      bonusEwPoints: scoreResult.ewPoints || 0             // Bonus Bridge points\r\n    };\r\n    \r\n    // Update game state with new deal\r\n    setGameState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        dealNumber: prevState.dealNumber + 1,\r\n        deals: [...prevState.deals, completeCurrentDeal],\r\n        scores: {\r\n          ...prevState.scores,\r\n          // Reset current deal scores to 0\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          // Preserve running totals for both scoring systems\r\n          nsTotal: prevState.scores.nsTotal || 0,\r\n          ewTotal: prevState.scores.ewTotal || 0,\r\n          bonusNsTotal: bonusNsTotal,\r\n          bonusEwTotal: bonusEwTotal,\r\n          currentDealNumber: prevState.dealNumber + 1\r\n        },\r\n        currentDeal: {\r\n          dealNumber: prevState.dealNumber + 1,\r\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusRawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false\r\n      };\r\n    });\r\n    \r\n    // Return to the game view\r\n    setCurrentView('game');\r\n  };\r\n  \r\n  // Function to handle next deal without adjustments\r\n  const handleNextDeal = (currentDealWithScores = null, updatedScores = null) => {\r\n    // Use provided scores or current state\r\n    const dealToSave = currentDealWithScores || gameState.currentDeal;\r\n    const scoresToUse = updatedScores || gameState.scores;\r\n    \r\n    // Ensure the deal has scores\r\n    if (!dealToSave.nsPoints && !dealToSave.ewPoints && dealToSave.contract) {\r\n      // Calculate if needed\r\n      const contractDetails = parseContract(\r\n        dealToSave.contract, \r\n        dealToSave.result, \r\n        dealToSave.vulnerable\r\n      );\r\n      \r\n      if (contractDetails) {\r\n        const standardScore = calculateBridgeScore(contractDetails);\r\n        \r\n        // Calculate raw score\r\n        const rawScore = Math.max(\r\n          Math.abs(standardScore.nsPoints || 0), \r\n          Math.abs(standardScore.ewPoints || 0)\r\n        );\r\n        \r\n        // Update scores\r\n        dealToSave.nsPoints = standardScore.nsPoints || 0;\r\n        dealToSave.ewPoints = standardScore.ewPoints || 0;\r\n        dealToSave.rawScore = rawScore;\r\n        \r\n        // Determine which team scores positive points\r\n        const nsScores = standardScore.nsPoints > 0;\r\n        const ewScores = standardScore.ewPoints > 0;\r\n        \r\n        // Calculate running totals for Party Bridge\r\n        const calculatedNsTotal = nsScores ? \r\n          (scoresToUse.nsTotal || 0) + rawScore : \r\n          (scoresToUse.nsTotal || 0);\r\n        \r\n        const calculatedEwTotal = ewScores ? \r\n          (scoresToUse.ewTotal || 0) + rawScore : \r\n          (scoresToUse.ewTotal || 0);\r\n        \r\n        console.log('Next deal Party Bridge score calculation:', {\r\n          nsScores, \r\n          ewScores, \r\n          rawScore, \r\n          previousNsTotal: scoresToUse.nsTotal || 0,\r\n          previousEwTotal: scoresToUse.ewTotal || 0,\r\n          newNsTotal: calculatedNsTotal,\r\n          newEwTotal: calculatedEwTotal\r\n        });\r\n        \r\n        // Update game state with new deal\r\n        setGameState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            dealNumber: prevState.dealNumber + 1,\r\n            deals: [...prevState.deals, dealToSave],\r\n            scores: {\r\n              ...prevState.scores,\r\n              nsPoints: 0, // Reset to 0 for the new deal\r\n              ewPoints: 0, // Reset to 0 for the new deal\r\n              nsTotal: calculatedNsTotal,\r\n              ewTotal: calculatedEwTotal,\r\n              // Keep bonus scores unchanged\r\n              bonusNsTotal: prevState.scores.bonusNsTotal || 0,\r\n              bonusEwTotal: prevState.scores.bonusEwTotal || 0,\r\n              currentDealNumber: prevState.dealNumber + 1\r\n            },\r\n            currentDeal: {\r\n              dealNumber: prevState.dealNumber + 1,\r\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n              contract: '',\r\n              result: null,\r\n              tricks: null,\r\n              nsPoints: 0,\r\n              ewPoints: 0,\r\n              rawScore: 0,\r\n              bonusNsPoints: 0,\r\n              bonusEwPoints: 0,\r\n              bonusRawScore: 0,\r\n              bonusScoringEnabled: true,\r\n              handAnalysis: null\r\n            },\r\n            showScorePopup: false\r\n          };\r\n        });\r\n      }\r\n    } else {\r\n      // Already has scores, just save and proceed\r\n      const rawScore = dealToSave.rawScore || Math.max(\r\n        Math.abs(dealToSave.nsPoints || 0), \r\n        Math.abs(dealToSave.ewPoints || 0)\r\n      );\r\n      \r\n      const nsScores = dealToSave.nsPoints > 0;\r\n      const ewScores = dealToSave.ewPoints > 0;\r\n      \r\n      const calculatedNsTotal = nsScores ? \r\n        (scoresToUse.nsTotal || 0) + rawScore : \r\n        (scoresToUse.nsTotal || 0);\r\n      \r\n      const calculatedEwTotal = ewScores ? \r\n        (scoresToUse.ewTotal || 0) + rawScore : \r\n        (scoresToUse.ewTotal || 0);\r\n      \r\n      console.log('Next deal with existing scores:', {\r\n        nsScores, \r\n        ewScores, \r\n        rawScore, \r\n        previousNsTotal: scoresToUse.nsTotal || 0,\r\n        previousEwTotal: scoresToUse.ewTotal || 0,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n      \r\n      // Update game state with new deal\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          dealNumber: prevState.dealNumber + 1,\r\n          deals: [...prevState.deals, dealToSave],\r\n          scores: {\r\n            ...prevState.scores,\r\n            nsPoints: 0, // Reset to 0 for the new deal\r\n            ewPoints: 0, // Reset to 0 for the new deal\r\n            nsTotal: calculatedNsTotal,\r\n            ewTotal: calculatedEwTotal,\r\n            // Keep bonus scores unchanged\r\n            bonusNsTotal: prevState.scores.bonusNsTotal || 0,\r\n            bonusEwTotal: prevState.scores.bonusEwTotal || 0,\r\n            currentDealNumber: prevState.dealNumber + 1\r\n          },\r\n          currentDeal: {\r\n            dealNumber: prevState.dealNumber + 1,\r\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n            contract: '',\r\n            result: null,\r\n            tricks: null,\r\n            nsPoints: 0,\r\n            ewPoints: 0,\r\n            rawScore: 0,\r\n            bonusNsPoints: 0,\r\n            bonusEwPoints: 0,\r\n            bonusRawScore: 0,\r\n            bonusScoringEnabled: true,\r\n            handAnalysis: null\r\n          },\r\n          showScorePopup: false\r\n        };\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to start a new game\r\n  const handleNewGame = () => {\r\n    // Check if we're ending the current game or starting fresh\r\n    if (gameState.deals.length > 0) {\r\n      // Mark game as ended to show summary\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        gameEnded: true\r\n      }));\r\n    } else {\r\n      // Reset the game state for a fresh start\r\n      setGameState({\r\n        gameNumber: gameState.gameNumber + 1,\r\n        dealNumber: 1,\r\n        deals: [],\r\n        scores: {\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          nsTotal: 0,\r\n          ewTotal: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusNsTotal: 0,\r\n          bonusEwTotal: 0,\r\n          currentDealNumber: 1\r\n        },\r\n        currentDeal: {\r\n          dealNumber: 1,\r\n          vulnerable: determineVulnerability(1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusRawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false,\r\n        isAwake: gameState.isAwake,\r\n        gameEnded: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to return to the game after viewing summary\r\n  const handleReturnToGame = () => {\r\n    // Reset the game state for a fresh start\r\n    setGameState({\r\n      gameNumber: gameState.gameNumber + 1,\r\n      dealNumber: 1,\r\n      deals: [],\r\n      scores: {\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        nsTotal: 0,\r\n        ewTotal: 0,\r\n        bonusNsPoints: 0,\r\n        bonusEwPoints: 0,\r\n        bonusNsTotal: 0,\r\n        bonusEwTotal: 0,\r\n        currentDealNumber: 1\r\n      },\r\n      currentDeal: {\r\n        dealNumber: 1,\r\n        vulnerable: determineVulnerability(1),\r\n        contract: '',\r\n        result: null,\r\n        tricks: null,\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        rawScore: 0,\r\n        bonusNsPoints: 0,\r\n        bonusEwPoints: 0,\r\n        bonusRawScore: 0,\r\n        bonusScoringEnabled: true,\r\n        handAnalysis: null\r\n      },\r\n      showScorePopup: false,\r\n      isAwake: gameState.isAwake,\r\n      gameEnded: false\r\n    });\r\n  };\r\n  \r\n  // Function to handle choosing Bonus Bridge scoring\r\n  const handleChooseBonusBridge = () => {\r\n    setCurrentView('adjustment');\r\n  };\r\n  \r\n  // Function to handle choosing Party Bridge scoring (standard)\r\n  const handleChoosePartyBridge = () => {\r\n    // Calculate standard bridge score\r\n    const contractDetails = parseContract(\r\n      gameState.currentDeal.contract, \r\n      gameState.currentDeal.result, \r\n      gameState.currentDeal.vulnerable\r\n    );\r\n    \r\n    if (contractDetails) {\r\n      const standardScore = calculateBridgeScore(contractDetails);\r\n      \r\n      // Calculate raw score\r\n      const rawScore = Math.max(\r\n        Math.abs(standardScore.nsPoints || 0), \r\n        Math.abs(standardScore.ewPoints || 0)\r\n      );\r\n      \r\n      // Update current deal with standard scores\r\n      const currentDealWithScores = {\r\n        ...gameState.currentDeal,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        rawScore,\r\n        bonusScoringEnabled: false\r\n      };\r\n      \r\n      // Calculate running totals using raw scores\r\n      const nsScores = standardScore.nsPoints > 0;\r\n      const ewScores = standardScore.ewPoints > 0;\r\n      \r\n      const nsRawTotal = nsScores ? \r\n        (gameState.scores.nsTotal || 0) + rawScore : \r\n        (gameState.scores.nsTotal || 0);\r\n      \r\n      const ewRawTotal = ewScores ? \r\n        (gameState.scores.ewTotal || 0) + rawScore : \r\n        (gameState.scores.ewTotal || 0);\r\n      \r\n      // For immediate feedback of the current score\r\n      const updatedScores = {\r\n        ...gameState.scores,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        nsTotal: nsRawTotal,\r\n        ewTotal: ewRawTotal,\r\n        \r\n        // Important: Don't update bonus scores for Party Bridge\r\n        currentDealNumber: gameState.dealNumber\r\n      };\r\n      \r\n      // Update game state with scores\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          currentDeal: currentDealWithScores,\r\n          scores: updatedScores,\r\n          showScorePopup: false // Make sure popup is closed\r\n        };\r\n      });\r\n      \r\n      // Then proceed to next deal after a short delay to ensure UI updates\r\n      setTimeout(() => {\r\n        handleNextDeal(currentDealWithScores, updatedScores);\r\n      }, 100);\r\n    }\r\n  };\r\n  \r\n  // Determine which view to show - UPDATED with welcome page\r\n  const renderCurrentView = () => {\r\n    // NEW: Show welcome page first\r\n    if (showWelcome) {\r\n      return <WelcomePage onStartGame={handleStartGame} />;\r\n    }\r\n\r\n    if (gameState.gameEnded) {\r\n      return (\r\n        <GameScoreSheet \r\n          gameState={gameState}\r\n          onNewGame={handleReturnToGame}\r\n        />\r\n      );\r\n    }\r\n    \r\n    switch(currentView) {\r\n      case 'adjustment':\r\n        return (\r\n          <ScoreAdjustment \r\n            currentDeal={gameState.currentDeal}\r\n            onSaveAdjustment={handleSaveAdjustment}\r\n            onCancel={() => setCurrentView('game')}\r\n          />\r\n        );\r\n      case 'analysis':\r\n        return (\r\n          <FinalScoreAnalysis \r\n            analysisData={gameState.currentDeal.handAnalysis}\r\n            currentDeal={gameState.currentDeal}\r\n            onSave={handleSaveAnalysis}\r\n            onEdit={() => setCurrentView('adjustment')}\r\n            setGameState={setGameState}\r\n            scores={gameState.scores}\r\n          />\r\n        );\r\n      case 'game':\r\n      default:\r\n        return (\r\n          <>\r\n            <ScoreProcessor \r\n              currentDeal={gameState.currentDeal}\r\n              onScoreCalculated={handleScoreCalculated}\r\n            />\r\n            <BridgeGameUI \r\n              gameState={gameState}\r\n              updateCurrentDeal={updateCurrentDeal}\r\n              onNextDeal={handleNextDeal}\r\n              onNewGame={handleNewGame}\r\n              setGameState={setGameState}\r\n              onChooseBonusBridge={handleChooseBonusBridge}\r\n              onChoosePartyBridge={handleChoosePartyBridge}\r\n            />\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {renderCurrentView()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}