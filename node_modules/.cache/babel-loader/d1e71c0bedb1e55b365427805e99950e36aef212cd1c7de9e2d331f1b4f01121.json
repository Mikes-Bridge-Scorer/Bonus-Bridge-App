{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import WelcomePage from'./components/WelcomePage';import TrialManager from'./utils/TrialManager';// NEW: Trial system import\nimport TrialPopup from'./components/TrialPopup';// NEW: Trial popup import\nimport BridgeGameUI from'./BridgeGameUI';import ScoreAdjustment from'./components/ScoreAdjustment';import FinalScoreAnalysis from'./components/FinalScoreAnalysis';import ScoreProcessor from'./components/ScoreProcessor';import GameScoreSheet from'./components/GameScoreSheet';import{determineVulnerability,parseContract,calculateBridgeScore}from'./utils/scoring';import'./global.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{// Welcome page state\nconst[showWelcome,setShowWelcome]=useState(true);// NEW: Trial management state\nconst[trialManager]=useState(new TrialManager());const[showTrialPopup,setShowTrialPopup]=useState(false);const[trialType,setTrialType]=useState('info');// 'info', 'warning', 'expired'\n// State to track current view (main game, score adjustment, or final analysis)\nconst[currentView,setCurrentView]=useState('game');// Game state with updated scores structure\nconst[gameState,setGameState]=useState({gameNumber:1,dealNumber:1,deals:[],scores:{// Standard bridge (Party Bridge) scores\nnsPoints:0,ewPoints:0,nsTotal:0,ewTotal:0,// Bonus Bridge scores - separate tracking\nbonusNsPoints:0,bonusEwPoints:0,bonusNsTotal:0,bonusEwTotal:0,// Track which deal number we're on\ncurrentDealNumber:1},currentDeal:{dealNumber:1,vulnerable:determineVulnerability(1),contract:'',result:null,tricks:null,// Standard bridge scores\nnsPoints:0,ewPoints:0,rawScore:0,// Bonus bridge scores\nbonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false,isAwake:false,gameEnded:false});// NEW: Check trial status when app loads\nuseEffect(()=>{// Check for expiry first\nif(trialManager.isExpired()){setTrialType('expired');setShowTrialPopup(true);return;}// Check for warnings\nif(trialManager.shouldShowWarning()){setTrialType('warning');setShowTrialPopup(true);return;}// Show welcome popup on first visit (optional)\nconst isFirstVisit=!sessionStorage.getItem('trial_seen');if(isFirstVisit&&!showWelcome){setTrialType('info');setShowTrialPopup(true);sessionStorage.setItem('trial_seen','true');}},[trialManager,showWelcome]);// Function to start the game from welcome page\nconst handleStartGame=()=>{setShowWelcome(false);// Show trial info after welcome if first visit\nconst isFirstVisit=!sessionStorage.getItem('trial_seen');if(isFirstVisit){setTimeout(()=>{setTrialType('info');setShowTrialPopup(true);sessionStorage.setItem('trial_seen','true');},500);}};// NEW: Handle trial popup close\nconst handleTrialPopupClose=()=>{// Can't close expired popup without extension\nif(trialType!=='expired'){setShowTrialPopup(false);}};// NEW: Handle trial extension\nconst handleTrialExtended=()=>{setShowTrialPopup(false);// Refresh trial status\nif(trialManager.shouldShowWarning()){setTrialType('warning');}else{setTrialType('info');}};// Function to handle score calculation from ScoreProcessor\nconst handleScoreCalculated=scoreResult=>{const{nsPoints,ewPoints,rawScore}=scoreResult;console.log('App received score calculation:',scoreResult);// Update the current deal with the calculated scores\nsetGameState(prevState=>{// Check if scores have changed\nif(prevState.currentDeal.nsPoints===nsPoints&&prevState.currentDeal.ewPoints===ewPoints){return prevState;// No change needed\n}const updatedCurrentDeal={...prevState.currentDeal,nsPoints,ewPoints,rawScore:rawScore||Math.max(Math.abs(nsPoints),Math.abs(ewPoints))};// Calculate which team gets the raw score based on which has positive points\nconst nsScores=nsPoints>0;const ewScores=ewPoints>0;// Calculate running totals for Party Bridge (standard) scoring\n// Only add raw score to the running total of the team that scored\nconst calculatedNsTotal=nsScores?(prevState.scores.nsTotal||0)+rawScore:prevState.scores.nsTotal||0;const calculatedEwTotal=ewScores?(prevState.scores.ewTotal||0)+rawScore:prevState.scores.ewTotal||0;// Log the calculation details\nconsole.log('Party Bridge (standard) score calculation:',{previousNsTotal:prevState.scores.nsTotal||0,previousEwTotal:prevState.scores.ewTotal||0,nsScores,ewScores,rawScore,newNsTotal:calculatedNsTotal,newEwTotal:calculatedEwTotal});// Updated scores with correct running totals\nconst updatedScores={...prevState.scores,nsPoints,ewPoints,nsTotal:calculatedNsTotal,ewTotal:calculatedEwTotal,currentDealNumber:prevState.dealNumber};console.log('Updating score state:',{currentDeal:updatedCurrentDeal,scores:updatedScores});return{...prevState,currentDeal:updatedCurrentDeal,scores:updatedScores};});};// Function to update current deal\nconst updateCurrentDeal=useCallback(dealUpdates=>{setGameState(prevState=>({...prevState,currentDeal:{...prevState.currentDeal,...dealUpdates}}));},[]);// Function to handle adjustment input\nconst handleSaveAdjustment=adjustmentData=>{setGameState(prevState=>({...prevState,currentDeal:{...prevState.currentDeal,handAnalysis:adjustmentData,bonusScoringEnabled:true}}));setCurrentView('analysis');};// Function to handle score analysis saving - UPDATED with trial check\nconst handleSaveAnalysis=scoreResult=>{// NEW: Check trial limit before proceeding\nif(!trialManager.canPlayDeals()){setTrialType('expired');setShowTrialPopup(true);return;// Block progression\n}console.log('Handling save analysis with result:',scoreResult);// Extract the complete deal with bonus scores\nconst currentDealWithBonusScores=scoreResult.currentDealWithBonusScores||{...gameState.currentDeal,dealNumber:gameState.dealNumber,bonusNsPoints:scoreResult.nsPoints||0,// Store as bonus scores\nbonusEwPoints:scoreResult.ewPoints||0// Store as bonus scores\n};// Calculate raw score for bonus scoring if not provided\nconst bonusRawScore=Math.max(Math.abs(scoreResult.nsPoints||0),Math.abs(scoreResult.ewPoints||0));// Calculate running totals for bonus scoring\nconst nsScores=scoreResult.nsPoints>0;const ewScores=scoreResult.ewPoints>0;const bonusNsTotal=nsScores?(gameState.scores.bonusNsTotal||0)+bonusRawScore:gameState.scores.bonusNsTotal||0;const bonusEwTotal=ewScores?(gameState.scores.bonusEwTotal||0)+bonusRawScore:gameState.scores.bonusEwTotal||0;console.log('Bonus Bridge score calculation:',{nsScores,ewScores,bonusRawScore,previousBonusNsTotal:gameState.scores.bonusNsTotal||0,previousBonusEwTotal:gameState.scores.bonusEwTotal||0,newBonusNsTotal:bonusNsTotal,newBonusEwTotal:bonusEwTotal});// Store the complete deal with both raw and bonus scores\nconst completeCurrentDeal={...currentDealWithBonusScores,rawScore:currentDealWithBonusScores.rawScore||0,// Party Bridge score\nbonusRawScore:bonusRawScore,// Bonus Bridge score\nnsPoints:currentDealWithBonusScores.nsPoints||0,// Party Bridge points\newPoints:currentDealWithBonusScores.ewPoints||0,// Party Bridge points\nbonusNsPoints:scoreResult.nsPoints||0,// Bonus Bridge points\nbonusEwPoints:scoreResult.ewPoints||0// Bonus Bridge points\n};// NEW: Increment deal counter\nconst canContinue=trialManager.incrementDeals();// Update game state with new deal\nsetGameState(prevState=>{return{...prevState,dealNumber:prevState.dealNumber+1,deals:[...prevState.deals,completeCurrentDeal],scores:{...prevState.scores,// Reset current deal scores to 0\nnsPoints:0,ewPoints:0,// Preserve running totals for both scoring systems\nnsTotal:prevState.scores.nsTotal||0,ewTotal:prevState.scores.ewTotal||0,bonusNsTotal:bonusNsTotal,bonusEwTotal:bonusEwTotal,currentDealNumber:prevState.dealNumber+1},currentDeal:{dealNumber:prevState.dealNumber+1,vulnerable:determineVulnerability(prevState.dealNumber+1),contract:'',result:null,tricks:null,nsPoints:0,ewPoints:0,rawScore:0,bonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false};});// NEW: Check trial status after increment\nif(!canContinue){setTrialType('expired');setShowTrialPopup(true);}else if(trialManager.shouldShowWarning()){setTrialType('warning');setShowTrialPopup(true);}// Return to the game view\nsetCurrentView('game');};// Function to handle next deal without adjustments - UPDATED with trial check\nconst handleNextDeal=function(){let currentDealWithScores=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let updatedScores=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// NEW: Check trial limit before proceeding\nif(!trialManager.canPlayDeals()){setTrialType('expired');setShowTrialPopup(true);return;// Block progression\n}// Use provided scores or current state\nconst dealToSave=currentDealWithScores||gameState.currentDeal;const scoresToUse=updatedScores||gameState.scores;// Ensure the deal has scores\nif(!dealToSave.nsPoints&&!dealToSave.ewPoints&&dealToSave.contract){// Calculate if needed\nconst contractDetails=parseContract(dealToSave.contract,dealToSave.result,dealToSave.vulnerable);if(contractDetails){const standardScore=calculateBridgeScore(contractDetails);// Calculate raw score\nconst rawScore=Math.max(Math.abs(standardScore.nsPoints||0),Math.abs(standardScore.ewPoints||0));// Update scores\ndealToSave.nsPoints=standardScore.nsPoints||0;dealToSave.ewPoints=standardScore.ewPoints||0;dealToSave.rawScore=rawScore;// Determine which team scores positive points\nconst nsScores=standardScore.nsPoints>0;const ewScores=standardScore.ewPoints>0;// Calculate running totals for Party Bridge\nconst calculatedNsTotal=nsScores?(scoresToUse.nsTotal||0)+rawScore:scoresToUse.nsTotal||0;const calculatedEwTotal=ewScores?(scoresToUse.ewTotal||0)+rawScore:scoresToUse.ewTotal||0;console.log('Next deal Party Bridge score calculation:',{nsScores,ewScores,rawScore,previousNsTotal:scoresToUse.nsTotal||0,previousEwTotal:scoresToUse.ewTotal||0,newNsTotal:calculatedNsTotal,newEwTotal:calculatedEwTotal});// NEW: Increment deal counter\nconst canContinue=trialManager.incrementDeals();// Update game state with new deal\nsetGameState(prevState=>{return{...prevState,dealNumber:prevState.dealNumber+1,deals:[...prevState.deals,dealToSave],scores:{...prevState.scores,nsPoints:0,// Reset to 0 for the new deal\newPoints:0,// Reset to 0 for the new deal\nnsTotal:calculatedNsTotal,ewTotal:calculatedEwTotal,// Keep bonus scores unchanged\nbonusNsTotal:prevState.scores.bonusNsTotal||0,bonusEwTotal:prevState.scores.bonusEwTotal||0,currentDealNumber:prevState.dealNumber+1},currentDeal:{dealNumber:prevState.dealNumber+1,vulnerable:determineVulnerability(prevState.dealNumber+1),contract:'',result:null,tricks:null,nsPoints:0,ewPoints:0,rawScore:0,bonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false};});// NEW: Check trial status after increment\nif(!canContinue){setTrialType('expired');setShowTrialPopup(true);}else if(trialManager.shouldShowWarning()){setTrialType('warning');setShowTrialPopup(true);}}}else{// Already has scores, just save and proceed\nconst rawScore=dealToSave.rawScore||Math.max(Math.abs(dealToSave.nsPoints||0),Math.abs(dealToSave.ewPoints||0));const nsScores=dealToSave.nsPoints>0;const ewScores=dealToSave.ewPoints>0;const calculatedNsTotal=nsScores?(scoresToUse.nsTotal||0)+rawScore:scoresToUse.nsTotal||0;const calculatedEwTotal=ewScores?(scoresToUse.ewTotal||0)+rawScore:scoresToUse.ewTotal||0;console.log('Next deal with existing scores:',{nsScores,ewScores,rawScore,previousNsTotal:scoresToUse.nsTotal||0,previousEwTotal:scoresToUse.ewTotal||0,newNsTotal:calculatedNsTotal,newEwTotal:calculatedEwTotal});// NEW: Increment deal counter\nconst canContinue=trialManager.incrementDeals();// Update game state with new deal\nsetGameState(prevState=>{return{...prevState,dealNumber:prevState.dealNumber+1,deals:[...prevState.deals,dealToSave],scores:{...prevState.scores,nsPoints:0,// Reset to 0 for the new deal\newPoints:0,// Reset to 0 for the new deal\nnsTotal:calculatedNsTotal,ewTotal:calculatedEwTotal,// Keep bonus scores unchanged\nbonusNsTotal:prevState.scores.bonusNsTotal||0,bonusEwTotal:prevState.scores.bonusEwTotal||0,currentDealNumber:prevState.dealNumber+1},currentDeal:{dealNumber:prevState.dealNumber+1,vulnerable:determineVulnerability(prevState.dealNumber+1),contract:'',result:null,tricks:null,nsPoints:0,ewPoints:0,rawScore:0,bonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false};});// NEW: Check trial status after increment\nif(!canContinue){setTrialType('expired');setShowTrialPopup(true);}else if(trialManager.shouldShowWarning()){setTrialType('warning');setShowTrialPopup(true);}}};// Function to start a new game\nconst handleNewGame=()=>{// Check if we're ending the current game or starting fresh\nif(gameState.deals.length>0){// Mark game as ended to show summary\nsetGameState(prevState=>({...prevState,gameEnded:true}));}else{// Reset the game state for a fresh start\nsetGameState({gameNumber:gameState.gameNumber+1,dealNumber:1,deals:[],scores:{nsPoints:0,ewPoints:0,nsTotal:0,ewTotal:0,bonusNsPoints:0,bonusEwPoints:0,bonusNsTotal:0,bonusEwTotal:0,currentDealNumber:1},currentDeal:{dealNumber:1,vulnerable:determineVulnerability(1),contract:'',result:null,tricks:null,nsPoints:0,ewPoints:0,rawScore:0,bonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false,isAwake:gameState.isAwake,gameEnded:false});}};// Function to return to the game after viewing summary\nconst handleReturnToGame=()=>{// Reset the game state for a fresh start\nsetGameState({gameNumber:gameState.gameNumber+1,dealNumber:1,deals:[],scores:{nsPoints:0,ewPoints:0,nsTotal:0,ewTotal:0,bonusNsPoints:0,bonusEwPoints:0,bonusNsTotal:0,bonusEwTotal:0,currentDealNumber:1},currentDeal:{dealNumber:1,vulnerable:determineVulnerability(1),contract:'',result:null,tricks:null,nsPoints:0,ewPoints:0,rawScore:0,bonusNsPoints:0,bonusEwPoints:0,bonusRawScore:0,bonusScoringEnabled:true,handAnalysis:null},showScorePopup:false,isAwake:gameState.isAwake,gameEnded:false});};// Function to handle choosing Bonus Bridge scoring\nconst handleChooseBonusBridge=()=>{setCurrentView('adjustment');};// Function to handle choosing Party Bridge scoring (standard)\nconst handleChoosePartyBridge=()=>{// Calculate standard bridge score\nconst contractDetails=parseContract(gameState.currentDeal.contract,gameState.currentDeal.result,gameState.currentDeal.vulnerable);if(contractDetails){const standardScore=calculateBridgeScore(contractDetails);// Calculate raw score\nconst rawScore=Math.max(Math.abs(standardScore.nsPoints||0),Math.abs(standardScore.ewPoints||0));// Update current deal with standard scores\nconst currentDealWithScores={...gameState.currentDeal,nsPoints:standardScore.nsPoints||0,ewPoints:standardScore.ewPoints||0,rawScore,bonusScoringEnabled:false};// Calculate running totals using raw scores\nconst nsScores=standardScore.nsPoints>0;const ewScores=standardScore.ewPoints>0;const nsRawTotal=nsScores?(gameState.scores.nsTotal||0)+rawScore:gameState.scores.nsTotal||0;const ewRawTotal=ewScores?(gameState.scores.ewTotal||0)+rawScore:gameState.scores.ewTotal||0;// For immediate feedback of the current score\nconst updatedScores={...gameState.scores,nsPoints:standardScore.nsPoints||0,ewPoints:standardScore.ewPoints||0,nsTotal:nsRawTotal,ewTotal:ewRawTotal,// Important: Don't update bonus scores for Party Bridge\ncurrentDealNumber:gameState.dealNumber};// Update game state with scores\nsetGameState(prevState=>{return{...prevState,currentDeal:currentDealWithScores,scores:updatedScores,showScorePopup:false// Make sure popup is closed\n};});// Then proceed to next deal after a short delay to ensure UI updates\nsetTimeout(()=>{handleNextDeal(currentDealWithScores,updatedScores);},100);}};// Determine which view to show - UPDATED with trial popup\nconst renderCurrentView=()=>{// Show trial popup if needed (highest priority)\nif(showTrialPopup){return/*#__PURE__*/_jsx(TrialPopup,{trialManager:trialManager,onClose:handleTrialPopupClose,onExtended:handleTrialExtended,type:trialType});}// Show welcome page\nif(showWelcome){return/*#__PURE__*/_jsx(WelcomePage,{onStartGame:handleStartGame});}// Block access if trial expired (backup check)\nif(trialManager.isExpired()&&trialType==='expired'){return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',height:'100vh',flexDirection:'column',textAlign:'center',padding:'20px',backgroundColor:'#f5f5f5'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{color:'#f44336',marginBottom:'20px'},children:\"\\uD83D\\uDEAB Trial Period Expired\"}),/*#__PURE__*/_jsx(\"p\",{style:{marginBottom:'20px',color:'#555'},children:\"Your evaluation period has ended. Please contact Mike Smith for an extension.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowTrialPopup(true),style:{padding:'12px 24px',backgroundColor:'#1e5c8b',color:'white',border:'none',borderRadius:'8px',fontSize:'16px',cursor:'pointer'},children:\"Enter Extension Code\"})]});}// Regular app flow\nif(gameState.gameEnded){return/*#__PURE__*/_jsx(GameScoreSheet,{gameState:gameState,onNewGame:handleReturnToGame});}switch(currentView){case'adjustment':return/*#__PURE__*/_jsx(ScoreAdjustment,{currentDeal:gameState.currentDeal,onSaveAdjustment:handleSaveAdjustment,onCancel:()=>setCurrentView('game')});case'analysis':return/*#__PURE__*/_jsx(FinalScoreAnalysis,{analysisData:gameState.currentDeal.handAnalysis,currentDeal:gameState.currentDeal,onSave:handleSaveAnalysis,onEdit:()=>setCurrentView('adjustment'),setGameState:setGameState,scores:gameState.scores});case'game':default:return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ScoreProcessor,{currentDeal:gameState.currentDeal,onScoreCalculated:handleScoreCalculated}),/*#__PURE__*/_jsx(BridgeGameUI,{gameState:gameState,updateCurrentDeal:updateCurrentDeal,onNextDeal:handleNextDeal,onNewGame:handleNewGame,setGameState:setGameState,onChooseBonusBridge:handleChooseBonusBridge,onChoosePartyBridge:handleChoosePartyBridge// NEW: Pass trial info to UI (optional)\n,remainingDeals:trialManager.getRemainingDeals(),trialManager:trialManager})]});}};return/*#__PURE__*/_jsx(\"div\",{className:\"app-container\",children:renderCurrentView()});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","WelcomePage","TrialManager","TrialPopup","BridgeGameUI","ScoreAdjustment","FinalScoreAnalysis","ScoreProcessor","GameScoreSheet","determineVulnerability","parseContract","calculateBridgeScore","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","showWelcome","setShowWelcome","trialManager","showTrialPopup","setShowTrialPopup","trialType","setTrialType","currentView","setCurrentView","gameState","setGameState","gameNumber","dealNumber","deals","scores","nsPoints","ewPoints","nsTotal","ewTotal","bonusNsPoints","bonusEwPoints","bonusNsTotal","bonusEwTotal","currentDealNumber","currentDeal","vulnerable","contract","result","tricks","rawScore","bonusRawScore","bonusScoringEnabled","handAnalysis","showScorePopup","isAwake","gameEnded","isExpired","shouldShowWarning","isFirstVisit","sessionStorage","getItem","setItem","handleStartGame","setTimeout","handleTrialPopupClose","handleTrialExtended","handleScoreCalculated","scoreResult","console","log","prevState","updatedCurrentDeal","Math","max","abs","nsScores","ewScores","calculatedNsTotal","calculatedEwTotal","previousNsTotal","previousEwTotal","newNsTotal","newEwTotal","updatedScores","updateCurrentDeal","dealUpdates","handleSaveAdjustment","adjustmentData","handleSaveAnalysis","canPlayDeals","currentDealWithBonusScores","previousBonusNsTotal","previousBonusEwTotal","newBonusNsTotal","newBonusEwTotal","completeCurrentDeal","canContinue","incrementDeals","handleNextDeal","currentDealWithScores","arguments","length","undefined","dealToSave","scoresToUse","contractDetails","standardScore","handleNewGame","handleReturnToGame","handleChooseBonusBridge","handleChoosePartyBridge","nsRawTotal","ewRawTotal","renderCurrentView","onClose","onExtended","type","onStartGame","style","display","alignItems","justifyContent","height","flexDirection","textAlign","padding","backgroundColor","children","color","marginBottom","onClick","border","borderRadius","fontSize","cursor","onNewGame","onSaveAdjustment","onCancel","analysisData","onSave","onEdit","onScoreCalculated","onNextDeal","onChooseBonusBridge","onChoosePartyBridge","remainingDeals","getRemainingDeals","className"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport WelcomePage from './components/WelcomePage';\r\nimport TrialManager from './utils/TrialManager'; // NEW: Trial system import\r\nimport TrialPopup from './components/TrialPopup'; // NEW: Trial popup import\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport ScoreAdjustment from './components/ScoreAdjustment';\r\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\r\nimport ScoreProcessor from './components/ScoreProcessor';\r\nimport GameScoreSheet from './components/GameScoreSheet';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract,\r\n  calculateBridgeScore\r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  // Welcome page state\r\n  const [showWelcome, setShowWelcome] = useState(true);\r\n  \r\n  // NEW: Trial management state\r\n  const [trialManager] = useState(new TrialManager());\r\n  const [showTrialPopup, setShowTrialPopup] = useState(false);\r\n  const [trialType, setTrialType] = useState('info'); // 'info', 'warning', 'expired'\r\n  \r\n  // State to track current view (main game, score adjustment, or final analysis)\r\n  const [currentView, setCurrentView] = useState('game');\r\n  \r\n  // Game state with updated scores structure\r\n  const [gameState, setGameState] = useState({\r\n    gameNumber: 1,\r\n    dealNumber: 1,\r\n    deals: [],\r\n    scores: {\r\n      // Standard bridge (Party Bridge) scores\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      nsTotal: 0,\r\n      ewTotal: 0,\r\n      \r\n      // Bonus Bridge scores - separate tracking\r\n      bonusNsPoints: 0,\r\n      bonusEwPoints: 0,\r\n      bonusNsTotal: 0,\r\n      bonusEwTotal: 0,\r\n      \r\n      // Track which deal number we're on\r\n      currentDealNumber: 1\r\n    },\r\n    currentDeal: {\r\n      dealNumber: 1,\r\n      vulnerable: determineVulnerability(1),\r\n      contract: '',\r\n      result: null,\r\n      tricks: null,\r\n      \r\n      // Standard bridge scores\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      rawScore: 0,\r\n      \r\n      // Bonus bridge scores\r\n      bonusNsPoints: 0,\r\n      bonusEwPoints: 0,\r\n      bonusRawScore: 0,\r\n      \r\n      bonusScoringEnabled: true,\r\n      handAnalysis: null\r\n    },\r\n    showScorePopup: false,\r\n    isAwake: false,\r\n    gameEnded: false\r\n  });\r\n\r\n  // NEW: Check trial status when app loads\r\n  useEffect(() => {\r\n    // Check for expiry first\r\n    if (trialManager.isExpired()) {\r\n      setTrialType('expired');\r\n      setShowTrialPopup(true);\r\n      return;\r\n    }\r\n    \r\n    // Check for warnings\r\n    if (trialManager.shouldShowWarning()) {\r\n      setTrialType('warning');\r\n      setShowTrialPopup(true);\r\n      return;\r\n    }\r\n    \r\n    // Show welcome popup on first visit (optional)\r\n    const isFirstVisit = !sessionStorage.getItem('trial_seen');\r\n    if (isFirstVisit && !showWelcome) {\r\n      setTrialType('info');\r\n      setShowTrialPopup(true);\r\n      sessionStorage.setItem('trial_seen', 'true');\r\n    }\r\n  }, [trialManager, showWelcome]);\r\n\r\n  // Function to start the game from welcome page\r\n  const handleStartGame = () => {\r\n    setShowWelcome(false);\r\n    \r\n    // Show trial info after welcome if first visit\r\n    const isFirstVisit = !sessionStorage.getItem('trial_seen');\r\n    if (isFirstVisit) {\r\n      setTimeout(() => {\r\n        setTrialType('info');\r\n        setShowTrialPopup(true);\r\n        sessionStorage.setItem('trial_seen', 'true');\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  // NEW: Handle trial popup close\r\n  const handleTrialPopupClose = () => {\r\n    // Can't close expired popup without extension\r\n    if (trialType !== 'expired') {\r\n      setShowTrialPopup(false);\r\n    }\r\n  };\r\n\r\n  // NEW: Handle trial extension\r\n  const handleTrialExtended = () => {\r\n    setShowTrialPopup(false);\r\n    // Refresh trial status\r\n    if (trialManager.shouldShowWarning()) {\r\n      setTrialType('warning');\r\n    } else {\r\n      setTrialType('info');\r\n    }\r\n  };\r\n  \r\n  // Function to handle score calculation from ScoreProcessor\r\n  const handleScoreCalculated = (scoreResult) => {\r\n    const { nsPoints, ewPoints, rawScore } = scoreResult;\r\n    \r\n    console.log('App received score calculation:', scoreResult);\r\n    \r\n    // Update the current deal with the calculated scores\r\n    setGameState(prevState => {\r\n      // Check if scores have changed\r\n      if (prevState.currentDeal.nsPoints === nsPoints && \r\n          prevState.currentDeal.ewPoints === ewPoints) {\r\n        return prevState; // No change needed\r\n      }\r\n      \r\n      const updatedCurrentDeal = {\r\n        ...prevState.currentDeal,\r\n        nsPoints,\r\n        ewPoints,\r\n        rawScore: rawScore || Math.max(Math.abs(nsPoints), Math.abs(ewPoints))\r\n      };\r\n      \r\n      // Calculate which team gets the raw score based on which has positive points\r\n      const nsScores = nsPoints > 0;\r\n      const ewScores = ewPoints > 0;\r\n      \r\n      // Calculate running totals for Party Bridge (standard) scoring\r\n      // Only add raw score to the running total of the team that scored\r\n      const calculatedNsTotal = nsScores ? \r\n        (prevState.scores.nsTotal || 0) + rawScore : \r\n        (prevState.scores.nsTotal || 0);\r\n        \r\n      const calculatedEwTotal = ewScores ? \r\n        (prevState.scores.ewTotal || 0) + rawScore : \r\n        (prevState.scores.ewTotal || 0);\r\n      \r\n      // Log the calculation details\r\n      console.log('Party Bridge (standard) score calculation:', {\r\n        previousNsTotal: prevState.scores.nsTotal || 0,\r\n        previousEwTotal: prevState.scores.ewTotal || 0,\r\n        nsScores,\r\n        ewScores,\r\n        rawScore,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n      \r\n      // Updated scores with correct running totals\r\n      const updatedScores = {\r\n        ...prevState.scores,\r\n        nsPoints,\r\n        ewPoints,\r\n        nsTotal: calculatedNsTotal,\r\n        ewTotal: calculatedEwTotal,\r\n        currentDealNumber: prevState.dealNumber\r\n      };\r\n      \r\n      console.log('Updating score state:', {\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      });\r\n      \r\n      return {\r\n        ...prevState,\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Function to update current deal\r\n  const updateCurrentDeal = useCallback((dealUpdates) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        ...dealUpdates\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  // Function to handle adjustment input\r\n  const handleSaveAdjustment = (adjustmentData) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        handAnalysis: adjustmentData,\r\n        bonusScoringEnabled: true\r\n      }\r\n    }));\r\n    \r\n    setCurrentView('analysis');\r\n  };\r\n  \r\n  // Function to handle score analysis saving - UPDATED with trial check\r\n  const handleSaveAnalysis = (scoreResult) => {\r\n    // NEW: Check trial limit before proceeding\r\n    if (!trialManager.canPlayDeals()) {\r\n      setTrialType('expired');\r\n      setShowTrialPopup(true);\r\n      return; // Block progression\r\n    }\r\n\r\n    console.log('Handling save analysis with result:', scoreResult);\r\n    \r\n    // Extract the complete deal with bonus scores\r\n    const currentDealWithBonusScores = scoreResult.currentDealWithBonusScores || {\r\n      ...gameState.currentDeal,\r\n      dealNumber: gameState.dealNumber,\r\n      bonusNsPoints: scoreResult.nsPoints || 0,  // Store as bonus scores\r\n      bonusEwPoints: scoreResult.ewPoints || 0   // Store as bonus scores\r\n    };\r\n    \r\n    // Calculate raw score for bonus scoring if not provided\r\n    const bonusRawScore = Math.max(\r\n      Math.abs(scoreResult.nsPoints || 0),\r\n      Math.abs(scoreResult.ewPoints || 0)\r\n    );\r\n    \r\n    // Calculate running totals for bonus scoring\r\n    const nsScores = scoreResult.nsPoints > 0;\r\n    const ewScores = scoreResult.ewPoints > 0;\r\n    \r\n    const bonusNsTotal = nsScores ? \r\n      (gameState.scores.bonusNsTotal || 0) + bonusRawScore : \r\n      (gameState.scores.bonusNsTotal || 0);\r\n    \r\n    const bonusEwTotal = ewScores ? \r\n      (gameState.scores.bonusEwTotal || 0) + bonusRawScore : \r\n      (gameState.scores.bonusEwTotal || 0);\r\n    \r\n    console.log('Bonus Bridge score calculation:', {\r\n      nsScores,\r\n      ewScores,\r\n      bonusRawScore,\r\n      previousBonusNsTotal: gameState.scores.bonusNsTotal || 0,\r\n      previousBonusEwTotal: gameState.scores.bonusEwTotal || 0,\r\n      newBonusNsTotal: bonusNsTotal,\r\n      newBonusEwTotal: bonusEwTotal\r\n    });\r\n    \r\n    // Store the complete deal with both raw and bonus scores\r\n    const completeCurrentDeal = {\r\n      ...currentDealWithBonusScores,\r\n      rawScore: currentDealWithBonusScores.rawScore || 0,  // Party Bridge score\r\n      bonusRawScore: bonusRawScore,                        // Bonus Bridge score\r\n      nsPoints: currentDealWithBonusScores.nsPoints || 0,  // Party Bridge points\r\n      ewPoints: currentDealWithBonusScores.ewPoints || 0,  // Party Bridge points\r\n      bonusNsPoints: scoreResult.nsPoints || 0,            // Bonus Bridge points\r\n      bonusEwPoints: scoreResult.ewPoints || 0             // Bonus Bridge points\r\n    };\r\n\r\n    // NEW: Increment deal counter\r\n    const canContinue = trialManager.incrementDeals();\r\n    \r\n    // Update game state with new deal\r\n    setGameState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        dealNumber: prevState.dealNumber + 1,\r\n        deals: [...prevState.deals, completeCurrentDeal],\r\n        scores: {\r\n          ...prevState.scores,\r\n          // Reset current deal scores to 0\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          // Preserve running totals for both scoring systems\r\n          nsTotal: prevState.scores.nsTotal || 0,\r\n          ewTotal: prevState.scores.ewTotal || 0,\r\n          bonusNsTotal: bonusNsTotal,\r\n          bonusEwTotal: bonusEwTotal,\r\n          currentDealNumber: prevState.dealNumber + 1\r\n        },\r\n        currentDeal: {\r\n          dealNumber: prevState.dealNumber + 1,\r\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusRawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false\r\n      };\r\n    });\r\n\r\n    // NEW: Check trial status after increment\r\n    if (!canContinue) {\r\n      setTrialType('expired');\r\n      setShowTrialPopup(true);\r\n    } else if (trialManager.shouldShowWarning()) {\r\n      setTrialType('warning');\r\n      setShowTrialPopup(true);\r\n    }\r\n    \r\n    // Return to the game view\r\n    setCurrentView('game');\r\n  };\r\n  \r\n  // Function to handle next deal without adjustments - UPDATED with trial check\r\n  const handleNextDeal = (currentDealWithScores = null, updatedScores = null) => {\r\n    // NEW: Check trial limit before proceeding\r\n    if (!trialManager.canPlayDeals()) {\r\n      setTrialType('expired');\r\n      setShowTrialPopup(true);\r\n      return; // Block progression\r\n    }\r\n\r\n    // Use provided scores or current state\r\n    const dealToSave = currentDealWithScores || gameState.currentDeal;\r\n    const scoresToUse = updatedScores || gameState.scores;\r\n    \r\n    // Ensure the deal has scores\r\n    if (!dealToSave.nsPoints && !dealToSave.ewPoints && dealToSave.contract) {\r\n      // Calculate if needed\r\n      const contractDetails = parseContract(\r\n        dealToSave.contract, \r\n        dealToSave.result, \r\n        dealToSave.vulnerable\r\n      );\r\n      \r\n      if (contractDetails) {\r\n        const standardScore = calculateBridgeScore(contractDetails);\r\n        \r\n        // Calculate raw score\r\n        const rawScore = Math.max(\r\n          Math.abs(standardScore.nsPoints || 0), \r\n          Math.abs(standardScore.ewPoints || 0)\r\n        );\r\n        \r\n        // Update scores\r\n        dealToSave.nsPoints = standardScore.nsPoints || 0;\r\n        dealToSave.ewPoints = standardScore.ewPoints || 0;\r\n        dealToSave.rawScore = rawScore;\r\n        \r\n        // Determine which team scores positive points\r\n        const nsScores = standardScore.nsPoints > 0;\r\n        const ewScores = standardScore.ewPoints > 0;\r\n        \r\n        // Calculate running totals for Party Bridge\r\n        const calculatedNsTotal = nsScores ? \r\n          (scoresToUse.nsTotal || 0) + rawScore : \r\n          (scoresToUse.nsTotal || 0);\r\n        \r\n        const calculatedEwTotal = ewScores ? \r\n          (scoresToUse.ewTotal || 0) + rawScore : \r\n          (scoresToUse.ewTotal || 0);\r\n        \r\n        console.log('Next deal Party Bridge score calculation:', {\r\n          nsScores, \r\n          ewScores, \r\n          rawScore, \r\n          previousNsTotal: scoresToUse.nsTotal || 0,\r\n          previousEwTotal: scoresToUse.ewTotal || 0,\r\n          newNsTotal: calculatedNsTotal,\r\n          newEwTotal: calculatedEwTotal\r\n        });\r\n\r\n        // NEW: Increment deal counter\r\n        const canContinue = trialManager.incrementDeals();\r\n        \r\n        // Update game state with new deal\r\n        setGameState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            dealNumber: prevState.dealNumber + 1,\r\n            deals: [...prevState.deals, dealToSave],\r\n            scores: {\r\n              ...prevState.scores,\r\n              nsPoints: 0, // Reset to 0 for the new deal\r\n              ewPoints: 0, // Reset to 0 for the new deal\r\n              nsTotal: calculatedNsTotal,\r\n              ewTotal: calculatedEwTotal,\r\n              // Keep bonus scores unchanged\r\n              bonusNsTotal: prevState.scores.bonusNsTotal || 0,\r\n              bonusEwTotal: prevState.scores.bonusEwTotal || 0,\r\n              currentDealNumber: prevState.dealNumber + 1\r\n            },\r\n            currentDeal: {\r\n              dealNumber: prevState.dealNumber + 1,\r\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n              contract: '',\r\n              result: null,\r\n              tricks: null,\r\n              nsPoints: 0,\r\n              ewPoints: 0,\r\n              rawScore: 0,\r\n              bonusNsPoints: 0,\r\n              bonusEwPoints: 0,\r\n              bonusRawScore: 0,\r\n              bonusScoringEnabled: true,\r\n              handAnalysis: null\r\n            },\r\n            showScorePopup: false\r\n          };\r\n        });\r\n\r\n        // NEW: Check trial status after increment\r\n        if (!canContinue) {\r\n          setTrialType('expired');\r\n          setShowTrialPopup(true);\r\n        } else if (trialManager.shouldShowWarning()) {\r\n          setTrialType('warning');\r\n          setShowTrialPopup(true);\r\n        }\r\n      }\r\n    } else {\r\n      // Already has scores, just save and proceed\r\n      const rawScore = dealToSave.rawScore || Math.max(\r\n        Math.abs(dealToSave.nsPoints || 0), \r\n        Math.abs(dealToSave.ewPoints || 0)\r\n      );\r\n      \r\n      const nsScores = dealToSave.nsPoints > 0;\r\n      const ewScores = dealToSave.ewPoints > 0;\r\n      \r\n      const calculatedNsTotal = nsScores ? \r\n        (scoresToUse.nsTotal || 0) + rawScore : \r\n        (scoresToUse.nsTotal || 0);\r\n      \r\n      const calculatedEwTotal = ewScores ? \r\n        (scoresToUse.ewTotal || 0) + rawScore : \r\n        (scoresToUse.ewTotal || 0);\r\n      \r\n      console.log('Next deal with existing scores:', {\r\n        nsScores, \r\n        ewScores, \r\n        rawScore, \r\n        previousNsTotal: scoresToUse.nsTotal || 0,\r\n        previousEwTotal: scoresToUse.ewTotal || 0,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n\r\n      // NEW: Increment deal counter\r\n      const canContinue = trialManager.incrementDeals();\r\n      \r\n      // Update game state with new deal\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          dealNumber: prevState.dealNumber + 1,\r\n          deals: [...prevState.deals, dealToSave],\r\n          scores: {\r\n            ...prevState.scores,\r\n            nsPoints: 0, // Reset to 0 for the new deal\r\n            ewPoints: 0, // Reset to 0 for the new deal\r\n            nsTotal: calculatedNsTotal,\r\n            ewTotal: calculatedEwTotal,\r\n            // Keep bonus scores unchanged\r\n            bonusNsTotal: prevState.scores.bonusNsTotal || 0,\r\n            bonusEwTotal: prevState.scores.bonusEwTotal || 0,\r\n            currentDealNumber: prevState.dealNumber + 1\r\n          },\r\n          currentDeal: {\r\n            dealNumber: prevState.dealNumber + 1,\r\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n            contract: '',\r\n            result: null,\r\n            tricks: null,\r\n            nsPoints: 0,\r\n            ewPoints: 0,\r\n            rawScore: 0,\r\n            bonusNsPoints: 0,\r\n            bonusEwPoints: 0,\r\n            bonusRawScore: 0,\r\n            bonusScoringEnabled: true,\r\n            handAnalysis: null\r\n          },\r\n          showScorePopup: false\r\n        };\r\n      });\r\n\r\n      // NEW: Check trial status after increment\r\n      if (!canContinue) {\r\n        setTrialType('expired');\r\n        setShowTrialPopup(true);\r\n      } else if (trialManager.shouldShowWarning()) {\r\n        setTrialType('warning');\r\n        setShowTrialPopup(true);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Function to start a new game\r\n  const handleNewGame = () => {\r\n    // Check if we're ending the current game or starting fresh\r\n    if (gameState.deals.length > 0) {\r\n      // Mark game as ended to show summary\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        gameEnded: true\r\n      }));\r\n    } else {\r\n      // Reset the game state for a fresh start\r\n      setGameState({\r\n        gameNumber: gameState.gameNumber + 1,\r\n        dealNumber: 1,\r\n        deals: [],\r\n        scores: {\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          nsTotal: 0,\r\n          ewTotal: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusNsTotal: 0,\r\n          bonusEwTotal: 0,\r\n          currentDealNumber: 1\r\n        },\r\n        currentDeal: {\r\n          dealNumber: 1,\r\n          vulnerable: determineVulnerability(1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusNsPoints: 0,\r\n          bonusEwPoints: 0,\r\n          bonusRawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false,\r\n        isAwake: gameState.isAwake,\r\n        gameEnded: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to return to the game after viewing summary\r\n  const handleReturnToGame = () => {\r\n    // Reset the game state for a fresh start\r\n    setGameState({\r\n      gameNumber: gameState.gameNumber + 1,\r\n      dealNumber: 1,\r\n      deals: [],\r\n      scores: {\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        nsTotal: 0,\r\n        ewTotal: 0,\r\n        bonusNsPoints: 0,\r\n        bonusEwPoints: 0,\r\n        bonusNsTotal: 0,\r\n        bonusEwTotal: 0,\r\n        currentDealNumber: 1\r\n      },\r\n      currentDeal: {\r\n        dealNumber: 1,\r\n        vulnerable: determineVulnerability(1),\r\n        contract: '',\r\n        result: null,\r\n        tricks: null,\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        rawScore: 0,\r\n        bonusNsPoints: 0,\r\n        bonusEwPoints: 0,\r\n        bonusRawScore: 0,\r\n        bonusScoringEnabled: true,\r\n        handAnalysis: null\r\n      },\r\n      showScorePopup: false,\r\n      isAwake: gameState.isAwake,\r\n      gameEnded: false\r\n    });\r\n  };\r\n  \r\n  // Function to handle choosing Bonus Bridge scoring\r\n  const handleChooseBonusBridge = () => {\r\n    setCurrentView('adjustment');\r\n  };\r\n  \r\n  // Function to handle choosing Party Bridge scoring (standard)\r\n  const handleChoosePartyBridge = () => {\r\n    // Calculate standard bridge score\r\n    const contractDetails = parseContract(\r\n      gameState.currentDeal.contract, \r\n      gameState.currentDeal.result, \r\n      gameState.currentDeal.vulnerable\r\n    );\r\n    \r\n    if (contractDetails) {\r\n      const standardScore = calculateBridgeScore(contractDetails);\r\n      \r\n      // Calculate raw score\r\n      const rawScore = Math.max(\r\n        Math.abs(standardScore.nsPoints || 0), \r\n        Math.abs(standardScore.ewPoints || 0)\r\n      );\r\n      \r\n      // Update current deal with standard scores\r\n      const currentDealWithScores = {\r\n        ...gameState.currentDeal,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        rawScore,\r\n        bonusScoringEnabled: false\r\n      };\r\n      \r\n      // Calculate running totals using raw scores\r\n      const nsScores = standardScore.nsPoints > 0;\r\n      const ewScores = standardScore.ewPoints > 0;\r\n      \r\n      const nsRawTotal = nsScores ? \r\n        (gameState.scores.nsTotal || 0) + rawScore : \r\n        (gameState.scores.nsTotal || 0);\r\n      \r\n      const ewRawTotal = ewScores ? \r\n        (gameState.scores.ewTotal || 0) + rawScore : \r\n        (gameState.scores.ewTotal || 0);\r\n      \r\n      // For immediate feedback of the current score\r\n      const updatedScores = {\r\n        ...gameState.scores,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        nsTotal: nsRawTotal,\r\n        ewTotal: ewRawTotal,\r\n        \r\n        // Important: Don't update bonus scores for Party Bridge\r\n        currentDealNumber: gameState.dealNumber\r\n      };\r\n      \r\n      // Update game state with scores\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          currentDeal: currentDealWithScores,\r\n          scores: updatedScores,\r\n          showScorePopup: false // Make sure popup is closed\r\n        };\r\n      });\r\n      \r\n      // Then proceed to next deal after a short delay to ensure UI updates\r\n      setTimeout(() => {\r\n        handleNextDeal(currentDealWithScores, updatedScores);\r\n      }, 100);\r\n    }\r\n  };\r\n  \r\n  // Determine which view to show - UPDATED with trial popup\r\n  const renderCurrentView = () => {\r\n    // Show trial popup if needed (highest priority)\r\n    if (showTrialPopup) {\r\n      return (\r\n        <TrialPopup\r\n          trialManager={trialManager}\r\n          onClose={handleTrialPopupClose}\r\n          onExtended={handleTrialExtended}\r\n          type={trialType}\r\n        />\r\n      );\r\n    }\r\n\r\n    // Show welcome page\r\n    if (showWelcome) {\r\n      return <WelcomePage onStartGame={handleStartGame} />;\r\n    }\r\n\r\n    // Block access if trial expired (backup check)\r\n    if (trialManager.isExpired() && trialType === 'expired') {\r\n      return (\r\n        <div style={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          height: '100vh',\r\n          flexDirection: 'column',\r\n          textAlign: 'center',\r\n          padding: '20px',\r\n          backgroundColor: '#f5f5f5'\r\n        }}>\r\n          <h2 style={{ color: '#f44336', marginBottom: '20px' }}>\r\n            🚫 Trial Period Expired\r\n          </h2>\r\n          <p style={{ marginBottom: '20px', color: '#555' }}>\r\n            Your evaluation period has ended. Please contact Mike Smith for an extension.\r\n          </p>\r\n          <button \r\n            onClick={() => setShowTrialPopup(true)}\r\n            style={{\r\n              padding: '12px 24px',\r\n              backgroundColor: '#1e5c8b',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '8px',\r\n              fontSize: '16px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Enter Extension Code\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Regular app flow\r\n    if (gameState.gameEnded) {\r\n      return (\r\n        <GameScoreSheet \r\n          gameState={gameState}\r\n          onNewGame={handleReturnToGame}\r\n        />\r\n      );\r\n    }\r\n    \r\n    switch(currentView) {\r\n      case 'adjustment':\r\n        return (\r\n          <ScoreAdjustment \r\n            currentDeal={gameState.currentDeal}\r\n            onSaveAdjustment={handleSaveAdjustment}\r\n            onCancel={() => setCurrentView('game')}\r\n          />\r\n        );\r\n      case 'analysis':\r\n        return (\r\n          <FinalScoreAnalysis \r\n            analysisData={gameState.currentDeal.handAnalysis}\r\n            currentDeal={gameState.currentDeal}\r\n            onSave={handleSaveAnalysis}\r\n            onEdit={() => setCurrentView('adjustment')}\r\n            setGameState={setGameState}\r\n            scores={gameState.scores}\r\n          />\r\n        );\r\n      case 'game':\r\n      default:\r\n        return (\r\n          <>\r\n            <ScoreProcessor \r\n              currentDeal={gameState.currentDeal}\r\n              onScoreCalculated={handleScoreCalculated}\r\n            />\r\n            <BridgeGameUI \r\n              gameState={gameState}\r\n              updateCurrentDeal={updateCurrentDeal}\r\n              onNextDeal={handleNextDeal}\r\n              onNewGame={handleNewGame}\r\n              setGameState={setGameState}\r\n              onChooseBonusBridge={handleChooseBonusBridge}\r\n              onChoosePartyBridge={handleChoosePartyBridge}\r\n              // NEW: Pass trial info to UI (optional)\r\n              remainingDeals={trialManager.getRemainingDeals()}\r\n              trialManager={trialManager}\r\n            />\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {renderCurrentView()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}