{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\ContractInput.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\n\n// ContractInput component that uses an embedded HTML/CSS iframe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContractInput = ({\n  onContractChange,\n  initialContract = ''\n}) => {\n  _s();\n  const iframeRef = useRef(null);\n\n  // Parse initialContract\n  let initialLevel = '';\n  let initialSuit = '';\n  let initialDeclarer = '';\n  let initialDoubled = '';\n  if (initialContract) {\n    const contractMatch = initialContract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n    if (contractMatch) {\n      initialLevel = contractMatch[1];\n      initialSuit = contractMatch[2];\n      initialDeclarer = contractMatch[3];\n      initialDoubled = contractMatch[4] || '';\n    }\n  }\n  useEffect(() => {\n    if (iframeRef.current) {\n      // Function to handle messages from iframe\n      const handleMessage = event => {\n        // Security check\n        if (event.origin !== window.location.origin) return;\n\n        // Process message from iframe\n        if (event.data && event.data.type === 'contractChange') {\n          onContractChange(event.data.contract);\n        }\n      };\n\n      // Add event listener\n      window.addEventListener('message', handleMessage);\n\n      // Clean up\n      return () => {\n        window.removeEventListener('message', handleMessage);\n      };\n    }\n  }, [onContractChange]);\n  useEffect(() => {\n    // Wait for iframe to load\n    const iframe = iframeRef.current;\n    if (!iframe) return;\n    const handleLoad = () => {\n      // Send initial contract to iframe\n      iframe.contentWindow.postMessage({\n        type: 'initContract',\n        level: initialLevel,\n        suit: initialSuit,\n        declarer: initialDeclarer,\n        doubled: initialDoubled\n      }, '*');\n    };\n    iframe.addEventListener('load', handleLoad);\n    return () => {\n      iframe.removeEventListener('load', handleLoad);\n    };\n  }, [initialLevel, initialSuit, initialDeclarer, initialDoubled]);\n\n  // HTML content for the iframe - a complete, self-contained HTML document\n  const iframeContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <style>\n        body {\n          margin: 0;\n          padding: 10px;\n          font-family: sans-serif;\n          font-size: 14px;\n          overflow: hidden;\n        }\n        \n        .container {\n          max-height: 200px;\n          overflow: hidden;\n        }\n        \n        .section {\n          margin-bottom: 5px;\n        }\n        \n        .label {\n          font-weight: bold;\n          margin-bottom: 3px;\n          font-size: 12px;\n          color: #1e5c8b;\n        }\n        \n        .button-row {\n          display: flex;\n          gap: 5px;\n          margin-bottom: 5px;\n        }\n        \n        button {\n          flex: 1;\n          height: 30px;\n          padding: 0;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          font-size: 14px;\n          cursor: pointer;\n          background-color: #f8f8f8;\n        }\n        \n        button.selected {\n          background-color: #3498db;\n          color: white;\n          border-color: #3498db;\n          font-weight: bold;\n        }\n        \n        /* Suit colors */\n        button.diamond, button.heart {\n          color: #e74c3c;\n        }\n        \n        button.club, button.spade, button.nt {\n          color: #000;\n        }\n        \n        button.selected.club,\n        button.selected.spade,\n        button.selected.diamond,\n        button.selected.heart,\n        button.selected.nt {\n          color: white;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"section\">\n          <div class=\"label\">Level and Suit:</div>\n          <div class=\"button-row\">\n            <button id=\"level-1\">1</button>\n            <button id=\"level-2\">2</button>\n            <button id=\"level-3\">3</button>\n            <button id=\"level-4\">4</button>\n            <button id=\"level-5\">5</button>\n            <button id=\"level-6\">6</button>\n            <button id=\"level-7\">7</button>\n          </div>\n          <div class=\"button-row\">\n            <button id=\"suit-club\" class=\"club\">♣</button>\n            <button id=\"suit-diamond\" class=\"diamond\">♦</button>\n            <button id=\"suit-heart\" class=\"heart\">♥</button>\n            <button id=\"suit-spade\" class=\"spade\">♠</button>\n            <button id=\"suit-nt\" class=\"nt\">NT</button>\n          </div>\n        </div>\n        \n        <div class=\"section\">\n          <div class=\"label\">Declarer:</div>\n          <div class=\"button-row\">\n            <button id=\"declarer-N\">N</button>\n            <button id=\"declarer-S\">S</button>\n            <button id=\"declarer-E\">E</button>\n            <button id=\"declarer-W\">W</button>\n          </div>\n        </div>\n        \n        <div class=\"section\">\n          <div class=\"label\">Doubled:</div>\n          <div class=\"button-row\">\n            <button id=\"doubled-none\">-</button>\n            <button id=\"doubled-x\">X</button>\n            <button id=\"doubled-xx\">XX</button>\n          </div>\n        </div>\n      </div>\n      \n      <script>\n        // Current contract state\n        let level = '';\n        let suit = '';\n        let declarer = '';\n        let doubled = '';\n        \n        // Update contract and notify parent\n        function updateContract() {\n          if (level && suit && declarer) {\n            const contract = \\`\\${level}\\${suit} \\${declarer}\\${doubled}\\`;\n            // Send message to parent\n            window.parent.postMessage({\n              type: 'contractChange',\n              contract: contract\n            }, '*');\n          }\n        }\n        \n        // Helper to select a button in a group\n        function selectButton(buttonId, group, value) {\n          // Deselect all buttons in the group\n          document.querySelectorAll(\\`[id^=\\${group}-]\\`).forEach(btn => {\n            btn.classList.remove('selected');\n          });\n          \n          // Select the clicked button\n          document.getElementById(buttonId).classList.add('selected');\n          \n          // Return the value\n          return value;\n        }\n        \n        // Set up event listeners for level buttons\n        document.querySelectorAll('[id^=level-]').forEach(button => {\n          button.addEventListener('click', function() {\n            level = selectButton(this.id, 'level', this.textContent);\n            updateContract();\n          });\n        });\n        \n        // Set up event listeners for suit buttons\n        document.querySelectorAll('[id^=suit-]').forEach(button => {\n          button.addEventListener('click', function() {\n            if (this.id === 'suit-club') suit = '♣';\n            else if (this.id === 'suit-diamond') suit = '♦';\n            else if (this.id === 'suit-heart') suit = '♥';\n            else if (this.id === 'suit-spade') suit = '♠';\n            else if (this.id === 'suit-nt') suit = 'NT';\n            \n            selectButton(this.id, 'suit');\n            updateContract();\n          });\n        });\n        \n        // Set up event listeners for declarer buttons\n        document.querySelectorAll('[id^=declarer-]').forEach(button => {\n          button.addEventListener('click', function() {\n            declarer = selectButton(this.id, 'declarer', this.textContent);\n            updateContract();\n          });\n        });\n        \n        // Set up event listeners for doubled buttons\n        document.querySelectorAll('[id^=doubled-]').forEach(button => {\n          button.addEventListener('click', function() {\n            if (this.id === 'doubled-none') doubled = '';\n            else if (this.id === 'doubled-x') doubled = 'X';\n            else if (this.id === 'doubled-xx') doubled = 'XX';\n            \n            selectButton(this.id, 'doubled');\n            updateContract();\n          });\n        });\n        \n        // Listen for messages from parent\n        window.addEventListener('message', function(event) {\n          // Security check (ideally should check origin)\n          \n          // Handle initial contract\n          if (event.data && event.data.type === 'initContract') {\n            // Set level\n            if (event.data.level) {\n              level = event.data.level;\n              const levelBtn = document.getElementById(\\`level-\\${level}\\`);\n              if (levelBtn) levelBtn.classList.add('selected');\n            }\n            \n            // Set suit\n            if (event.data.suit) {\n              suit = event.data.suit;\n              let suitId = '';\n              if (suit === '♣') suitId = 'suit-club';\n              else if (suit === '♦') suitId = 'suit-diamond';\n              else if (suit === '♥') suitId = 'suit-heart';\n              else if (suit === '♠') suitId = 'suit-spade';\n              else if (suit === 'NT') suitId = 'suit-nt';\n              \n              if (suitId) document.getElementById(suitId).classList.add('selected');\n            }\n            \n            // Set declarer\n            if (event.data.declarer) {\n              declarer = event.data.declarer;\n              const declarerBtn = document.getElementById(\\`declarer-\\${declarer}\\`);\n              if (declarerBtn) declarerBtn.classList.add('selected');\n            }\n            \n            // Set doubled\n            if (event.data.doubled) {\n              doubled = event.data.doubled;\n              const doubledBtn = document.getElementById(doubled === 'X' ? 'doubled-x' : 'doubled-xx');\n              if (doubledBtn) doubledBtn.classList.add('selected');\n            } else {\n              // Default to \"not doubled\"\n              doubled = '';\n              document.getElementById('doubled-none').classList.add('selected');\n            }\n          }\n        });\n        \n        // Notify parent that we're ready\n        window.parent.postMessage({ type: 'iframeReady' }, '*');\n      </script>\n    </body>\n    </html>\n  `;\n  return /*#__PURE__*/_jsxDEV(\"iframe\", {\n    ref: iframeRef,\n    srcDoc: iframeContent,\n    style: {\n      border: 'none',\n      width: '100%',\n      height: '200px',\n      overflow: 'hidden'\n    },\n    title: \"Contract Input\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n_s(ContractInput, \"T0d0w5N1fM2C77G6Ok59U7sp2mo=\");\n_c = ContractInput;\nexport default ContractInput;\nvar _c;\n$RefreshReg$(_c, \"ContractInput\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ContractInput","onContractChange","initialContract","_s","iframeRef","initialLevel","initialSuit","initialDeclarer","initialDoubled","contractMatch","match","current","handleMessage","event","origin","window","location","data","type","contract","addEventListener","removeEventListener","iframe","handleLoad","contentWindow","postMessage","level","suit","declarer","doubled","iframeContent","ref","srcDoc","style","border","width","height","overflow","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/ContractInput.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// ContractInput component that uses an embedded HTML/CSS iframe\r\nconst ContractInput = ({ onContractChange, initialContract = '' }) => {\r\n  const iframeRef = useRef(null);\r\n  \r\n  // Parse initialContract\r\n  let initialLevel = '';\r\n  let initialSuit = '';\r\n  let initialDeclarer = '';\r\n  let initialDoubled = '';\r\n  \r\n  if (initialContract) {\r\n    const contractMatch = initialContract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n    if (contractMatch) {\r\n      initialLevel = contractMatch[1];\r\n      initialSuit = contractMatch[2];\r\n      initialDeclarer = contractMatch[3];\r\n      initialDoubled = contractMatch[4] || '';\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (iframeRef.current) {\r\n      // Function to handle messages from iframe\r\n      const handleMessage = (event) => {\r\n        // Security check\r\n        if (event.origin !== window.location.origin) return;\r\n        \r\n        // Process message from iframe\r\n        if (event.data && event.data.type === 'contractChange') {\r\n          onContractChange(event.data.contract);\r\n        }\r\n      };\r\n      \r\n      // Add event listener\r\n      window.addEventListener('message', handleMessage);\r\n      \r\n      // Clean up\r\n      return () => {\r\n        window.removeEventListener('message', handleMessage);\r\n      };\r\n    }\r\n  }, [onContractChange]);\r\n  \r\n  useEffect(() => {\r\n    // Wait for iframe to load\r\n    const iframe = iframeRef.current;\r\n    if (!iframe) return;\r\n    \r\n    const handleLoad = () => {\r\n      // Send initial contract to iframe\r\n      iframe.contentWindow.postMessage({\r\n        type: 'initContract',\r\n        level: initialLevel,\r\n        suit: initialSuit,\r\n        declarer: initialDeclarer,\r\n        doubled: initialDoubled\r\n      }, '*');\r\n    };\r\n    \r\n    iframe.addEventListener('load', handleLoad);\r\n    \r\n    return () => {\r\n      iframe.removeEventListener('load', handleLoad);\r\n    };\r\n  }, [initialLevel, initialSuit, initialDeclarer, initialDoubled]);\r\n  \r\n  // HTML content for the iframe - a complete, self-contained HTML document\r\n  const iframeContent = `\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n      <style>\r\n        body {\r\n          margin: 0;\r\n          padding: 10px;\r\n          font-family: sans-serif;\r\n          font-size: 14px;\r\n          overflow: hidden;\r\n        }\r\n        \r\n        .container {\r\n          max-height: 200px;\r\n          overflow: hidden;\r\n        }\r\n        \r\n        .section {\r\n          margin-bottom: 5px;\r\n        }\r\n        \r\n        .label {\r\n          font-weight: bold;\r\n          margin-bottom: 3px;\r\n          font-size: 12px;\r\n          color: #1e5c8b;\r\n        }\r\n        \r\n        .button-row {\r\n          display: flex;\r\n          gap: 5px;\r\n          margin-bottom: 5px;\r\n        }\r\n        \r\n        button {\r\n          flex: 1;\r\n          height: 30px;\r\n          padding: 0;\r\n          border: 1px solid #ddd;\r\n          border-radius: 4px;\r\n          font-size: 14px;\r\n          cursor: pointer;\r\n          background-color: #f8f8f8;\r\n        }\r\n        \r\n        button.selected {\r\n          background-color: #3498db;\r\n          color: white;\r\n          border-color: #3498db;\r\n          font-weight: bold;\r\n        }\r\n        \r\n        /* Suit colors */\r\n        button.diamond, button.heart {\r\n          color: #e74c3c;\r\n        }\r\n        \r\n        button.club, button.spade, button.nt {\r\n          color: #000;\r\n        }\r\n        \r\n        button.selected.club,\r\n        button.selected.spade,\r\n        button.selected.diamond,\r\n        button.selected.heart,\r\n        button.selected.nt {\r\n          color: white;\r\n        }\r\n      </style>\r\n    </head>\r\n    <body>\r\n      <div class=\"container\">\r\n        <div class=\"section\">\r\n          <div class=\"label\">Level and Suit:</div>\r\n          <div class=\"button-row\">\r\n            <button id=\"level-1\">1</button>\r\n            <button id=\"level-2\">2</button>\r\n            <button id=\"level-3\">3</button>\r\n            <button id=\"level-4\">4</button>\r\n            <button id=\"level-5\">5</button>\r\n            <button id=\"level-6\">6</button>\r\n            <button id=\"level-7\">7</button>\r\n          </div>\r\n          <div class=\"button-row\">\r\n            <button id=\"suit-club\" class=\"club\">♣</button>\r\n            <button id=\"suit-diamond\" class=\"diamond\">♦</button>\r\n            <button id=\"suit-heart\" class=\"heart\">♥</button>\r\n            <button id=\"suit-spade\" class=\"spade\">♠</button>\r\n            <button id=\"suit-nt\" class=\"nt\">NT</button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"section\">\r\n          <div class=\"label\">Declarer:</div>\r\n          <div class=\"button-row\">\r\n            <button id=\"declarer-N\">N</button>\r\n            <button id=\"declarer-S\">S</button>\r\n            <button id=\"declarer-E\">E</button>\r\n            <button id=\"declarer-W\">W</button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"section\">\r\n          <div class=\"label\">Doubled:</div>\r\n          <div class=\"button-row\">\r\n            <button id=\"doubled-none\">-</button>\r\n            <button id=\"doubled-x\">X</button>\r\n            <button id=\"doubled-xx\">XX</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <script>\r\n        // Current contract state\r\n        let level = '';\r\n        let suit = '';\r\n        let declarer = '';\r\n        let doubled = '';\r\n        \r\n        // Update contract and notify parent\r\n        function updateContract() {\r\n          if (level && suit && declarer) {\r\n            const contract = \\`\\${level}\\${suit} \\${declarer}\\${doubled}\\`;\r\n            // Send message to parent\r\n            window.parent.postMessage({\r\n              type: 'contractChange',\r\n              contract: contract\r\n            }, '*');\r\n          }\r\n        }\r\n        \r\n        // Helper to select a button in a group\r\n        function selectButton(buttonId, group, value) {\r\n          // Deselect all buttons in the group\r\n          document.querySelectorAll(\\`[id^=\\${group}-]\\`).forEach(btn => {\r\n            btn.classList.remove('selected');\r\n          });\r\n          \r\n          // Select the clicked button\r\n          document.getElementById(buttonId).classList.add('selected');\r\n          \r\n          // Return the value\r\n          return value;\r\n        }\r\n        \r\n        // Set up event listeners for level buttons\r\n        document.querySelectorAll('[id^=level-]').forEach(button => {\r\n          button.addEventListener('click', function() {\r\n            level = selectButton(this.id, 'level', this.textContent);\r\n            updateContract();\r\n          });\r\n        });\r\n        \r\n        // Set up event listeners for suit buttons\r\n        document.querySelectorAll('[id^=suit-]').forEach(button => {\r\n          button.addEventListener('click', function() {\r\n            if (this.id === 'suit-club') suit = '♣';\r\n            else if (this.id === 'suit-diamond') suit = '♦';\r\n            else if (this.id === 'suit-heart') suit = '♥';\r\n            else if (this.id === 'suit-spade') suit = '♠';\r\n            else if (this.id === 'suit-nt') suit = 'NT';\r\n            \r\n            selectButton(this.id, 'suit');\r\n            updateContract();\r\n          });\r\n        });\r\n        \r\n        // Set up event listeners for declarer buttons\r\n        document.querySelectorAll('[id^=declarer-]').forEach(button => {\r\n          button.addEventListener('click', function() {\r\n            declarer = selectButton(this.id, 'declarer', this.textContent);\r\n            updateContract();\r\n          });\r\n        });\r\n        \r\n        // Set up event listeners for doubled buttons\r\n        document.querySelectorAll('[id^=doubled-]').forEach(button => {\r\n          button.addEventListener('click', function() {\r\n            if (this.id === 'doubled-none') doubled = '';\r\n            else if (this.id === 'doubled-x') doubled = 'X';\r\n            else if (this.id === 'doubled-xx') doubled = 'XX';\r\n            \r\n            selectButton(this.id, 'doubled');\r\n            updateContract();\r\n          });\r\n        });\r\n        \r\n        // Listen for messages from parent\r\n        window.addEventListener('message', function(event) {\r\n          // Security check (ideally should check origin)\r\n          \r\n          // Handle initial contract\r\n          if (event.data && event.data.type === 'initContract') {\r\n            // Set level\r\n            if (event.data.level) {\r\n              level = event.data.level;\r\n              const levelBtn = document.getElementById(\\`level-\\${level}\\`);\r\n              if (levelBtn) levelBtn.classList.add('selected');\r\n            }\r\n            \r\n            // Set suit\r\n            if (event.data.suit) {\r\n              suit = event.data.suit;\r\n              let suitId = '';\r\n              if (suit === '♣') suitId = 'suit-club';\r\n              else if (suit === '♦') suitId = 'suit-diamond';\r\n              else if (suit === '♥') suitId = 'suit-heart';\r\n              else if (suit === '♠') suitId = 'suit-spade';\r\n              else if (suit === 'NT') suitId = 'suit-nt';\r\n              \r\n              if (suitId) document.getElementById(suitId).classList.add('selected');\r\n            }\r\n            \r\n            // Set declarer\r\n            if (event.data.declarer) {\r\n              declarer = event.data.declarer;\r\n              const declarerBtn = document.getElementById(\\`declarer-\\${declarer}\\`);\r\n              if (declarerBtn) declarerBtn.classList.add('selected');\r\n            }\r\n            \r\n            // Set doubled\r\n            if (event.data.doubled) {\r\n              doubled = event.data.doubled;\r\n              const doubledBtn = document.getElementById(doubled === 'X' ? 'doubled-x' : 'doubled-xx');\r\n              if (doubledBtn) doubledBtn.classList.add('selected');\r\n            } else {\r\n              // Default to \"not doubled\"\r\n              doubled = '';\r\n              document.getElementById('doubled-none').classList.add('selected');\r\n            }\r\n          }\r\n        });\r\n        \r\n        // Notify parent that we're ready\r\n        window.parent.postMessage({ type: 'iframeReady' }, '*');\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `;\r\n  \r\n  return (\r\n    <iframe \r\n      ref={iframeRef}\r\n      srcDoc={iframeContent}\r\n      style={{\r\n        border: 'none',\r\n        width: '100%',\r\n        height: '200px',\r\n        overflow: 'hidden'\r\n      }}\r\n      title=\"Contract Input\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContractInput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC,eAAe,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,IAAIQ,YAAY,GAAG,EAAE;EACrB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,cAAc,GAAG,EAAE;EAEvB,IAAIN,eAAe,EAAE;IACnB,MAAMO,aAAa,GAAGP,eAAe,CAACQ,KAAK,CAAC,oCAAoC,CAAC;IACjF,IAAID,aAAa,EAAE;MACjBJ,YAAY,GAAGI,aAAa,CAAC,CAAC,CAAC;MAC/BH,WAAW,GAAGG,aAAa,CAAC,CAAC,CAAC;MAC9BF,eAAe,GAAGE,aAAa,CAAC,CAAC,CAAC;MAClCD,cAAc,GAAGC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE;IACzC;EACF;EAEAb,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,CAACO,OAAO,EAAE;MACrB;MACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;QAC/B;QACA,IAAIA,KAAK,CAACC,MAAM,KAAKC,MAAM,CAACC,QAAQ,CAACF,MAAM,EAAE;;QAE7C;QACA,IAAID,KAAK,CAACI,IAAI,IAAIJ,KAAK,CAACI,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;UACtDjB,gBAAgB,CAACY,KAAK,CAACI,IAAI,CAACE,QAAQ,CAAC;QACvC;MACF,CAAC;;MAED;MACAJ,MAAM,CAACK,gBAAgB,CAAC,SAAS,EAAER,aAAa,CAAC;;MAEjD;MACA,OAAO,MAAM;QACXG,MAAM,CAACM,mBAAmB,CAAC,SAAS,EAAET,aAAa,CAAC;MACtD,CAAC;IACH;EACF,CAAC,EAAE,CAACX,gBAAgB,CAAC,CAAC;EAEtBL,SAAS,CAAC,MAAM;IACd;IACA,MAAM0B,MAAM,GAAGlB,SAAS,CAACO,OAAO;IAChC,IAAI,CAACW,MAAM,EAAE;IAEb,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvB;MACAD,MAAM,CAACE,aAAa,CAACC,WAAW,CAAC;QAC/BP,IAAI,EAAE,cAAc;QACpBQ,KAAK,EAAErB,YAAY;QACnBsB,IAAI,EAAErB,WAAW;QACjBsB,QAAQ,EAAErB,eAAe;QACzBsB,OAAO,EAAErB;MACX,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IAEDc,MAAM,CAACF,gBAAgB,CAAC,MAAM,EAAEG,UAAU,CAAC;IAE3C,OAAO,MAAM;MACXD,MAAM,CAACD,mBAAmB,CAAC,MAAM,EAAEE,UAAU,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAAClB,YAAY,EAAEC,WAAW,EAAEC,eAAe,EAAEC,cAAc,CAAC,CAAC;;EAEhE;EACA,MAAMsB,aAAa,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,oBACE/B,OAAA;IACEgC,GAAG,EAAE3B,SAAU;IACf4B,MAAM,EAAEF,aAAc;IACtBG,KAAK,EAAE;MACLC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,OAAO;MACfC,QAAQ,EAAE;IACZ,CAAE;IACFC,KAAK,EAAC;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEN,CAAC;AAACvC,EAAA,CAhUIH,aAAa;AAAA2C,EAAA,GAAb3C,aAAa;AAkUnB,eAAeA,aAAa;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}