{"ast":null,"code":"/**\r\n * Utility functions for managing wake lock\r\n * Wake Lock prevents the device from going to sleep while the app is in use\r\n */// Store the wake lock reference\nlet wakeLock=null;/**\r\n * Check if the Wake Lock API is supported by the browser\r\n * @returns {boolean} True if Wake Lock API is supported\r\n */export const isWakeLockSupported=()=>{return'wakeLock'in navigator;};/**\r\n * Request a wake lock to keep the screen awake\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */export const requestWakeLock=async()=>{// Check if Wake Lock API is supported\nif(!isWakeLockSupported()){console.warn('Wake Lock API not supported in this browser');return false;}try{// Request a screen wake lock\nwakeLock=await navigator.wakeLock.request('screen');console.log('Wake Lock is active');// Listen for visibility changes to reacquire wake lock if needed\ndocument.addEventListener('visibilitychange',handleVisibilityChange);return true;}catch(err){// Handle wake lock request errors\nconsole.error(`Failed to request Wake Lock: ${err.message}`);return false;}};/**\r\n * Release the wake lock and allow the screen to sleep again\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */export const releaseWakeLock=async()=>{// Check if there's an active wake lock\nif(!wakeLock){console.warn('No active Wake Lock to release');return false;}try{// Release the wake lock\nawait wakeLock.release();wakeLock=null;console.log('Wake Lock released');// Remove the visibilitychange event listener\ndocument.removeEventListener('visibilitychange',handleVisibilityChange);return true;}catch(err){// Handle release errors\nconsole.error(`Failed to release Wake Lock: ${err.message}`);return false;}};/**\r\n * Handle visibility change events to reacquire wake lock when tab becomes visible again\r\n */const handleVisibilityChange=async()=>{if(wakeLock!==null&&document.visibilityState==='visible'){// Page has become visible again, reacquire the wake lock\ntry{wakeLock=await navigator.wakeLock.request('screen');console.log('Wake Lock reacquired');}catch(err){console.error(`Failed to reacquire Wake Lock: ${err.message}`);}}};/**\r\n * Get the current wake lock status\r\n * @returns {boolean} True if wake lock is currently active\r\n */export const isWakeLockActive=()=>{return wakeLock!==null;};","map":{"version":3,"names":["wakeLock","isWakeLockSupported","navigator","requestWakeLock","console","warn","request","log","document","addEventListener","handleVisibilityChange","err","error","message","releaseWakeLock","release","removeEventListener","visibilityState","isWakeLockActive"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/wakeLock.js"],"sourcesContent":["/**\r\n * Utility functions for managing wake lock\r\n * Wake Lock prevents the device from going to sleep while the app is in use\r\n */\r\n\r\n// Store the wake lock reference\r\nlet wakeLock = null;\r\n\r\n/**\r\n * Check if the Wake Lock API is supported by the browser\r\n * @returns {boolean} True if Wake Lock API is supported\r\n */\r\nexport const isWakeLockSupported = () => {\r\n  return 'wakeLock' in navigator;\r\n};\r\n\r\n/**\r\n * Request a wake lock to keep the screen awake\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\r\nexport const requestWakeLock = async () => {\r\n  // Check if Wake Lock API is supported\r\n  if (!isWakeLockSupported()) {\r\n    console.warn('Wake Lock API not supported in this browser');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Request a screen wake lock\r\n    wakeLock = await navigator.wakeLock.request('screen');\r\n    \r\n    console.log('Wake Lock is active');\r\n    \r\n    // Listen for visibility changes to reacquire wake lock if needed\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    // Handle wake lock request errors\r\n    console.error(`Failed to request Wake Lock: ${err.message}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Release the wake lock and allow the screen to sleep again\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\r\nexport const releaseWakeLock = async () => {\r\n  // Check if there's an active wake lock\r\n  if (!wakeLock) {\r\n    console.warn('No active Wake Lock to release');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Release the wake lock\r\n    await wakeLock.release();\r\n    wakeLock = null;\r\n    \r\n    console.log('Wake Lock released');\r\n    \r\n    // Remove the visibilitychange event listener\r\n    document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    // Handle release errors\r\n    console.error(`Failed to release Wake Lock: ${err.message}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Handle visibility change events to reacquire wake lock when tab becomes visible again\r\n */\r\nconst handleVisibilityChange = async () => {\r\n  if (wakeLock !== null && document.visibilityState === 'visible') {\r\n    // Page has become visible again, reacquire the wake lock\r\n    try {\r\n      wakeLock = await navigator.wakeLock.request('screen');\r\n      console.log('Wake Lock reacquired');\r\n    } catch (err) {\r\n      console.error(`Failed to reacquire Wake Lock: ${err.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current wake lock status\r\n * @returns {boolean} True if wake lock is currently active\r\n */\r\nexport const isWakeLockActive = () => {\r\n  return wakeLock !== null;\r\n};"],"mappings":"AAAA;AACA;AACA;AACA,GAEA;AACA,GAAI,CAAAA,QAAQ,CAAG,IAAI,CAEnB;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,CACvC,MAAO,UAAU,EAAI,CAAAC,SAAS,CAChC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CACzC;AACA,GAAI,CAACF,mBAAmB,CAAC,CAAC,CAAE,CAC1BG,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC,CAC3D,MAAO,MAAK,CACd,CAEA,GAAI,CACF;AACAL,QAAQ,CAAG,KAAM,CAAAE,SAAS,CAACF,QAAQ,CAACM,OAAO,CAAC,QAAQ,CAAC,CAErDF,OAAO,CAACG,GAAG,CAAC,qBAAqB,CAAC,CAElC;AACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,CAAEC,sBAAsB,CAAC,CAErE,MAAO,KAAI,CACb,CAAE,MAAOC,GAAG,CAAE,CACZ;AACAP,OAAO,CAACQ,KAAK,CAAC,gCAAgCD,GAAG,CAACE,OAAO,EAAE,CAAC,CAC5D,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CACzC;AACA,GAAI,CAACd,QAAQ,CAAE,CACbI,OAAO,CAACC,IAAI,CAAC,gCAAgC,CAAC,CAC9C,MAAO,MAAK,CACd,CAEA,GAAI,CACF;AACA,KAAM,CAAAL,QAAQ,CAACe,OAAO,CAAC,CAAC,CACxBf,QAAQ,CAAG,IAAI,CAEfI,OAAO,CAACG,GAAG,CAAC,oBAAoB,CAAC,CAEjC;AACAC,QAAQ,CAACQ,mBAAmB,CAAC,kBAAkB,CAAEN,sBAAsB,CAAC,CAExE,MAAO,KAAI,CACb,CAAE,MAAOC,GAAG,CAAE,CACZ;AACAP,OAAO,CAACQ,KAAK,CAAC,gCAAgCD,GAAG,CAACE,OAAO,EAAE,CAAC,CAC5D,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA,GACA,KAAM,CAAAH,sBAAsB,CAAG,KAAAA,CAAA,GAAY,CACzC,GAAIV,QAAQ,GAAK,IAAI,EAAIQ,QAAQ,CAACS,eAAe,GAAK,SAAS,CAAE,CAC/D;AACA,GAAI,CACFjB,QAAQ,CAAG,KAAM,CAAAE,SAAS,CAACF,QAAQ,CAACM,OAAO,CAAC,QAAQ,CAAC,CACrDF,OAAO,CAACG,GAAG,CAAC,sBAAsB,CAAC,CACrC,CAAE,MAAOI,GAAG,CAAE,CACZP,OAAO,CAACQ,KAAK,CAAC,kCAAkCD,GAAG,CAACE,OAAO,EAAE,CAAC,CAChE,CACF,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,gBAAgB,CAAGA,CAAA,GAAM,CACpC,MAAO,CAAAlB,QAAQ,GAAK,IAAI,CAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}