{"ast":null,"code":"// The service worker registration file should be placed in your src directory\n// It works with the service-worker.js file in your public directory\n// Define the current app version - keep in sync with index.js\nconst APP_VERSION='1.0.1';// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\nconst isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nconst publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',()=>{const swUrl=`${process.env.PUBLIC_URL}/service-worker.js`;if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(()=>{console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://cra.link/PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{// Check for updates periodically\nsetInterval(()=>{registration.update();},60*60*1000);// Check every hour\nregistration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://cra.link/PWA.');// Send version info to service worker\nif(installingWorker.postMessage){installingWorker.postMessage({type:'VERSION_INFO',version:APP_VERSION});}// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};// If we have an active service worker, send it the current version\nif(registration.active){registration.active.postMessage({type:'VERSION_INFO',version:APP_VERSION});}}).catch(error=>{console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(response=>{// Ensure service worker exists, and that we really are getting a JS file.\nconst contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(()=>{console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}","map":{"version":3,"names":["APP_VERSION","isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","setInterval","update","onupdatefound","installingWorker","installing","onstatechange","state","controller","postMessage","type","version","onUpdate","onSuccess","active","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/Bonus-Bridge-App/src/index.js"],"sourcesContent":["// The service worker registration file should be placed in your src directory\r\n// It works with the service-worker.js file in your public directory\r\n\r\n// Define the current app version - keep in sync with index.js\r\nconst APP_VERSION = '1.0.1';\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      // Check for updates periodically\r\n      setInterval(() => {\r\n        registration.update();\r\n      }, 60 * 60 * 1000); // Check every hour\r\n      \r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n              \r\n              // Send version info to service worker\r\n              if (installingWorker.postMessage) {\r\n                installingWorker.postMessage({\r\n                  type: 'VERSION_INFO',\r\n                  version: APP_VERSION\r\n                });\r\n              }\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n      \r\n      // If we have an active service worker, send it the current version\r\n      if (registration.active) {\r\n        registration.active.postMessage({\r\n          type: 'VERSION_INFO',\r\n          version: APP_VERSION\r\n        });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}