{"ast":null,"code":"// TrialManager.js - Complete version with 7-digit code system and one-time use\nimport CryptoJS from'crypto-js';class TrialManager{constructor(){// TEST SETTINGS - 5 deals total, warning at 60% (3 deals)\nthis.maxDeals=5;// Initial trial deals  \nthis.warningThreshold=3;// Warning at 3 deals (60%)\n// Security settings\nthis.storageKey='bonus_bridge_trial';this.hashKey='bb_secure_2025';// Generate unique identifier for this browser\nthis.browserFingerprint=this.generateFingerprint();// Initialize the trial\nthis.initialize();}// Create a unique identifier for this browser/device\ngenerateFingerprint(){const data={userAgent:navigator.userAgent,language:navigator.language,screen:`${window.screen.width}x${window.screen.height}`,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone};return CryptoJS.SHA256(JSON.stringify(data)).toString();}// Initialize trial data on first load\ninitialize(){const existing=this.getTrialData();if(!existing){// First time user - create new trial\nconst trialData={startDate:new Date().toISOString(),fingerprint:this.browserFingerprint,dealsPlayed:0,maxDeals:this.maxDeals,gamesCompleted:0,isExpired:false,warnings:0,extensions:[]// Track all extensions applied (prevents reuse)\n};this.saveTrialData(trialData);console.log(`ðŸŽ¯ Trial initialized: ${this.maxDeals} deals available`);}else{// Existing user - check fingerprint\nif(existing.fingerprint!==this.browserFingerprint){console.warn('ðŸš« Browser fingerprint mismatch - trial reset');this.resetTrial();}// Update maxDeals from stored data (in case it was extended)\nthis.maxDeals=existing.maxDeals||this.maxDeals;}}// Validate 7-character extension code (6 letters/digits + 1 digit)  \n// Custom mapping: A=3, B=4, C=5, ..., Z=28, and 0=0, 1=1, ..., 9=9\nvalidateExtensionCode(code){if(!code||typeof code!=='string')return null;// Remove any spaces and convert to uppercase\nconst cleanCode=code.replace(/\\s/g,'').toUpperCase();if(cleanCode.length!==7)return null;// Check format: 6 letters/digits + 1 digit (1-9)\nif(!/^[A-Z0-9]{6}[1-9]$/.test(cleanCode))return null;// Extract first 6 characters and last digit\nconst firstSix=cleanCode.substring(0,6);const lastDigit=parseInt(cleanCode.substring(6,7));// Calculate sum of first 6 characters\nconst sum=firstSix.split('').reduce((acc,char)=>{if(char>='A'&&char<='Z'){// Letters: A=3, B=4, etc.\nreturn acc+(char.charCodeAt(0)-62);// A=65, so 65-62=3\n}else{// Digits: 0=0, 1=1, etc.\nreturn acc+parseInt(char);}},0);// Check if sum equals 100\nif(sum!==100)return null;// Calculate number of deals this code grants\nconst dealsGranted=lastDigit*100;return{isValid:true,dealsGranted:dealsGranted,codeUsed:cleanCode,sum:sum,multiplier:lastDigit};}// Generate a sample extension code (for testing/demonstration)\n// Using custom mapping: A=3, B=4, C=5, ..., Z=28\ngenerateSampleCode(){let dealPackage=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;// dealPackage should be 100, 200, 300, etc. up to 900\nconst multiplier=dealPackage/100;if(multiplier<1||multiplier>9||dealPackage%100!==0){throw new Error('Deal package must be 100, 200, 300, ... up to 900');}// Generate 6 random letter values that sum to 100\n// Letter values: A=3, B=4, ..., Z=28\nlet values=[];let remainingSum=100;// Generate first 5 letters (values 3-28 each)\nfor(let i=0;i<5;i++){const maxForThis=Math.min(28,remainingSum-(5-i)*3);// Ensure we can finish\nconst minForThis=Math.max(3,remainingSum-(5-i)*28);// Ensure we don't exceed\nconst value=Math.floor(Math.random()*(maxForThis-minForThis+1))+minForThis;values.push(value);remainingSum-=value;}// Last letter value is whatever makes the sum = 100\nvalues.push(remainingSum);// Shuffle the values to make them less predictable\nfor(let i=values.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[values[i],values[j]]=[values[j],values[i]];}// Convert values to letters (3=A, 4=B, etc.)\nconst letters=values.map(value=>String.fromCharCode(62+value));// Create the 7-character code\nconst code=letters.join('')+multiplier.toString();return{code:code,dealsGranted:dealPackage,sum:100,multiplier:multiplier,letterValues:values};}// Extend trial with 7-digit code (ONE-TIME USE ONLY)\nextendTrial(code){const validation=this.validateExtensionCode(code);if(!validation||!validation.isValid){return{success:false,message:'Invalid extension code. Please check the 7-digit code and try again.'};}const data=this.getTrialData();if(!data){return{success:false,message:'No trial data found'};}// CRITICAL: Check if this code has already been used (prevents reuse)\nif(data.extensions&&data.extensions.some(ext=>ext.code===validation.codeUsed)){return{success:false,message:'This extension code has already been used.'};}// Apply the extension\nconst newMaxDeals=data.maxDeals+validation.dealsGranted;const extensionRecord={code:validation.codeUsed,dealsGranted:validation.dealsGranted,appliedDate:new Date().toISOString(),previousMaxDeals:data.maxDeals,newMaxDeals:newMaxDeals};// Update trial data\ndata.maxDeals=newMaxDeals;data.isExpired=false;// Remove expiry status\ndata.warnings=0;// Reset warnings\ndata.extensions=data.extensions||[];data.extensions.push(extensionRecord);// STORE USED CODE PERMANENTLY\n// Update instance variable\nthis.maxDeals=newMaxDeals;this.saveTrialData(data);console.log(`ðŸŽ‰ Trial extended! +${validation.dealsGranted} deals (Total: ${newMaxDeals})`);console.log(`ðŸ”’ Code ${validation.codeUsed} marked as used and cannot be reused`);return{success:true,message:`Trial extended successfully! You now have ${newMaxDeals-data.dealsPlayed} deals remaining.`,dealsAdded:validation.dealsGranted,totalDeals:newMaxDeals,remainingDeals:newMaxDeals-data.dealsPlayed};}// Get trial data from storage (decrypted)\ngetTrialData(){try{const encrypted=localStorage.getItem(this.storageKey);if(!encrypted)return null;const decrypted=CryptoJS.AES.decrypt(encrypted,this.hashKey).toString(CryptoJS.enc.Utf8);return JSON.parse(decrypted);}catch(error){console.warn('Trial data corrupted, resetting...');return null;}}// Save trial data to storage (encrypted)\nsaveTrialData(data){try{const encrypted=CryptoJS.AES.encrypt(JSON.stringify(data),this.hashKey).toString();localStorage.setItem(this.storageKey,encrypted);}catch(error){console.error('Failed to save trial data:',error);}}// Check if more deals are allowed\ncanPlayDeals(){const data=this.getTrialData();if(!data)return false;return!data.isExpired&&data.dealsPlayed<data.maxDeals;}// Increment the deal counter\nincrementDeals(){const data=this.getTrialData();if(!data)return false;data.dealsPlayed++;// Check if limit reached\nif(data.dealsPlayed>=data.maxDeals){data.isExpired=true;}this.saveTrialData(data);console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${data.maxDeals} completed`);return!data.isExpired;}// Get remaining deals\ngetRemainingDeals(){const data=this.getTrialData();if(!data)return 0;return Math.max(0,data.maxDeals-data.dealsPlayed);}// Check if warning should be shown\nshouldShowWarning(){const data=this.getTrialData();if(!data)return false;// Calculate 60% threshold dynamically\nconst warningThreshold=Math.floor(data.maxDeals*0.6);// Show warning at 60% of max deals, but not if expired\nreturn data.dealsPlayed>=warningThreshold&&!data.isExpired;}// Check if trial is expired\nisExpired(){const data=this.getTrialData();return data?data.isExpired:false;}// Reset trial (for suspicious activity)\nresetTrial(){localStorage.removeItem(this.storageKey);const expiredData={startDate:new Date().toISOString(),fingerprint:this.browserFingerprint,dealsPlayed:this.maxDeals,maxDeals:this.maxDeals,isExpired:true,suspicious:true,extensions:[]// Reset extensions list\n};this.saveTrialData(expiredData);}// Get trial statistics for display\ngetStats(){const data=this.getTrialData();if(!data)return null;const startDate=new Date(data.startDate);const daysUsed=Math.floor((new Date()-startDate)/(1000*60*60*24));// Ensure extensions array exists\nconst extensions=data.extensions||[];return{dealsPlayed:data.dealsPlayed||0,maxDeals:data.maxDeals||this.maxDeals,remainingDeals:Math.max(0,(data.maxDeals||this.maxDeals)-(data.dealsPlayed||0)),gamesCompleted:data.gamesCompleted||0,daysUsed:Math.max(1,daysUsed),startDate:startDate.toLocaleDateString(),extensions:extensions,totalDealsEverGranted:extensions.reduce((sum,ext)=>sum+(ext.dealsGranted||0),data.maxDeals||this.maxDeals)};}// Generate feedback email with extension request\ngenerateFeedbackEmail(){const stats=this.getStats();if(!stats)return null;const subject='Bonus Bridge - Trial Complete - Extension Request';const body=`Dear Mike,\n\nI have completed my evaluation of the Bonus Bridge app and would like to request an extension to continue using it.\n\nTRIAL SUMMARY:\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\nâ€¢ Games Completed: ${stats.gamesCompleted}\nâ€¢ Days Used: ${stats.daysUsed}\nâ€¢ Started: ${stats.startDate}\n${stats.extensions.length>0?`â€¢ Previous Extensions: ${stats.extensions.length}`:''}\n\nMY FEEDBACK:\n[Please share your thoughts about the app here]\n\nEXTENSION REQUEST:\nI would like to purchase additional deals:\n\nPRICING TABLE:\nDeals   US$    GBÂ£    EUâ‚¬    Aus$\n100     $18    Â£14    â‚¬16    $28\n200     $34    Â£26    â‚¬30    $53\n300     $48    Â£36    â‚¬43    $75\n400     $60    Â£45    â‚¬53    $94\n500     $70    Â£53    â‚¬62    $109\n600     $78    Â£59    â‚¬69    $122\n700     $84    Â£63    â‚¬75    $131\n800     $92    Â£69    â‚¬82    $144\n900     $99    Â£74    â‚¬88    $154\n\nSelected package: _____ deals\n\nOVERALL RATING: ___/10\n\nPlease send me a 7-digit extension code for my chosen package.\n\nBest regards,\n[Your name]\n[Your email]`;return{subject:encodeURIComponent(subject),body:encodeURIComponent(body)};}// Get list of all used extension codes (for admin/debugging)\ngetUsedCodes(){const data=this.getTrialData();if(!data||!data.extensions)return[];return data.extensions.map(ext=>({code:ext.code,dealsGranted:ext.dealsGranted,appliedDate:ext.appliedDate}));}// Reset trial for testing (REMOVE IN PRODUCTION)\nresetTrialForTesting(){localStorage.removeItem(this.storageKey);this.initialize();console.log('ðŸ”„ Trial reset for testing - 5 deals available');}}export default TrialManager;","map":{"version":3,"names":["CryptoJS","TrialManager","constructor","maxDeals","warningThreshold","storageKey","hashKey","browserFingerprint","generateFingerprint","initialize","data","userAgent","navigator","language","screen","window","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","SHA256","JSON","stringify","toString","existing","getTrialData","trialData","startDate","Date","toISOString","fingerprint","dealsPlayed","gamesCompleted","isExpired","warnings","extensions","saveTrialData","console","log","warn","resetTrial","validateExtensionCode","code","cleanCode","replace","toUpperCase","length","test","firstSix","substring","lastDigit","parseInt","sum","split","reduce","acc","char","charCodeAt","dealsGranted","isValid","codeUsed","multiplier","generateSampleCode","dealPackage","arguments","undefined","Error","values","remainingSum","i","maxForThis","Math","min","minForThis","max","value","floor","random","push","j","letters","map","String","fromCharCode","join","letterValues","extendTrial","validation","success","message","some","ext","newMaxDeals","extensionRecord","appliedDate","previousMaxDeals","dealsAdded","totalDeals","remainingDeals","encrypted","localStorage","getItem","decrypted","AES","decrypt","enc","Utf8","parse","error","encrypt","setItem","canPlayDeals","incrementDeals","getRemainingDeals","shouldShowWarning","removeItem","expiredData","suspicious","getStats","daysUsed","toLocaleDateString","totalDealsEverGranted","generateFeedbackEmail","stats","subject","body","encodeURIComponent","getUsedCodes","resetTrialForTesting"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/TrialManager.js"],"sourcesContent":["// TrialManager.js - Complete version with 7-digit code system and one-time use\r\nimport CryptoJS from 'crypto-js';\r\n\r\nclass TrialManager {\r\n  constructor() {\r\n    // TEST SETTINGS - 5 deals total, warning at 60% (3 deals)\r\n    this.maxDeals = 5;         // Initial trial deals  \r\n    this.warningThreshold = 3; // Warning at 3 deals (60%)\r\n    \r\n    // Security settings\r\n    this.storageKey = 'bonus_bridge_trial';\r\n    this.hashKey = 'bb_secure_2025';\r\n    \r\n    // Generate unique identifier for this browser\r\n    this.browserFingerprint = this.generateFingerprint();\r\n    \r\n    // Initialize the trial\r\n    this.initialize();\r\n  }\r\n\r\n  // Create a unique identifier for this browser/device\r\n  generateFingerprint() {\r\n    const data = {\r\n      userAgent: navigator.userAgent,\r\n      language: navigator.language,\r\n      screen: `${window.screen.width}x${window.screen.height}`,\r\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    };\r\n    \r\n    return CryptoJS.SHA256(JSON.stringify(data)).toString();\r\n  }\r\n\r\n  // Initialize trial data on first load\r\n  initialize() {\r\n    const existing = this.getTrialData();\r\n    \r\n    if (!existing) {\r\n      // First time user - create new trial\r\n      const trialData = {\r\n        startDate: new Date().toISOString(),\r\n        fingerprint: this.browserFingerprint,\r\n        dealsPlayed: 0,\r\n        maxDeals: this.maxDeals,\r\n        gamesCompleted: 0,\r\n        isExpired: false,\r\n        warnings: 0,\r\n        extensions: [] // Track all extensions applied (prevents reuse)\r\n      };\r\n      \r\n      this.saveTrialData(trialData);\r\n      console.log(`ðŸŽ¯ Trial initialized: ${this.maxDeals} deals available`);\r\n    } else {\r\n      // Existing user - check fingerprint\r\n      if (existing.fingerprint !== this.browserFingerprint) {\r\n        console.warn('ðŸš« Browser fingerprint mismatch - trial reset');\r\n        this.resetTrial();\r\n      }\r\n      \r\n      // Update maxDeals from stored data (in case it was extended)\r\n      this.maxDeals = existing.maxDeals || this.maxDeals;\r\n    }\r\n  }\r\n\r\n  // Validate 7-character extension code (6 letters/digits + 1 digit)  \r\n  // Custom mapping: A=3, B=4, C=5, ..., Z=28, and 0=0, 1=1, ..., 9=9\r\n  validateExtensionCode(code) {\r\n    if (!code || typeof code !== 'string') return null;\r\n    \r\n    // Remove any spaces and convert to uppercase\r\n    const cleanCode = code.replace(/\\s/g, '').toUpperCase();\r\n    if (cleanCode.length !== 7) return null;\r\n    \r\n    // Check format: 6 letters/digits + 1 digit (1-9)\r\n    if (!/^[A-Z0-9]{6}[1-9]$/.test(cleanCode)) return null;\r\n    \r\n    // Extract first 6 characters and last digit\r\n    const firstSix = cleanCode.substring(0, 6);\r\n    const lastDigit = parseInt(cleanCode.substring(6, 7));\r\n    \r\n    // Calculate sum of first 6 characters\r\n    const sum = firstSix.split('').reduce((acc, char) => {\r\n      if (char >= 'A' && char <= 'Z') {\r\n        // Letters: A=3, B=4, etc.\r\n        return acc + (char.charCodeAt(0) - 62); // A=65, so 65-62=3\r\n      } else {\r\n        // Digits: 0=0, 1=1, etc.\r\n        return acc + parseInt(char);\r\n      }\r\n    }, 0);\r\n    \r\n    // Check if sum equals 100\r\n    if (sum !== 100) return null;\r\n    \r\n    // Calculate number of deals this code grants\r\n    const dealsGranted = lastDigit * 100;\r\n    \r\n    return {\r\n      isValid: true,\r\n      dealsGranted: dealsGranted,\r\n      codeUsed: cleanCode,\r\n      sum: sum,\r\n      multiplier: lastDigit\r\n    };\r\n  }\r\n\r\n  // Generate a sample extension code (for testing/demonstration)\r\n  // Using custom mapping: A=3, B=4, C=5, ..., Z=28\r\n  generateSampleCode(dealPackage = 100) {\r\n    // dealPackage should be 100, 200, 300, etc. up to 900\r\n    const multiplier = dealPackage / 100;\r\n    if (multiplier < 1 || multiplier > 9 || dealPackage % 100 !== 0) {\r\n      throw new Error('Deal package must be 100, 200, 300, ... up to 900');\r\n    }\r\n    \r\n    // Generate 6 random letter values that sum to 100\r\n    // Letter values: A=3, B=4, ..., Z=28\r\n    let values = [];\r\n    let remainingSum = 100;\r\n    \r\n    // Generate first 5 letters (values 3-28 each)\r\n    for (let i = 0; i < 5; i++) {\r\n      const maxForThis = Math.min(28, remainingSum - (5 - i) * 3); // Ensure we can finish\r\n      const minForThis = Math.max(3, remainingSum - (5 - i) * 28); // Ensure we don't exceed\r\n      const value = Math.floor(Math.random() * (maxForThis - minForThis + 1)) + minForThis;\r\n      values.push(value);\r\n      remainingSum -= value;\r\n    }\r\n    \r\n    // Last letter value is whatever makes the sum = 100\r\n    values.push(remainingSum);\r\n    \r\n    // Shuffle the values to make them less predictable\r\n    for (let i = values.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [values[i], values[j]] = [values[j], values[i]];\r\n    }\r\n    \r\n    // Convert values to letters (3=A, 4=B, etc.)\r\n    const letters = values.map(value => String.fromCharCode(62 + value));\r\n    \r\n    // Create the 7-character code\r\n    const code = letters.join('') + multiplier.toString();\r\n    \r\n    return {\r\n      code: code,\r\n      dealsGranted: dealPackage,\r\n      sum: 100,\r\n      multiplier: multiplier,\r\n      letterValues: values\r\n    };\r\n  }\r\n\r\n  // Extend trial with 7-digit code (ONE-TIME USE ONLY)\r\n  extendTrial(code) {\r\n    const validation = this.validateExtensionCode(code);\r\n    \r\n    if (!validation || !validation.isValid) {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid extension code. Please check the 7-digit code and try again.' \r\n      };\r\n    }\r\n    \r\n    const data = this.getTrialData();\r\n    if (!data) {\r\n      return { success: false, message: 'No trial data found' };\r\n    }\r\n    \r\n    // CRITICAL: Check if this code has already been used (prevents reuse)\r\n    if (data.extensions && data.extensions.some(ext => ext.code === validation.codeUsed)) {\r\n      return { \r\n        success: false, \r\n        message: 'This extension code has already been used.' \r\n      };\r\n    }\r\n    \r\n    // Apply the extension\r\n    const newMaxDeals = data.maxDeals + validation.dealsGranted;\r\n    const extensionRecord = {\r\n      code: validation.codeUsed,\r\n      dealsGranted: validation.dealsGranted,\r\n      appliedDate: new Date().toISOString(),\r\n      previousMaxDeals: data.maxDeals,\r\n      newMaxDeals: newMaxDeals\r\n    };\r\n    \r\n    // Update trial data\r\n    data.maxDeals = newMaxDeals;\r\n    data.isExpired = false; // Remove expiry status\r\n    data.warnings = 0; // Reset warnings\r\n    data.extensions = data.extensions || [];\r\n    data.extensions.push(extensionRecord); // STORE USED CODE PERMANENTLY\r\n    \r\n    // Update instance variable\r\n    this.maxDeals = newMaxDeals;\r\n    \r\n    this.saveTrialData(data);\r\n    \r\n    console.log(`ðŸŽ‰ Trial extended! +${validation.dealsGranted} deals (Total: ${newMaxDeals})`);\r\n    console.log(`ðŸ”’ Code ${validation.codeUsed} marked as used and cannot be reused`);\r\n    \r\n    return { \r\n      success: true, \r\n      message: `Trial extended successfully! You now have ${newMaxDeals - data.dealsPlayed} deals remaining.`,\r\n      dealsAdded: validation.dealsGranted,\r\n      totalDeals: newMaxDeals,\r\n      remainingDeals: newMaxDeals - data.dealsPlayed\r\n    };\r\n  }\r\n\r\n  // Get trial data from storage (decrypted)\r\n  getTrialData() {\r\n    try {\r\n      const encrypted = localStorage.getItem(this.storageKey);\r\n      if (!encrypted) return null;\r\n      \r\n      const decrypted = CryptoJS.AES.decrypt(encrypted, this.hashKey).toString(CryptoJS.enc.Utf8);\r\n      return JSON.parse(decrypted);\r\n    } catch (error) {\r\n      console.warn('Trial data corrupted, resetting...');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Save trial data to storage (encrypted)\r\n  saveTrialData(data) {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.hashKey).toString();\r\n      localStorage.setItem(this.storageKey, encrypted);\r\n    } catch (error) {\r\n      console.error('Failed to save trial data:', error);\r\n    }\r\n  }\r\n\r\n  // Check if more deals are allowed\r\n  canPlayDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n    \r\n    return !data.isExpired && data.dealsPlayed < data.maxDeals;\r\n  }\r\n\r\n  // Increment the deal counter\r\n  incrementDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n\r\n    data.dealsPlayed++;\r\n    \r\n    // Check if limit reached\r\n    if (data.dealsPlayed >= data.maxDeals) {\r\n      data.isExpired = true;\r\n    }\r\n    \r\n    this.saveTrialData(data);\r\n    \r\n    console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${data.maxDeals} completed`);\r\n    return !data.isExpired;\r\n  }\r\n\r\n  // Get remaining deals\r\n  getRemainingDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return 0;\r\n    \r\n    return Math.max(0, data.maxDeals - data.dealsPlayed);\r\n  }\r\n\r\n  // Check if warning should be shown\r\nshouldShowWarning() {\r\n  const data = this.getTrialData();\r\n  if (!data) return false;\r\n  \r\n  // Calculate 60% threshold dynamically\r\n  const warningThreshold = Math.floor(data.maxDeals * 0.6);\r\n  \r\n  // Show warning at 60% of max deals, but not if expired\r\n  return data.dealsPlayed >= warningThreshold && !data.isExpired;\r\n}\r\n\r\n  // Check if trial is expired\r\n  isExpired() {\r\n    const data = this.getTrialData();\r\n    return data ? data.isExpired : false;\r\n  }\r\n\r\n  // Reset trial (for suspicious activity)\r\n  resetTrial() {\r\n    localStorage.removeItem(this.storageKey);\r\n    \r\n    const expiredData = {\r\n      startDate: new Date().toISOString(),\r\n      fingerprint: this.browserFingerprint,\r\n      dealsPlayed: this.maxDeals,\r\n      maxDeals: this.maxDeals,\r\n      isExpired: true,\r\n      suspicious: true,\r\n      extensions: [] // Reset extensions list\r\n    };\r\n    \r\n    this.saveTrialData(expiredData);\r\n  }\r\n\r\n  // Get trial statistics for display\r\n  getStats() {\r\n    const data = this.getTrialData();\r\n    if (!data) return null;\r\n    \r\n    const startDate = new Date(data.startDate);\r\n    const daysUsed = Math.floor((new Date() - startDate) / (1000 * 60 * 60 * 24));\r\n    \r\n    // Ensure extensions array exists\r\n    const extensions = data.extensions || [];\r\n    \r\n    return {\r\n      dealsPlayed: data.dealsPlayed || 0,\r\n      maxDeals: data.maxDeals || this.maxDeals,\r\n      remainingDeals: Math.max(0, (data.maxDeals || this.maxDeals) - (data.dealsPlayed || 0)),\r\n      gamesCompleted: data.gamesCompleted || 0,\r\n      daysUsed: Math.max(1, daysUsed),\r\n      startDate: startDate.toLocaleDateString(),\r\n      extensions: extensions,\r\n      totalDealsEverGranted: extensions.reduce((sum, ext) => sum + (ext.dealsGranted || 0), data.maxDeals || this.maxDeals)\r\n    };\r\n  }\r\n\r\n  // Generate feedback email with extension request\r\n  generateFeedbackEmail() {\r\n    const stats = this.getStats();\r\n    if (!stats) return null;\r\n    \r\n    const subject = 'Bonus Bridge - Trial Complete - Extension Request';\r\n    const body = `Dear Mike,\r\n\r\nI have completed my evaluation of the Bonus Bridge app and would like to request an extension to continue using it.\r\n\r\nTRIAL SUMMARY:\r\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\r\nâ€¢ Games Completed: ${stats.gamesCompleted}\r\nâ€¢ Days Used: ${stats.daysUsed}\r\nâ€¢ Started: ${stats.startDate}\r\n${stats.extensions.length > 0 ? `â€¢ Previous Extensions: ${stats.extensions.length}` : ''}\r\n\r\nMY FEEDBACK:\r\n[Please share your thoughts about the app here]\r\n\r\nEXTENSION REQUEST:\r\nI would like to purchase additional deals:\r\n\r\nPRICING TABLE:\r\nDeals   US$    GBÂ£    EUâ‚¬    Aus$\r\n100     $18    Â£14    â‚¬16    $28\r\n200     $34    Â£26    â‚¬30    $53\r\n300     $48    Â£36    â‚¬43    $75\r\n400     $60    Â£45    â‚¬53    $94\r\n500     $70    Â£53    â‚¬62    $109\r\n600     $78    Â£59    â‚¬69    $122\r\n700     $84    Â£63    â‚¬75    $131\r\n800     $92    Â£69    â‚¬82    $144\r\n900     $99    Â£74    â‚¬88    $154\r\n\r\nSelected package: _____ deals\r\n\r\nOVERALL RATING: ___/10\r\n\r\nPlease send me a 7-digit extension code for my chosen package.\r\n\r\nBest regards,\r\n[Your name]\r\n[Your email]`;\r\n\r\n    return {\r\n      subject: encodeURIComponent(subject),\r\n      body: encodeURIComponent(body)\r\n    };\r\n  }\r\n\r\n  // Get list of all used extension codes (for admin/debugging)\r\n  getUsedCodes() {\r\n    const data = this.getTrialData();\r\n    if (!data || !data.extensions) return [];\r\n    \r\n    return data.extensions.map(ext => ({\r\n      code: ext.code,\r\n      dealsGranted: ext.dealsGranted,\r\n      appliedDate: ext.appliedDate\r\n    }));\r\n  }\r\n\r\n  // Reset trial for testing (REMOVE IN PRODUCTION)\r\n  resetTrialForTesting() {\r\n    localStorage.removeItem(this.storageKey);\r\n    this.initialize();\r\n    console.log('ðŸ”„ Trial reset for testing - 5 deals available');\r\n  }\r\n}\r\n\r\nexport default TrialManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}