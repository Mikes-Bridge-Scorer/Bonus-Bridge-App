{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport BridgeGameUI from './BridgeGameUI';\nimport ScoreAdjustment from './components/ScoreAdjustment';\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\nimport ScoreProcessor from './components/ScoreProcessor';\nimport GameSummary from './components/GameSummary';\nimport { determineVulnerability, parseContract, calculateBridgeScore } from './utils/scoring';\nimport './global.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to track current view (main game, score adjustment, or final analysis)\n  const [currentView, setCurrentView] = useState('game');\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    gameNumber: 1,\n    dealNumber: 1,\n    deals: [],\n    scores: {\n      nsPoints: 0,\n      ewPoints: 0,\n      nsTotal: 0,\n      ewTotal: 0\n    },\n    currentDeal: {\n      dealNumber: 1,\n      vulnerable: determineVulnerability(1),\n      contract: '',\n      result: null,\n      tricks: null,\n      nsPoints: 0,\n      ewPoints: 0,\n      rawScore: 0,\n      bonusScoringEnabled: true,\n      handAnalysis: null\n    },\n    showScorePopup: false,\n    isAwake: false,\n    gameEnded: false\n  });\n\n  // Function to handle score calculation from ScoreProcessor\n  const handleScoreCalculated = scoreResult => {\n    const {\n      nsPoints,\n      ewPoints,\n      rawScore\n    } = scoreResult;\n    console.log('App received score calculation:', scoreResult);\n\n    // Update the current deal with the calculated scores\n    setGameState(prevState => {\n      // Check if scores have changed\n      if (prevState.currentDeal.nsPoints === nsPoints && prevState.currentDeal.ewPoints === ewPoints) {\n        return prevState; // No change needed\n      }\n      const updatedCurrentDeal = {\n        ...prevState.currentDeal,\n        nsPoints,\n        ewPoints,\n        rawScore: rawScore || Math.max(Math.abs(nsPoints), Math.abs(ewPoints))\n      };\n\n      // Calculate which team gets the raw score based on which has positive points\n      const nsScores = nsPoints > 0;\n      const ewScores = ewPoints > 0;\n\n      // FIX: Explicitly calculate the new running totals \n      // Only add raw score to the running total of the team that scored\n      const calculatedNsTotal = nsScores ? (prevState.scores.nsTotal || 0) + rawScore : prevState.scores.nsTotal || 0;\n      const calculatedEwTotal = ewScores ? (prevState.scores.ewTotal || 0) + rawScore : prevState.scores.ewTotal || 0;\n\n      // Log the calculation details\n      console.log('Running total calculation:', {\n        previousNsTotal: prevState.scores.nsTotal || 0,\n        previousEwTotal: prevState.scores.ewTotal || 0,\n        nsScores,\n        ewScores,\n        rawScore,\n        newNsTotal: calculatedNsTotal,\n        newEwTotal: calculatedEwTotal\n      });\n\n      // Updated scores with correct running totals\n      const updatedScores = {\n        nsPoints,\n        ewPoints,\n        nsTotal: calculatedNsTotal,\n        ewTotal: calculatedEwTotal\n      };\n      console.log('Updating score state:', {\n        currentDeal: updatedCurrentDeal,\n        scores: updatedScores\n      });\n      return {\n        ...prevState,\n        currentDeal: updatedCurrentDeal,\n        scores: updatedScores\n      };\n    });\n  };\n\n  // Function to update current deal\n  const updateCurrentDeal = useCallback(dealUpdates => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        ...dealUpdates\n      }\n    }));\n  }, []);\n\n  // Function to handle adjustment input\n  const handleSaveAdjustment = adjustmentData => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentDeal: {\n        ...prevState.currentDeal,\n        handAnalysis: adjustmentData,\n        bonusScoringEnabled: true\n      }\n    }));\n    setCurrentView('analysis');\n  };\n\n  // Function to handle score analysis saving - UPDATED\n  const handleSaveAnalysis = scoreResult => {\n    console.log('Handling save analysis with result:', scoreResult);\n\n    // Extract the complete deal with bonus scores\n    const currentDealWithBonusScores = scoreResult.currentDealWithBonusScores || {\n      ...gameState.currentDeal,\n      dealNumber: gameState.dealNumber,\n      nsPoints: scoreResult.nsPoints || 0,\n      ewPoints: scoreResult.ewPoints || 0\n    };\n\n    // Use provided updated scores or calculate them\n    const updatedScores = scoreResult.updatedScores || {\n      nsPoints: scoreResult.nsPoints || 0,\n      ewPoints: scoreResult.ewPoints || 0,\n      nsTotal: 0,\n      ewTotal: 0\n    };\n\n    // Calculate raw score if not provided\n    const rawScore = Math.max(Math.abs(scoreResult.nsPoints || 0), Math.abs(scoreResult.ewPoints || 0));\n\n    // Calculate running totals using raw scores if not provided in updatedScores\n    const nsScores = scoreResult.nsPoints > 0;\n    const ewScores = scoreResult.ewPoints > 0;\n    if (!updatedScores.nsTotal || !updatedScores.ewTotal) {\n      console.log('Calculating new running totals in handleSaveAnalysis');\n      const nsRawTotal = nsScores ? (gameState.scores.nsTotal || 0) + rawScore : gameState.scores.nsTotal || 0;\n      const ewRawTotal = ewScores ? (gameState.scores.ewTotal || 0) + rawScore : gameState.scores.ewTotal || 0;\n      updatedScores.nsTotal = nsRawTotal;\n      updatedScores.ewTotal = ewRawTotal;\n    }\n    console.log('Final updated scores:', updatedScores);\n\n    // Update game state with new deal\n    setGameState(prevState => {\n      return {\n        ...prevState,\n        dealNumber: prevState.dealNumber + 1,\n        deals: [...prevState.deals, currentDealWithBonusScores],\n        scores: {\n          nsPoints: updatedScores.nsPoints || 0,\n          ewPoints: updatedScores.ewPoints || 0,\n          nsTotal: updatedScores.nsTotal || 0,\n          ewTotal: updatedScores.ewTotal || 0\n        },\n        currentDeal: {\n          dealNumber: prevState.dealNumber + 1,\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        }\n      };\n    });\n\n    // Return to the game view\n    setCurrentView('game');\n  };\n\n  // Function to handle next deal without adjustments\n  const handleNextDeal = (currentDealWithScores = null, updatedScores = null) => {\n    // Use provided scores or current state\n    const dealToSave = currentDealWithScores || gameState.currentDeal;\n    const scoresToUse = updatedScores || gameState.scores;\n\n    // Ensure the deal has scores\n    if (!dealToSave.nsPoints && !dealToSave.ewPoints && dealToSave.contract) {\n      // Calculate if needed\n      const contractDetails = parseContract(dealToSave.contract, dealToSave.result, dealToSave.vulnerable);\n      if (contractDetails) {\n        const standardScore = calculateBridgeScore(contractDetails);\n\n        // Calculate raw score\n        const rawScore = Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0));\n\n        // Update scores\n        dealToSave.nsPoints = standardScore.nsPoints || 0;\n        dealToSave.ewPoints = standardScore.ewPoints || 0;\n        dealToSave.rawScore = rawScore;\n\n        // Determine which team scores positive points\n        const nsScores = standardScore.nsPoints > 0;\n        const ewScores = standardScore.ewPoints > 0;\n\n        // FIX: Calculate running totals explicitly\n        const calculatedNsTotal = nsScores ? (scoresToUse.nsTotal || 0) + rawScore : scoresToUse.nsTotal || 0;\n        const calculatedEwTotal = ewScores ? (scoresToUse.ewTotal || 0) + rawScore : scoresToUse.ewTotal || 0;\n        console.log('Next deal score calculation:', {\n          nsScores,\n          ewScores,\n          rawScore,\n          previousNsTotal: scoresToUse.nsTotal || 0,\n          previousEwTotal: scoresToUse.ewTotal || 0,\n          newNsTotal: calculatedNsTotal,\n          newEwTotal: calculatedEwTotal\n        });\n\n        // Update game state with new deal\n        setGameState(prevState => {\n          return {\n            ...prevState,\n            dealNumber: prevState.dealNumber + 1,\n            deals: [...prevState.deals, dealToSave],\n            scores: {\n              nsPoints: dealToSave.nsPoints,\n              ewPoints: dealToSave.ewPoints,\n              nsTotal: calculatedNsTotal,\n              ewTotal: calculatedEwTotal\n            },\n            currentDeal: {\n              dealNumber: prevState.dealNumber + 1,\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\n              contract: '',\n              result: null,\n              tricks: null,\n              nsPoints: 0,\n              ewPoints: 0,\n              rawScore: 0,\n              bonusScoringEnabled: true,\n              handAnalysis: null\n            }\n          };\n        });\n      }\n    } else {\n      // Already has scores, just save and proceed\n      // FIX: Calculate running totals explicitly\n      const rawScore = dealToSave.rawScore || Math.max(Math.abs(dealToSave.nsPoints || 0), Math.abs(dealToSave.ewPoints || 0));\n      const nsScores = dealToSave.nsPoints > 0;\n      const ewScores = dealToSave.ewPoints > 0;\n      const calculatedNsTotal = nsScores ? (scoresToUse.nsTotal || 0) + rawScore : scoresToUse.nsTotal || 0;\n      const calculatedEwTotal = ewScores ? (scoresToUse.ewTotal || 0) + rawScore : scoresToUse.ewTotal || 0;\n      console.log('Next deal with existing scores:', {\n        nsScores,\n        ewScores,\n        rawScore,\n        previousNsTotal: scoresToUse.nsTotal || 0,\n        previousEwTotal: scoresToUse.ewTotal || 0,\n        newNsTotal: calculatedNsTotal,\n        newEwTotal: calculatedEwTotal\n      });\n\n      // Update game state with new deal\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          dealNumber: prevState.dealNumber + 1,\n          deals: [...prevState.deals, dealToSave],\n          scores: {\n            nsPoints: dealToSave.nsPoints,\n            ewPoints: dealToSave.ewPoints,\n            nsTotal: calculatedNsTotal,\n            ewTotal: calculatedEwTotal\n          },\n          currentDeal: {\n            dealNumber: prevState.dealNumber + 1,\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\n            contract: '',\n            result: null,\n            tricks: null,\n            nsPoints: 0,\n            ewPoints: 0,\n            rawScore: 0,\n            bonusScoringEnabled: true,\n            handAnalysis: null\n          }\n        };\n      });\n    }\n  };\n\n  // Function to start a new game\n  const handleNewGame = () => {\n    // Check if we're ending the current game or starting fresh\n    if (gameState.deals.length > 0) {\n      // Mark game as ended to show summary\n      setGameState(prevState => ({\n        ...prevState,\n        gameEnded: true\n      }));\n    } else {\n      // Reset the game state for a fresh start\n      setGameState({\n        gameNumber: gameState.gameNumber + 1,\n        dealNumber: 1,\n        deals: [],\n        scores: {\n          nsPoints: 0,\n          ewPoints: 0,\n          nsTotal: 0,\n          ewTotal: 0\n        },\n        currentDeal: {\n          dealNumber: 1,\n          vulnerable: determineVulnerability(1),\n          contract: '',\n          result: null,\n          tricks: null,\n          nsPoints: 0,\n          ewPoints: 0,\n          rawScore: 0,\n          bonusScoringEnabled: true,\n          handAnalysis: null\n        },\n        showScorePopup: false,\n        isAwake: gameState.isAwake,\n        gameEnded: false\n      });\n    }\n  };\n\n  // Function to return to the game after viewing summary\n  const handleReturnToGame = () => {\n    // Reset the game state for a fresh start\n    setGameState({\n      gameNumber: gameState.gameNumber + 1,\n      dealNumber: 1,\n      deals: [],\n      scores: {\n        nsPoints: 0,\n        ewPoints: 0,\n        nsTotal: 0,\n        ewTotal: 0\n      },\n      currentDeal: {\n        dealNumber: 1,\n        vulnerable: determineVulnerability(1),\n        contract: '',\n        result: null,\n        tricks: null,\n        nsPoints: 0,\n        ewPoints: 0,\n        rawScore: 0,\n        bonusScoringEnabled: true,\n        handAnalysis: null\n      },\n      showScorePopup: false,\n      isAwake: gameState.isAwake,\n      gameEnded: false\n    });\n  };\n\n  // Function to handle choosing Bonus Bridge scoring\n  const handleChooseBonusBridge = () => {\n    setCurrentView('adjustment');\n  };\n\n  // Function to handle choosing Party Bridge scoring (standard)\n  const handleChoosePartyBridge = () => {\n    // Calculate standard bridge score\n    const contractDetails = parseContract(gameState.currentDeal.contract, gameState.currentDeal.result, gameState.currentDeal.vulnerable);\n    if (contractDetails) {\n      const standardScore = calculateBridgeScore(contractDetails);\n\n      // Calculate raw score\n      const rawScore = Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0));\n\n      // Update current deal with standard scores\n      const currentDealWithScores = {\n        ...gameState.currentDeal,\n        nsPoints: standardScore.nsPoints || 0,\n        ewPoints: standardScore.ewPoints || 0,\n        rawScore,\n        bonusScoringEnabled: false\n      };\n\n      // Calculate running totals using raw scores\n      const nsScores = standardScore.nsPoints > 0;\n      const ewScores = standardScore.ewPoints > 0;\n      const nsRawTotal = nsScores ? (gameState.scores.nsTotal || 0) + rawScore : gameState.scores.nsTotal || 0;\n      const ewRawTotal = ewScores ? (gameState.scores.ewTotal || 0) + rawScore : gameState.scores.ewTotal || 0;\n\n      // For immediate feedback of the current score\n      const updatedScores = {\n        nsPoints: standardScore.nsPoints || 0,\n        ewPoints: standardScore.ewPoints || 0,\n        nsTotal: nsRawTotal,\n        ewTotal: ewRawTotal\n      };\n\n      // Update game state with scores\n      setGameState(prevState => {\n        return {\n          ...prevState,\n          currentDeal: currentDealWithScores,\n          scores: updatedScores\n        };\n      });\n\n      // Then proceed to next deal after a short delay to ensure UI updates\n      setTimeout(() => {\n        handleNextDeal(currentDealWithScores, updatedScores);\n      }, 100);\n    }\n  };\n\n  // Determine which view to show - UPDATED\n  const renderCurrentView = () => {\n    if (gameState.gameEnded) {\n      return /*#__PURE__*/_jsxDEV(GameSummary, {\n        gameState: gameState,\n        onNewGame: handleReturnToGame,\n        onGoToHome: handleReturnToGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this);\n    }\n    switch (currentView) {\n      case 'adjustment':\n        return /*#__PURE__*/_jsxDEV(ScoreAdjustment, {\n          currentDeal: gameState.currentDeal,\n          onSaveAdjustment: handleSaveAdjustment,\n          onCancel: () => setCurrentView('game')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this);\n      case 'analysis':\n        return /*#__PURE__*/_jsxDEV(FinalScoreAnalysis, {\n          analysisData: gameState.currentDeal.handAnalysis,\n          currentDeal: gameState.currentDeal,\n          onSave: handleSaveAnalysis,\n          onEdit: () => setCurrentView('adjustment'),\n          setGameState: setGameState,\n          scores: gameState.scores\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this);\n      case 'game':\n      default:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ScoreProcessor, {\n            currentDeal: gameState.currentDeal,\n            onScoreCalculated: handleScoreCalculated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BridgeGameUI, {\n            gameState: gameState,\n            updateCurrentDeal: updateCurrentDeal,\n            onNextDeal: handleNextDeal,\n            onNewGame: handleNewGame,\n            setGameState: setGameState,\n            onChooseBonusBridge: handleChooseBonusBridge,\n            onChoosePartyBridge: handleChoosePartyBridge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: renderCurrentView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 547,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mflmLveK6irWYXlC+pXL5fhQSf4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BridgeGameUI","ScoreAdjustment","FinalScoreAnalysis","ScoreProcessor","GameSummary","determineVulnerability","parseContract","calculateBridgeScore","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentView","setCurrentView","gameState","setGameState","gameNumber","dealNumber","deals","scores","nsPoints","ewPoints","nsTotal","ewTotal","currentDeal","vulnerable","contract","result","tricks","rawScore","bonusScoringEnabled","handAnalysis","showScorePopup","isAwake","gameEnded","handleScoreCalculated","scoreResult","console","log","prevState","updatedCurrentDeal","Math","max","abs","nsScores","ewScores","calculatedNsTotal","calculatedEwTotal","previousNsTotal","previousEwTotal","newNsTotal","newEwTotal","updatedScores","updateCurrentDeal","dealUpdates","handleSaveAdjustment","adjustmentData","handleSaveAnalysis","currentDealWithBonusScores","nsRawTotal","ewRawTotal","handleNextDeal","currentDealWithScores","dealToSave","scoresToUse","contractDetails","standardScore","handleNewGame","length","handleReturnToGame","handleChooseBonusBridge","handleChoosePartyBridge","setTimeout","renderCurrentView","onNewGame","onGoToHome","fileName","_jsxFileName","lineNumber","columnNumber","onSaveAdjustment","onCancel","analysisData","onSave","onEdit","children","onScoreCalculated","onNextDeal","onChooseBonusBridge","onChoosePartyBridge","className","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport ScoreAdjustment from './components/ScoreAdjustment';\r\nimport FinalScoreAnalysis from './components/FinalScoreAnalysis';\r\nimport ScoreProcessor from './components/ScoreProcessor';\r\nimport GameSummary from './components/GameSummary';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract,\r\n  calculateBridgeScore\r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  // State to track current view (main game, score adjustment, or final analysis)\r\n  const [currentView, setCurrentView] = useState('game');\r\n  \r\n  // Game state\r\n  const [gameState, setGameState] = useState({\r\n    gameNumber: 1,\r\n    dealNumber: 1,\r\n    deals: [],\r\n    scores: {\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      nsTotal: 0,\r\n      ewTotal: 0\r\n    },\r\n    currentDeal: {\r\n      dealNumber: 1,\r\n      vulnerable: determineVulnerability(1),\r\n      contract: '',\r\n      result: null,\r\n      tricks: null,\r\n      nsPoints: 0,\r\n      ewPoints: 0,\r\n      rawScore: 0,\r\n      bonusScoringEnabled: true,\r\n      handAnalysis: null\r\n    },\r\n    showScorePopup: false,\r\n    isAwake: false,\r\n    gameEnded: false\r\n  });\r\n  \r\n  // Function to handle score calculation from ScoreProcessor\r\n  const handleScoreCalculated = (scoreResult) => {\r\n    const { nsPoints, ewPoints, rawScore } = scoreResult;\r\n    \r\n    console.log('App received score calculation:', scoreResult);\r\n    \r\n    // Update the current deal with the calculated scores\r\n    setGameState(prevState => {\r\n      // Check if scores have changed\r\n      if (prevState.currentDeal.nsPoints === nsPoints && \r\n          prevState.currentDeal.ewPoints === ewPoints) {\r\n        return prevState; // No change needed\r\n      }\r\n      \r\n      const updatedCurrentDeal = {\r\n        ...prevState.currentDeal,\r\n        nsPoints,\r\n        ewPoints,\r\n        rawScore: rawScore || Math.max(Math.abs(nsPoints), Math.abs(ewPoints))\r\n      };\r\n      \r\n      // Calculate which team gets the raw score based on which has positive points\r\n      const nsScores = nsPoints > 0;\r\n      const ewScores = ewPoints > 0;\r\n      \r\n      // FIX: Explicitly calculate the new running totals \r\n      // Only add raw score to the running total of the team that scored\r\n      const calculatedNsTotal = nsScores ? \r\n        (prevState.scores.nsTotal || 0) + rawScore : \r\n        (prevState.scores.nsTotal || 0);\r\n        \r\n      const calculatedEwTotal = ewScores ? \r\n        (prevState.scores.ewTotal || 0) + rawScore : \r\n        (prevState.scores.ewTotal || 0);\r\n      \r\n      // Log the calculation details\r\n      console.log('Running total calculation:', {\r\n        previousNsTotal: prevState.scores.nsTotal || 0,\r\n        previousEwTotal: prevState.scores.ewTotal || 0,\r\n        nsScores,\r\n        ewScores,\r\n        rawScore,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n      \r\n      // Updated scores with correct running totals\r\n      const updatedScores = {\r\n        nsPoints,\r\n        ewPoints,\r\n        nsTotal: calculatedNsTotal,\r\n        ewTotal: calculatedEwTotal\r\n      };\r\n      \r\n      console.log('Updating score state:', {\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      });\r\n      \r\n      return {\r\n        ...prevState,\r\n        currentDeal: updatedCurrentDeal,\r\n        scores: updatedScores\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Function to update current deal\r\n  const updateCurrentDeal = useCallback((dealUpdates) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        ...dealUpdates\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  // Function to handle adjustment input\r\n  const handleSaveAdjustment = (adjustmentData) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      currentDeal: {\r\n        ...prevState.currentDeal,\r\n        handAnalysis: adjustmentData,\r\n        bonusScoringEnabled: true\r\n      }\r\n    }));\r\n    \r\n    setCurrentView('analysis');\r\n  };\r\n  \r\n  // Function to handle score analysis saving - UPDATED\r\n  const handleSaveAnalysis = (scoreResult) => {\r\n    console.log('Handling save analysis with result:', scoreResult);\r\n    \r\n    // Extract the complete deal with bonus scores\r\n    const currentDealWithBonusScores = scoreResult.currentDealWithBonusScores || {\r\n      ...gameState.currentDeal,\r\n      dealNumber: gameState.dealNumber,\r\n      nsPoints: scoreResult.nsPoints || 0,\r\n      ewPoints: scoreResult.ewPoints || 0\r\n    };\r\n    \r\n    // Use provided updated scores or calculate them\r\n    const updatedScores = scoreResult.updatedScores || {\r\n      nsPoints: scoreResult.nsPoints || 0,\r\n      ewPoints: scoreResult.ewPoints || 0,\r\n      nsTotal: 0,\r\n      ewTotal: 0\r\n    };\r\n    \r\n    // Calculate raw score if not provided\r\n    const rawScore = Math.max(\r\n      Math.abs(scoreResult.nsPoints || 0),\r\n      Math.abs(scoreResult.ewPoints || 0)\r\n    );\r\n    \r\n    // Calculate running totals using raw scores if not provided in updatedScores\r\n    const nsScores = scoreResult.nsPoints > 0;\r\n    const ewScores = scoreResult.ewPoints > 0;\r\n    \r\n    if (!updatedScores.nsTotal || !updatedScores.ewTotal) {\r\n      console.log('Calculating new running totals in handleSaveAnalysis');\r\n      \r\n      const nsRawTotal = nsScores ? \r\n        (gameState.scores.nsTotal || 0) + rawScore : \r\n        (gameState.scores.nsTotal || 0);\r\n      \r\n      const ewRawTotal = ewScores ? \r\n        (gameState.scores.ewTotal || 0) + rawScore : \r\n        (gameState.scores.ewTotal || 0);\r\n      \r\n      updatedScores.nsTotal = nsRawTotal;\r\n      updatedScores.ewTotal = ewRawTotal;\r\n    }\r\n    \r\n    console.log('Final updated scores:', updatedScores);\r\n    \r\n    // Update game state with new deal\r\n    setGameState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        dealNumber: prevState.dealNumber + 1,\r\n        deals: [...prevState.deals, currentDealWithBonusScores],\r\n        scores: {\r\n          nsPoints: updatedScores.nsPoints || 0,\r\n          ewPoints: updatedScores.ewPoints || 0,\r\n          nsTotal: updatedScores.nsTotal || 0,\r\n          ewTotal: updatedScores.ewTotal || 0\r\n        },\r\n        currentDeal: {\r\n          dealNumber: prevState.dealNumber + 1,\r\n          vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        }\r\n      };\r\n    });\r\n    \r\n    // Return to the game view\r\n    setCurrentView('game');\r\n  };\r\n  \r\n  // Function to handle next deal without adjustments\r\n  const handleNextDeal = (currentDealWithScores = null, updatedScores = null) => {\r\n    // Use provided scores or current state\r\n    const dealToSave = currentDealWithScores || gameState.currentDeal;\r\n    const scoresToUse = updatedScores || gameState.scores;\r\n    \r\n    // Ensure the deal has scores\r\n    if (!dealToSave.nsPoints && !dealToSave.ewPoints && dealToSave.contract) {\r\n      // Calculate if needed\r\n      const contractDetails = parseContract(\r\n        dealToSave.contract, \r\n        dealToSave.result, \r\n        dealToSave.vulnerable\r\n      );\r\n      \r\n      if (contractDetails) {\r\n        const standardScore = calculateBridgeScore(contractDetails);\r\n        \r\n        // Calculate raw score\r\n        const rawScore = Math.max(\r\n          Math.abs(standardScore.nsPoints || 0), \r\n          Math.abs(standardScore.ewPoints || 0)\r\n        );\r\n        \r\n        // Update scores\r\n        dealToSave.nsPoints = standardScore.nsPoints || 0;\r\n        dealToSave.ewPoints = standardScore.ewPoints || 0;\r\n        dealToSave.rawScore = rawScore;\r\n        \r\n        // Determine which team scores positive points\r\n        const nsScores = standardScore.nsPoints > 0;\r\n        const ewScores = standardScore.ewPoints > 0;\r\n        \r\n        // FIX: Calculate running totals explicitly\r\n        const calculatedNsTotal = nsScores ? \r\n          (scoresToUse.nsTotal || 0) + rawScore : \r\n          (scoresToUse.nsTotal || 0);\r\n        \r\n        const calculatedEwTotal = ewScores ? \r\n          (scoresToUse.ewTotal || 0) + rawScore : \r\n          (scoresToUse.ewTotal || 0);\r\n        \r\n        console.log('Next deal score calculation:', {\r\n          nsScores, \r\n          ewScores, \r\n          rawScore, \r\n          previousNsTotal: scoresToUse.nsTotal || 0,\r\n          previousEwTotal: scoresToUse.ewTotal || 0,\r\n          newNsTotal: calculatedNsTotal,\r\n          newEwTotal: calculatedEwTotal\r\n        });\r\n        \r\n        // Update game state with new deal\r\n        setGameState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            dealNumber: prevState.dealNumber + 1,\r\n            deals: [...prevState.deals, dealToSave],\r\n            scores: {\r\n              nsPoints: dealToSave.nsPoints,\r\n              ewPoints: dealToSave.ewPoints,\r\n              nsTotal: calculatedNsTotal,\r\n              ewTotal: calculatedEwTotal\r\n            },\r\n            currentDeal: {\r\n              dealNumber: prevState.dealNumber + 1,\r\n              vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n              contract: '',\r\n              result: null,\r\n              tricks: null,\r\n              nsPoints: 0,\r\n              ewPoints: 0,\r\n              rawScore: 0,\r\n              bonusScoringEnabled: true,\r\n              handAnalysis: null\r\n            }\r\n          };\r\n        });\r\n      }\r\n    } else {\r\n      // Already has scores, just save and proceed\r\n      // FIX: Calculate running totals explicitly\r\n      const rawScore = dealToSave.rawScore || Math.max(\r\n        Math.abs(dealToSave.nsPoints || 0), \r\n        Math.abs(dealToSave.ewPoints || 0)\r\n      );\r\n      \r\n      const nsScores = dealToSave.nsPoints > 0;\r\n      const ewScores = dealToSave.ewPoints > 0;\r\n      \r\n      const calculatedNsTotal = nsScores ? \r\n        (scoresToUse.nsTotal || 0) + rawScore : \r\n        (scoresToUse.nsTotal || 0);\r\n      \r\n      const calculatedEwTotal = ewScores ? \r\n        (scoresToUse.ewTotal || 0) + rawScore : \r\n        (scoresToUse.ewTotal || 0);\r\n      \r\n      console.log('Next deal with existing scores:', {\r\n        nsScores, \r\n        ewScores, \r\n        rawScore, \r\n        previousNsTotal: scoresToUse.nsTotal || 0,\r\n        previousEwTotal: scoresToUse.ewTotal || 0,\r\n        newNsTotal: calculatedNsTotal,\r\n        newEwTotal: calculatedEwTotal\r\n      });\r\n      \r\n      // Update game state with new deal\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          dealNumber: prevState.dealNumber + 1,\r\n          deals: [...prevState.deals, dealToSave],\r\n          scores: {\r\n            nsPoints: dealToSave.nsPoints,\r\n            ewPoints: dealToSave.ewPoints,\r\n            nsTotal: calculatedNsTotal,\r\n            ewTotal: calculatedEwTotal\r\n          },\r\n          currentDeal: {\r\n            dealNumber: prevState.dealNumber + 1,\r\n            vulnerable: determineVulnerability(prevState.dealNumber + 1),\r\n            contract: '',\r\n            result: null,\r\n            tricks: null,\r\n            nsPoints: 0,\r\n            ewPoints: 0,\r\n            rawScore: 0,\r\n            bonusScoringEnabled: true,\r\n            handAnalysis: null\r\n          }\r\n        };\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to start a new game\r\n  const handleNewGame = () => {\r\n    // Check if we're ending the current game or starting fresh\r\n    if (gameState.deals.length > 0) {\r\n      // Mark game as ended to show summary\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        gameEnded: true\r\n      }));\r\n    } else {\r\n      // Reset the game state for a fresh start\r\n      setGameState({\r\n        gameNumber: gameState.gameNumber + 1,\r\n        dealNumber: 1,\r\n        deals: [],\r\n        scores: {\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          nsTotal: 0,\r\n          ewTotal: 0\r\n        },\r\n        currentDeal: {\r\n          dealNumber: 1,\r\n          vulnerable: determineVulnerability(1),\r\n          contract: '',\r\n          result: null,\r\n          tricks: null,\r\n          nsPoints: 0,\r\n          ewPoints: 0,\r\n          rawScore: 0,\r\n          bonusScoringEnabled: true,\r\n          handAnalysis: null\r\n        },\r\n        showScorePopup: false,\r\n        isAwake: gameState.isAwake,\r\n        gameEnded: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to return to the game after viewing summary\r\n  const handleReturnToGame = () => {\r\n    // Reset the game state for a fresh start\r\n    setGameState({\r\n      gameNumber: gameState.gameNumber + 1,\r\n      dealNumber: 1,\r\n      deals: [],\r\n      scores: {\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        nsTotal: 0,\r\n        ewTotal: 0\r\n      },\r\n      currentDeal: {\r\n        dealNumber: 1,\r\n        vulnerable: determineVulnerability(1),\r\n        contract: '',\r\n        result: null,\r\n        tricks: null,\r\n        nsPoints: 0,\r\n        ewPoints: 0,\r\n        rawScore: 0,\r\n        bonusScoringEnabled: true,\r\n        handAnalysis: null\r\n      },\r\n      showScorePopup: false,\r\n      isAwake: gameState.isAwake,\r\n      gameEnded: false\r\n    });\r\n  };\r\n  \r\n  // Function to handle choosing Bonus Bridge scoring\r\n  const handleChooseBonusBridge = () => {\r\n    setCurrentView('adjustment');\r\n  };\r\n  \r\n  // Function to handle choosing Party Bridge scoring (standard)\r\n  const handleChoosePartyBridge = () => {\r\n    // Calculate standard bridge score\r\n    const contractDetails = parseContract(\r\n      gameState.currentDeal.contract, \r\n      gameState.currentDeal.result, \r\n      gameState.currentDeal.vulnerable\r\n    );\r\n    \r\n    if (contractDetails) {\r\n      const standardScore = calculateBridgeScore(contractDetails);\r\n      \r\n      // Calculate raw score\r\n      const rawScore = Math.max(\r\n        Math.abs(standardScore.nsPoints || 0), \r\n        Math.abs(standardScore.ewPoints || 0)\r\n      );\r\n      \r\n      // Update current deal with standard scores\r\n      const currentDealWithScores = {\r\n        ...gameState.currentDeal,\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        rawScore,\r\n        bonusScoringEnabled: false\r\n      };\r\n      \r\n      // Calculate running totals using raw scores\r\n      const nsScores = standardScore.nsPoints > 0;\r\n      const ewScores = standardScore.ewPoints > 0;\r\n      \r\n      const nsRawTotal = nsScores ? \r\n        (gameState.scores.nsTotal || 0) + rawScore : \r\n        (gameState.scores.nsTotal || 0);\r\n      \r\n      const ewRawTotal = ewScores ? \r\n        (gameState.scores.ewTotal || 0) + rawScore : \r\n        (gameState.scores.ewTotal || 0);\r\n      \r\n      // For immediate feedback of the current score\r\n      const updatedScores = {\r\n        nsPoints: standardScore.nsPoints || 0,\r\n        ewPoints: standardScore.ewPoints || 0,\r\n        nsTotal: nsRawTotal,\r\n        ewTotal: ewRawTotal\r\n      };\r\n      \r\n      // Update game state with scores\r\n      setGameState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          currentDeal: currentDealWithScores,\r\n          scores: updatedScores\r\n        };\r\n      });\r\n      \r\n      // Then proceed to next deal after a short delay to ensure UI updates\r\n      setTimeout(() => {\r\n        handleNextDeal(currentDealWithScores, updatedScores);\r\n      }, 100);\r\n    }\r\n  };\r\n  \r\n  // Determine which view to show - UPDATED\r\n  const renderCurrentView = () => {\r\n    if (gameState.gameEnded) {\r\n      return (\r\n        <GameSummary \r\n          gameState={gameState}\r\n          onNewGame={handleReturnToGame}\r\n          onGoToHome={handleReturnToGame}\r\n        />\r\n      );\r\n    }\r\n    \r\n    switch(currentView) {\r\n      case 'adjustment':\r\n        return (\r\n          <ScoreAdjustment \r\n            currentDeal={gameState.currentDeal}\r\n            onSaveAdjustment={handleSaveAdjustment}\r\n            onCancel={() => setCurrentView('game')}\r\n          />\r\n        );\r\n      case 'analysis':\r\n        return (\r\n          <FinalScoreAnalysis \r\n            analysisData={gameState.currentDeal.handAnalysis}\r\n            currentDeal={gameState.currentDeal}\r\n            onSave={handleSaveAnalysis}\r\n            onEdit={() => setCurrentView('adjustment')}\r\n            setGameState={setGameState}\r\n            scores={gameState.scores}\r\n          />\r\n        );\r\n      case 'game':\r\n      default:\r\n        return (\r\n          <>\r\n            <ScoreProcessor \r\n              currentDeal={gameState.currentDeal}\r\n              onScoreCalculated={handleScoreCalculated}\r\n            />\r\n            <BridgeGameUI \r\n              gameState={gameState}\r\n              updateCurrentDeal={updateCurrentDeal}\r\n              onNextDeal={handleNextDeal}\r\n              onNewGame={handleNewGame}\r\n              setGameState={setGameState}\r\n              onChooseBonusBridge={handleChooseBonusBridge}\r\n              onChoosePartyBridge={handleChoosePartyBridge}\r\n            />\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {renderCurrentView()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}