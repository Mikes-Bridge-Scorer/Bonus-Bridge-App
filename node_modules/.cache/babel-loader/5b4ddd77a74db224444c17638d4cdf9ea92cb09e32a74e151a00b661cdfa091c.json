{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult = null,\n  contract = '',\n  onChangeContract\n}) => {\n  _s();\n  // State for selected trick button\n  const [selectedTrick, setSelectedTrick] = useState(null);\n  // State for required tricks (based on contract level)\n  const [requiredTricks, setRequiredTricks] = useState(7);\n\n  // Calculate required tricks when contract changes\n  useEffect(() => {\n    if (contract) {\n      const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n      if (contractMatch) {\n        const level = parseInt(contractMatch[1]);\n        setRequiredTricks(level + 6);\n      }\n    }\n  }, [contract]);\n\n  // Set selected trick from initialResult if provided\n  useEffect(() => {\n    if (initialResult !== null && requiredTricks) {\n      // Calculate actual tricks from result\n      const actualTricks = requiredTricks + initialResult;\n      setSelectedTrick(actualTricks);\n    }\n  }, [initialResult, requiredTricks]);\n\n  // Handle trick button click\n  const handleTrickClick = numTricks => {\n    setSelectedTrick(numTricks);\n\n    // Calculate result based on tricks and required tricks\n    const result = numTricks - requiredTricks;\n    onTrickChange(result, numTricks);\n  };\n\n  // Generate trick numbers in a grid layout (0-13)\n  const createTrickGrid = () => {\n    const grid = [];\n\n    // Create rows of 4 buttons each\n    for (let row = 0; row < 4; row++) {\n      const rowItems = [];\n      for (let col = 0; col < 4; col++) {\n        const trickNum = row * 4 + col;\n        if (trickNum <= 13) {\n          rowItems.push(/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `trick-btn ${selectedTrick === trickNum ? 'selected' : ''} ${trickNum === requiredTricks ? 'exact' : trickNum > requiredTricks ? 'made' : 'down'}`,\n            onClick: () => handleTrickClick(trickNum),\n            children: trickNum\n          }, `trick-${trickNum}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tricks-row\",\n        children: rowItems\n      }, `row-${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n    return grid;\n  };\n\n  // Handle change contract button click\n  const handleChangeContract = () => {\n    if (onChangeContract && typeof onChangeContract === 'function') {\n      onChangeContract();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trick-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"required-tricks\",\n      children: [\"Required tricks: \", requiredTricks]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tricks-grid\",\n      children: createTrickGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"change-contract-btn\",\n      onClick: handleChangeContract,\n      children: \"Change Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"/QmD/W+wxqgdg5tWOmifM1V76DQ=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TrickInput","onTrickChange","initialResult","contract","onChangeContract","_s","selectedTrick","setSelectedTrick","requiredTricks","setRequiredTricks","contractMatch","match","level","parseInt","actualTricks","handleTrickClick","numTricks","result","createTrickGrid","grid","row","rowItems","col","trickNum","push","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","handleChangeContract","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TrickInput = ({ onTrickChange, initialResult = null, contract = '', onChangeContract }) => {\r\n  // State for selected trick button\r\n  const [selectedTrick, setSelectedTrick] = useState(null);\r\n  // State for required tricks (based on contract level)\r\n  const [requiredTricks, setRequiredTricks] = useState(7);\r\n  \r\n  // Calculate required tricks when contract changes\r\n  useEffect(() => {\r\n    if (contract) {\r\n      const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n      if (contractMatch) {\r\n        const level = parseInt(contractMatch[1]);\r\n        setRequiredTricks(level + 6);\r\n      }\r\n    }\r\n  }, [contract]);\r\n  \r\n  // Set selected trick from initialResult if provided\r\n  useEffect(() => {\r\n    if (initialResult !== null && requiredTricks) {\r\n      // Calculate actual tricks from result\r\n      const actualTricks = requiredTricks + initialResult;\r\n      setSelectedTrick(actualTricks);\r\n    }\r\n  }, [initialResult, requiredTricks]);\r\n  \r\n  // Handle trick button click\r\n  const handleTrickClick = (numTricks) => {\r\n    setSelectedTrick(numTricks);\r\n    \r\n    // Calculate result based on tricks and required tricks\r\n    const result = numTricks - requiredTricks;\r\n    onTrickChange(result, numTricks);\r\n  };\r\n  \r\n  // Generate trick numbers in a grid layout (0-13)\r\n  const createTrickGrid = () => {\r\n    const grid = [];\r\n    \r\n    // Create rows of 4 buttons each\r\n    for (let row = 0; row < 4; row++) {\r\n      const rowItems = [];\r\n      for (let col = 0; col < 4; col++) {\r\n        const trickNum = row * 4 + col;\r\n        if (trickNum <= 13) {\r\n          rowItems.push(\r\n            <button\r\n              key={`trick-${trickNum}`}\r\n              className={`trick-btn ${selectedTrick === trickNum ? 'selected' : ''} ${\r\n                trickNum === requiredTricks ? 'exact' : \r\n                trickNum > requiredTricks ? 'made' : 'down'\r\n              }`}\r\n              onClick={() => handleTrickClick(trickNum)}\r\n            >\r\n              {trickNum}\r\n            </button>\r\n          );\r\n        }\r\n      }\r\n      grid.push(\r\n        <div key={`row-${row}`} className=\"tricks-row\">\r\n          {rowItems}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return grid;\r\n  };\r\n  \r\n  // Handle change contract button click\r\n  const handleChangeContract = () => {\r\n    if (onChangeContract && typeof onChangeContract === 'function') {\r\n      onChangeContract();\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"trick-input-container\">\r\n      <div className=\"required-tricks\">\r\n        Required tricks: {requiredTricks}\r\n      </div>\r\n      \r\n      <div className=\"tricks-grid\">\r\n        {createTrickGrid()}\r\n      </div>\r\n      \r\n      <button \r\n        className=\"change-contract-btn\"\r\n        onClick={handleChangeContract}\r\n      >\r\n        Change Contract\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}