{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport BridgeGameUI from './BridgeGameUI';\nimport { determineVulnerability, parseContract, calculateBridgeScore } from './utils/scoring';\nimport './global.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState(() => {\n    // Try to load game state from local storage\n    const savedState = localStorage.getItem('bridgeGameState');\n    if (savedState) {\n      try {\n        return JSON.parse(savedState);\n      } catch (e) {\n        console.error('Error parsing saved game state', e);\n      }\n    }\n\n    // Default initial state\n    return {\n      gameNumber: 1,\n      dealNumber: 1,\n      scores: {\n        nsScore: 0,\n        ewScore: 0\n      },\n      deals: [],\n      currentDeal: {\n        contract: '',\n        declarer: '',\n        result: null,\n        tricks: null,\n        vulnerable: determineVulnerability(1)\n      },\n      isAwake: false,\n      showScorePopup: false\n    };\n  });\n\n  // Save game state to local storage whenever it changes\n  // Use a more specific dependency array to avoid infinite loops\n  useEffect(() => {\n    localStorage.setItem('bridgeGameState', JSON.stringify(gameState));\n  }, [gameState.gameNumber, gameState.dealNumber, gameState.scores.nsScore, gameState.scores.ewScore, gameState.isAwake, gameState.showScorePopup,\n  // We don't want to deeply track all changes to currentDeal as it would cause too many updates\n  // Instead, just track these key properties:\n  gameState.currentDeal.contract, gameState.currentDeal.result]);\n\n  // Handle starting a new deal\n  const handleNextDeal = useCallback(() => {\n    setGameState(prev => {\n      // Store the completed deal in history first\n      const completedDeal = {\n        ...prev.currentDeal,\n        dealNumber: prev.dealNumber\n      };\n\n      // Calculate the scores from the current deal\n      let nsScore = prev.scores.nsScore;\n      let ewScore = prev.scores.ewScore;\n      if (prev.currentDeal.contract && prev.currentDeal.result !== null) {\n        const contractDetails = parseContract(prev.currentDeal.contract, prev.currentDeal.result, prev.currentDeal.vulnerable);\n        if (contractDetails) {\n          const dealScore = calculateBridgeScore(contractDetails);\n          nsScore += dealScore.nsPoints;\n          ewScore += dealScore.ewPoints;\n        }\n      }\n      return {\n        ...prev,\n        dealNumber: prev.dealNumber + 1,\n        showScorePopup: false,\n        scores: {\n          nsScore: nsScore,\n          ewScore: ewScore\n        },\n        deals: [...prev.deals, completedDeal],\n        currentDeal: {\n          contract: '',\n          declarer: '',\n          result: null,\n          tricks: null,\n          vulnerable: determineVulnerability(prev.dealNumber + 1)\n        }\n      };\n    });\n  }, []);\n  const handleNewGame = useCallback(() => {\n    setGameState(prev => ({\n      gameNumber: prev.gameNumber + 1,\n      dealNumber: 1,\n      scores: {\n        nsScore: 0,\n        ewScore: 0\n      },\n      deals: [],\n      currentDeal: {\n        contract: '',\n        declarer: '',\n        result: null,\n        tricks: null,\n        vulnerable: determineVulnerability(1)\n      },\n      isAwake: prev.isAwake,\n      showScorePopup: false\n    }));\n  }, []);\n  const updateCurrentDeal = useCallback(updatedDeal => {\n    setGameState(prev => ({\n      ...prev,\n      currentDeal: {\n        ...prev.currentDeal,\n        ...updatedDeal\n      }\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(BridgeGameUI, {\n      gameState: gameState,\n      updateCurrentDeal: updateCurrentDeal,\n      onNextDeal: handleNextDeal,\n      onNewGame: handleNewGame,\n      setGameState: setGameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DS/liFyNDMyAZlLvlcLXNuaZB5I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BridgeGameUI","determineVulnerability","parseContract","calculateBridgeScore","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","savedState","localStorage","getItem","JSON","parse","e","console","error","gameNumber","dealNumber","scores","nsScore","ewScore","deals","currentDeal","contract","declarer","result","tricks","vulnerable","isAwake","showScorePopup","setItem","stringify","handleNextDeal","prev","completedDeal","contractDetails","dealScore","nsPoints","ewPoints","handleNewGame","updateCurrentDeal","updatedDeal","className","children","onNextDeal","onNewGame","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract, \r\n  calculateBridgeScore \r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  const [gameState, setGameState] = useState(() => {\r\n    // Try to load game state from local storage\r\n    const savedState = localStorage.getItem('bridgeGameState');\r\n    if (savedState) {\r\n      try {\r\n        return JSON.parse(savedState);\r\n      } catch (e) {\r\n        console.error('Error parsing saved game state', e);\r\n      }\r\n    }\r\n    \r\n    // Default initial state\r\n    return {\r\n      gameNumber: 1,\r\n      dealNumber: 1,\r\n      scores: {\r\n        nsScore: 0,\r\n        ewScore: 0\r\n      },\r\n      deals: [],\r\n      currentDeal: {\r\n        contract: '',\r\n        declarer: '',\r\n        result: null,\r\n        tricks: null,\r\n        vulnerable: determineVulnerability(1)\r\n      },\r\n      isAwake: false,\r\n      showScorePopup: false\r\n    };\r\n  });\r\n  \r\n  // Save game state to local storage whenever it changes\r\n  // Use a more specific dependency array to avoid infinite loops\r\n  useEffect(() => {\r\n    localStorage.setItem('bridgeGameState', JSON.stringify(gameState));\r\n  }, [\r\n    gameState.gameNumber, \r\n    gameState.dealNumber, \r\n    gameState.scores.nsScore, \r\n    gameState.scores.ewScore,\r\n    gameState.isAwake,\r\n    gameState.showScorePopup,\r\n    // We don't want to deeply track all changes to currentDeal as it would cause too many updates\r\n    // Instead, just track these key properties:\r\n    gameState.currentDeal.contract,\r\n    gameState.currentDeal.result\r\n  ]);\r\n  \r\n  // Handle starting a new deal\r\n  const handleNextDeal = useCallback(() => {\r\n    setGameState(prev => {\r\n      // Store the completed deal in history first\r\n      const completedDeal = {\r\n        ...prev.currentDeal,\r\n        dealNumber: prev.dealNumber\r\n      };\r\n      \r\n      // Calculate the scores from the current deal\r\n      let nsScore = prev.scores.nsScore;\r\n      let ewScore = prev.scores.ewScore;\r\n      \r\n      if (prev.currentDeal.contract && prev.currentDeal.result !== null) {\r\n        const contractDetails = parseContract(\r\n          prev.currentDeal.contract, \r\n          prev.currentDeal.result, \r\n          prev.currentDeal.vulnerable\r\n        );\r\n        \r\n        if (contractDetails) {\r\n          const dealScore = calculateBridgeScore(contractDetails);\r\n          nsScore += dealScore.nsPoints;\r\n          ewScore += dealScore.ewPoints;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        dealNumber: prev.dealNumber + 1,\r\n        showScorePopup: false,\r\n        scores: {\r\n          nsScore: nsScore,\r\n          ewScore: ewScore\r\n        },\r\n        deals: [...prev.deals, completedDeal],\r\n        currentDeal: {\r\n          contract: '',\r\n          declarer: '',\r\n          result: null,\r\n          tricks: null,\r\n          vulnerable: determineVulnerability(prev.dealNumber + 1)\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n  \r\n  const handleNewGame = useCallback(() => {\r\n    setGameState(prev => ({\r\n      gameNumber: prev.gameNumber + 1,\r\n      dealNumber: 1,\r\n      scores: {\r\n        nsScore: 0,\r\n        ewScore: 0\r\n      },\r\n      deals: [],\r\n      currentDeal: {\r\n        contract: '',\r\n        declarer: '',\r\n        result: null,\r\n        tricks: null,\r\n        vulnerable: determineVulnerability(1)\r\n      },\r\n      isAwake: prev.isAwake,\r\n      showScorePopup: false\r\n    }));\r\n  }, []);\r\n  \r\n  const updateCurrentDeal = useCallback((updatedDeal) => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      currentDeal: {\r\n        ...prev.currentDeal,\r\n        ...updatedDeal\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      <BridgeGameUI \r\n        gameState={gameState} \r\n        updateCurrentDeal={updateCurrentDeal}\r\n        onNextDeal={handleNextDeal}\r\n        onNewGame={handleNewGame}\r\n        setGameState={setGameState}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}