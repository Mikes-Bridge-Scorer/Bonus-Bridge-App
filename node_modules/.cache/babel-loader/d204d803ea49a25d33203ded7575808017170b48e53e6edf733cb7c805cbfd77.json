{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport BridgeGameUI from './BridgeGameUI';\nimport { determineVulnerability, parseContract, calculateBridgeScore } from './utils/scoring';\nimport './global.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Create a function to generate a new initial state\n  const createInitialState = () => {\n    return {\n      gameNumber: 1,\n      dealNumber: 1,\n      scores: {\n        nsScore: 0,\n        ewScore: 0\n      },\n      deals: [],\n      currentDeal: {\n        contract: '',\n        declarer: '',\n        result: null,\n        tricks: null,\n        vulnerable: determineVulnerability(1)\n      },\n      isAwake: false,\n      showScorePopup: false\n    };\n  };\n  const [gameState, setGameState] = useState(() => {\n    // Try to load game state from local storage\n    const savedState = localStorage.getItem('bridgeGameState');\n\n    // Check if we have a valid saved state\n    if (savedState) {\n      try {\n        const parsedState = JSON.parse(savedState);\n\n        // Check if it's a new session (you can use a timestamp or other method)\n        // For simplicity, we'll just always start fresh\n        // If you want to resume the previous game, you can remove this condition\n        const shouldStartFresh = true; // Change this logic if you want to resume games\n\n        if (shouldStartFresh) {\n          // Start a new game\n          return createInitialState();\n        }\n        return parsedState;\n      } catch (e) {\n        console.error('Error parsing saved game state', e);\n        return createInitialState();\n      }\n    }\n\n    // Default initial state\n    return createInitialState();\n  });\n\n  // Save game state to local storage whenever it changes\n  // Use a more specific dependency array to avoid infinite loops\n  useEffect(() => {\n    localStorage.setItem('bridgeGameState', JSON.stringify(gameState));\n  }, [gameState.gameNumber, gameState.dealNumber, gameState.scores.nsScore, gameState.scores.ewScore, gameState.isAwake, gameState.showScorePopup,\n  // We don't want to deeply track all changes to currentDeal as it would cause too many updates\n  // Instead, just track these key properties:\n  gameState.currentDeal.contract, gameState.currentDeal.result]);\n\n  // Handle starting a new deal\n  const handleNextDeal = useCallback(() => {\n    setGameState(prev => {\n      // Store the completed deal in history first\n      const completedDeal = {\n        ...prev.currentDeal,\n        dealNumber: prev.dealNumber\n      };\n\n      // Calculate the scores from the current deal\n      let nsScore = prev.scores.nsScore;\n      let ewScore = prev.scores.ewScore;\n      if (prev.currentDeal.contract && prev.currentDeal.result !== null) {\n        const contractDetails = parseContract(prev.currentDeal.contract, prev.currentDeal.result, prev.currentDeal.vulnerable);\n        if (contractDetails) {\n          const dealScore = calculateBridgeScore(contractDetails);\n          nsScore += dealScore.nsPoints;\n          ewScore += dealScore.ewPoints;\n        }\n      }\n      return {\n        ...prev,\n        dealNumber: prev.dealNumber + 1,\n        showScorePopup: false,\n        scores: {\n          nsScore: nsScore,\n          ewScore: ewScore\n        },\n        deals: [...prev.deals, completedDeal],\n        currentDeal: {\n          contract: '',\n          declarer: '',\n          result: null,\n          tricks: null,\n          vulnerable: determineVulnerability(prev.dealNumber + 1)\n        }\n      };\n    });\n  }, []);\n  const handleNewGame = useCallback(() => {\n    setGameState(prev => ({\n      gameNumber: prev.gameNumber + 1,\n      dealNumber: 1,\n      scores: {\n        nsScore: 0,\n        ewScore: 0\n      },\n      deals: [],\n      currentDeal: {\n        contract: '',\n        declarer: '',\n        result: null,\n        tricks: null,\n        vulnerable: determineVulnerability(1)\n      },\n      isAwake: prev.isAwake,\n      showScorePopup: false\n    }));\n  }, []);\n  const updateCurrentDeal = useCallback(updatedDeal => {\n    setGameState(prev => ({\n      ...prev,\n      currentDeal: {\n        ...prev.currentDeal,\n        ...updatedDeal\n      }\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(BridgeGameUI, {\n      gameState: gameState,\n      updateCurrentDeal: updateCurrentDeal,\n      onNextDeal: handleNextDeal,\n      onNewGame: handleNewGame,\n      setGameState: setGameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vZjD5Z5HYL16jIA0rdgfkFunw3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BridgeGameUI","determineVulnerability","parseContract","calculateBridgeScore","jsxDEV","_jsxDEV","App","_s","createInitialState","gameNumber","dealNumber","scores","nsScore","ewScore","deals","currentDeal","contract","declarer","result","tricks","vulnerable","isAwake","showScorePopup","gameState","setGameState","savedState","localStorage","getItem","parsedState","JSON","parse","shouldStartFresh","e","console","error","setItem","stringify","handleNextDeal","prev","completedDeal","contractDetails","dealScore","nsPoints","ewPoints","handleNewGame","updateCurrentDeal","updatedDeal","className","children","onNextDeal","onNewGame","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport BridgeGameUI from './BridgeGameUI';\r\nimport { \r\n  determineVulnerability,\r\n  parseContract, \r\n  calculateBridgeScore \r\n} from './utils/scoring';\r\nimport './global.css';\r\n\r\nconst App = () => {\r\n  // Create a function to generate a new initial state\r\n  const createInitialState = () => {\r\n    return {\r\n      gameNumber: 1,\r\n      dealNumber: 1,\r\n      scores: {\r\n        nsScore: 0,\r\n        ewScore: 0\r\n      },\r\n      deals: [],\r\n      currentDeal: {\r\n        contract: '',\r\n        declarer: '',\r\n        result: null,\r\n        tricks: null,\r\n        vulnerable: determineVulnerability(1)\r\n      },\r\n      isAwake: false,\r\n      showScorePopup: false\r\n    };\r\n  };\r\n\r\n  const [gameState, setGameState] = useState(() => {\r\n    // Try to load game state from local storage\r\n    const savedState = localStorage.getItem('bridgeGameState');\r\n    \r\n    // Check if we have a valid saved state\r\n    if (savedState) {\r\n      try {\r\n        const parsedState = JSON.parse(savedState);\r\n        \r\n        // Check if it's a new session (you can use a timestamp or other method)\r\n        // For simplicity, we'll just always start fresh\r\n        // If you want to resume the previous game, you can remove this condition\r\n        const shouldStartFresh = true; // Change this logic if you want to resume games\r\n        \r\n        if (shouldStartFresh) {\r\n          // Start a new game\r\n          return createInitialState();\r\n        }\r\n        \r\n        return parsedState;\r\n      } catch (e) {\r\n        console.error('Error parsing saved game state', e);\r\n        return createInitialState();\r\n      }\r\n    }\r\n    \r\n    // Default initial state\r\n    return createInitialState();\r\n  });\r\n  \r\n  // Save game state to local storage whenever it changes\r\n  // Use a more specific dependency array to avoid infinite loops\r\n  useEffect(() => {\r\n    localStorage.setItem('bridgeGameState', JSON.stringify(gameState));\r\n  }, [\r\n    gameState.gameNumber, \r\n    gameState.dealNumber, \r\n    gameState.scores.nsScore, \r\n    gameState.scores.ewScore,\r\n    gameState.isAwake,\r\n    gameState.showScorePopup,\r\n    // We don't want to deeply track all changes to currentDeal as it would cause too many updates\r\n    // Instead, just track these key properties:\r\n    gameState.currentDeal.contract,\r\n    gameState.currentDeal.result\r\n  ]);\r\n  \r\n  // Handle starting a new deal\r\n  const handleNextDeal = useCallback(() => {\r\n    setGameState(prev => {\r\n      // Store the completed deal in history first\r\n      const completedDeal = {\r\n        ...prev.currentDeal,\r\n        dealNumber: prev.dealNumber\r\n      };\r\n      \r\n      // Calculate the scores from the current deal\r\n      let nsScore = prev.scores.nsScore;\r\n      let ewScore = prev.scores.ewScore;\r\n      \r\n      if (prev.currentDeal.contract && prev.currentDeal.result !== null) {\r\n        const contractDetails = parseContract(\r\n          prev.currentDeal.contract, \r\n          prev.currentDeal.result, \r\n          prev.currentDeal.vulnerable\r\n        );\r\n        \r\n        if (contractDetails) {\r\n          const dealScore = calculateBridgeScore(contractDetails);\r\n          nsScore += dealScore.nsPoints;\r\n          ewScore += dealScore.ewPoints;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        dealNumber: prev.dealNumber + 1,\r\n        showScorePopup: false,\r\n        scores: {\r\n          nsScore: nsScore,\r\n          ewScore: ewScore\r\n        },\r\n        deals: [...prev.deals, completedDeal],\r\n        currentDeal: {\r\n          contract: '',\r\n          declarer: '',\r\n          result: null,\r\n          tricks: null,\r\n          vulnerable: determineVulnerability(prev.dealNumber + 1)\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n  \r\n  const handleNewGame = useCallback(() => {\r\n    setGameState(prev => ({\r\n      gameNumber: prev.gameNumber + 1,\r\n      dealNumber: 1,\r\n      scores: {\r\n        nsScore: 0,\r\n        ewScore: 0\r\n      },\r\n      deals: [],\r\n      currentDeal: {\r\n        contract: '',\r\n        declarer: '',\r\n        result: null,\r\n        tricks: null,\r\n        vulnerable: determineVulnerability(1)\r\n      },\r\n      isAwake: prev.isAwake,\r\n      showScorePopup: false\r\n    }));\r\n  }, []);\r\n  \r\n  const updateCurrentDeal = useCallback((updatedDeal) => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      currentDeal: {\r\n        ...prev.currentDeal,\r\n        ...updatedDeal\r\n      }\r\n    }));\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      <BridgeGameUI \r\n        gameState={gameState} \r\n        updateCurrentDeal={updateCurrentDeal}\r\n        onNextDeal={handleNextDeal}\r\n        onNewGame={handleNewGame}\r\n        setGameState={setGameState}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}