{"ast":null,"code":"// Bonus Bridge Enhanced Scoring System utility functions\n\n// Expected HCP by contract type\nexport const expectedHCPByContract = {\n  partScore: 21,\n  game3NT: 25,\n  game4Major: 24,\n  game5Minor: 27,\n  smallSlam: 30,\n  grandSlam: 32\n};\n\n// Calculate the raw bridge score (standard bridge scoring)\nexport const calculateRawBridgeScore = contractDetails => {\n  if (!contractDetails) return 0;\n  const {\n    level,\n    suit,\n    declarer,\n    doubled,\n    isMade,\n    result,\n    vulnerable\n  } = contractDetails;\n  let score = 0;\n  if (isMade) {\n    // Trick score\n    const trickValue = suit === '♣' || suit === '♦' ? 20 : 30;\n    const firstTrickValue = suit === 'NT' ? 40 : trickValue;\n\n    // Calculate trick score\n    score = firstTrickValue + (level - 1) * trickValue;\n\n    // Apply doubling\n    if (doubled === 'X') score *= 2;\n    if (doubled === 'XX') score *= 4;\n\n    // Game and slam bonuses\n    if (score >= 100) {\n      // Game bonus\n      score += vulnerable ? 500 : 300;\n    } else {\n      // Part score bonus\n      score += 50;\n    }\n\n    // Slam bonuses\n    if (level === 6) {\n      score += vulnerable ? 750 : 500; // Small slam\n    } else if (level === 7) {\n      score += vulnerable ? 1500 : 1000; // Grand slam\n    }\n\n    // Overtrick bonuses\n    if (result > 0) {\n      const overtrickValue = doubled ? (vulnerable ? 200 : 100) * (doubled === 'XX' ? 2 : 1) : suit === '♣' || suit === '♦' ? 20 : 30;\n      score += overtrickValue * result;\n    }\n\n    // Doubled and redoubled bonuses\n    if (doubled === 'X') score += 50;\n    if (doubled === 'XX') score += 100;\n  } else {\n    // Contract went down\n    const undertricks = Math.abs(result);\n    if (!doubled) {\n      // Not doubled\n      score = -(undertricks * (vulnerable ? 100 : 50));\n    } else {\n      // Doubled or redoubled\n      const multiplier = doubled === 'XX' ? 2 : 1;\n      if (vulnerable) {\n        score = -(300 * multiplier + (undertricks - 1) * 300 * multiplier);\n      } else {\n        // First undertrick\n        score = -(100 * multiplier);\n\n        // Second and third undertricks\n        if (undertricks > 1) {\n          score -= Math.min(undertricks - 1, 2) * 200 * multiplier;\n        }\n\n        // Fourth and subsequent undertricks\n        if (undertricks > 3) {\n          score -= (undertricks - 3) * 300 * multiplier;\n        }\n      }\n    }\n  }\n  return score;\n};\n\n// Calculate enhanced Bonus Bridge score\nexport const calculateBonusBridgeScore = (contractDetails, declarerHCP, defenderHCP, declarerDistPoints) => {\n  if (!contractDetails) return {\n    declarerPoints: 0,\n    defenderPoints: 0,\n    details: []\n  };\n\n  // Initialize details array for calculation steps\n  const details = [];\n\n  // Step 1: Calculate Raw Score and Reduce Scale\n  const rawScore = calculateRawBridgeScore(contractDetails);\n  let initialPoints = rawScore / 20;\n  details.push(`Raw score: ${rawScore} ÷ 20 = ${initialPoints.toFixed(2)} points`);\n\n  // Step 2: Calculate HCP Advantage\n  const totalHCP = declarerHCP + defenderHCP;\n  const declarerHCPPercentage = declarerHCP / totalHCP * 100;\n  const defenderHCPPercentage = 100 - declarerHCPPercentage;\n  const hcpAdvantage = Math.abs(declarerHCPPercentage - defenderHCPPercentage);\n  const advantageSide = declarerHCPPercentage > 50 ? \"declarer\" : \"defender\";\n  details.push(`Declarer HCP: ${declarerHCP} (${declarerHCPPercentage.toFixed(1)}%)`);\n  details.push(`Defender HCP: ${defenderHCP} (${defenderHCPPercentage.toFixed(1)}%)`);\n  details.push(`HCP Advantage: ${hcpAdvantage.toFixed(1)}% to ${advantageSide}`);\n  let declarerPoints = initialPoints;\n  let defenderPoints = 0;\n  if (contractDetails.isMade) {\n    // Made contracts\n\n    // Step 3: Apply HCP Adjustment Based on Contract Type\n    let expectedHCP = 21; // Default for part scores\n\n    if (contractDetails.level === 3 && contractDetails.suit === 'NT') {\n      expectedHCP = expectedHCPByContract.game3NT;\n    } else if (contractDetails.level === 4 && (contractDetails.suit === '♥' || contractDetails.suit === '♠')) {\n      expectedHCP = expectedHCPByContract.game4Major;\n    } else if (contractDetails.level === 5 && (contractDetails.suit === '♣' || contractDetails.suit === '♦')) {\n      expectedHCP = expectedHCPByContract.game5Minor;\n    } else if (contractDetails.level === 6) {\n      expectedHCP = expectedHCPByContract.smallSlam;\n    } else if (contractDetails.level === 7) {\n      expectedHCP = expectedHCPByContract.grandSlam;\n    }\n    const hcpAdjustment = (declarerHCP - expectedHCP) * 0.75;\n    if (declarerHCP > expectedHCP) {\n      declarerPoints -= hcpAdjustment;\n      details.push(`HCP Adjustment: ${declarerHCP} > ${expectedHCP}, -${hcpAdjustment.toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n    } else if (declarerHCP < expectedHCP) {\n      declarerPoints += Math.abs(hcpAdjustment);\n      details.push(`HCP Adjustment: ${declarerHCP} < ${expectedHCP}, +${Math.abs(hcpAdjustment).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n    } else {\n      details.push(`HCP Adjustment: ${declarerHCP} = ${expectedHCP}, no adjustment → ${declarerPoints.toFixed(2)} points`);\n    }\n\n    // Step 4: Calculate Expected Tricks\n    const contractExpectedTricks = 6 + contractDetails.level;\n    const handExpectedTricks = Math.min(13, 6 + declarerHCP / 3 + declarerDistPoints / 4);\n    details.push(`Contract Expected Tricks: 6 + ${contractDetails.level} = ${contractExpectedTricks}`);\n    details.push(`Hand Expected Tricks: 6 + (${declarerHCP} ÷ 3) + (${declarerDistPoints} ÷ 4) = ${handExpectedTricks.toFixed(2)} → ${Math.min(13, Math.round(handExpectedTricks))}`);\n\n    // Step 5: Performance Assessment\n    const actualTricks = contractDetails.tricks;\n    const performanceVariance = actualTricks - contractExpectedTricks;\n    if (performanceVariance > 0) {\n      // Overtricks\n      declarerPoints += performanceVariance * 1.5;\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = +${performanceVariance} → +${(performanceVariance * 1.5).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n    } else if (performanceVariance < 0) {\n      // Failed contract (shouldn't happen in this branch)\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = ${performanceVariance} (contract failed)`);\n    } else {\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = 0 (exactly made)`);\n    }\n\n    // Hand Potential Performance\n    if (handExpectedTricks > contractExpectedTricks) {\n      const potentialVariance = actualTricks - handExpectedTricks;\n      if (potentialVariance < 0) {\n        // Underperformance based on hand potential\n        declarerPoints -= Math.abs(potentialVariance) * 0.75;\n        details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} → -${(Math.abs(potentialVariance) * 0.75).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n      } else {\n        details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} (no adjustment)`);\n      }\n    }\n\n    // Step 6: Apply Contract Type Adjustments\n    if (isGameContract(contractDetails)) {\n      declarerPoints += 2;\n      details.push(`Game Contract Bonus: +2 points → ${declarerPoints.toFixed(2)} points`);\n    }\n    if (contractDetails.level === 6) {\n      declarerPoints += 4;\n      details.push(`Small Slam Bonus: +4 points → ${declarerPoints.toFixed(2)} points`);\n    } else if (contractDetails.level === 7) {\n      declarerPoints += 6;\n      details.push(`Grand Slam Bonus: +6 points → ${declarerPoints.toFixed(2)} points`);\n    }\n    if (contractDetails.suit === 'NT') {\n      declarerPoints += 1;\n      details.push(`NT Contract Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n    }\n    if (performanceVariance >= 4) {\n      declarerPoints += 1;\n      details.push(`4+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n      if (performanceVariance >= 7) {\n        declarerPoints += 1;\n        details.push(`7+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n      }\n    }\n\n    // Step 7: Distribution Adjustment (Suit Contracts Only)\n    if (contractDetails.suit !== 'NT') {\n      let distributionAdjustment = 0;\n      if (declarerDistPoints >= 7) {\n        distributionAdjustment = 3;\n      } else if (declarerDistPoints >= 5) {\n        distributionAdjustment = 2;\n      } else if (declarerDistPoints >= 3) {\n        distributionAdjustment = 1;\n      }\n      if (distributionAdjustment > 0) {\n        declarerPoints -= distributionAdjustment;\n        details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, -${distributionAdjustment} points → ${declarerPoints.toFixed(2)} points`);\n      } else {\n        details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, no deduction`);\n      }\n    }\n\n    // Step 8: Defender Reward Calculation\n    const handExpectedTricksRounded = Math.min(13, Math.round(handExpectedTricks));\n    if (handExpectedTricksRounded > contractExpectedTricks && actualTricks < handExpectedTricksRounded) {\n      const defenderReward = (handExpectedTricksRounded - actualTricks) * 2;\n      let extraReward = 0;\n      if (advantageSide === \"declarer\") {\n        extraReward = Math.min(3, hcpAdvantage / 10);\n        details.push(`Defender Extra Reward: ${extraReward.toFixed(2)} points (for ${hcpAdvantage.toFixed(1)}% HCP disadvantage)`);\n      }\n      defenderPoints = defenderReward + extraReward;\n      details.push(`Defender Reward: (${handExpectedTricksRounded} - ${actualTricks}) × 2 = ${defenderReward} + ${extraReward.toFixed(2)} extra = ${defenderPoints.toFixed(2)} points`);\n    }\n\n    // Step 9: Finalize Scores\n    declarerPoints = Math.round(Math.max(1, declarerPoints)); // Minimum 1 point for made contracts\n    defenderPoints = Math.round(defenderPoints);\n  } else {\n    // Defeated contracts\n\n    // Step 1: Calculate Base Penalty\n    const basePenalty = Math.abs(rawScore) / 10;\n    defenderPoints = basePenalty;\n    details.push(`Base Penalty: |${rawScore}| ÷ 10 = ${basePenalty.toFixed(2)} points`);\n\n    // Step 2: Add Contract Level Penalties\n    if (isGameContract(contractDetails)) {\n      defenderPoints += 3;\n      details.push(`Game Contract Penalty: +3 points → ${defenderPoints.toFixed(2)} points`);\n    }\n    if (contractDetails.level === 6) {\n      defenderPoints += 5;\n      details.push(`Small Slam Penalty: +5 points → ${defenderPoints.toFixed(2)} points`);\n    } else if (contractDetails.level === 7) {\n      defenderPoints += 7;\n      details.push(`Grand Slam Penalty: +7 points → ${defenderPoints.toFixed(2)} points`);\n    }\n\n    // Step 3: Calculate Defender Performance Bonus\n    if (declarerHCPPercentage > 60) {\n      const bonus = (declarerHCPPercentage - 50) / 5;\n      defenderPoints += bonus;\n      details.push(`Defender HCP Bonus: (${declarerHCPPercentage.toFixed(1)}% - 50) ÷ 5 = +${bonus.toFixed(2)} points → ${defenderPoints.toFixed(2)} points`);\n    }\n    if (Math.abs(contractDetails.result) >= 2) {\n      defenderPoints += 2;\n      details.push(`Down 2+ Tricks Bonus: +2 points → ${defenderPoints.toFixed(2)} points`);\n      if (Math.abs(contractDetails.result) >= 3) {\n        defenderPoints += 1; // Additional +1 for 3+ down\n        details.push(`Down 3+ Tricks Bonus: +1 point → ${defenderPoints.toFixed(2)} points`);\n      }\n    }\n\n    // Step 4: Calculate Declarer Consolation\n    if (declarerHCPPercentage < 40) {\n      declarerPoints = (50 - declarerHCPPercentage) / 10;\n      details.push(`Declarer Consolation: (50 - ${declarerHCPPercentage.toFixed(1)}%) ÷ 10 = ${declarerPoints.toFixed(2)} points`);\n    }\n\n    // Step 5: Finalize Scores\n    declarerPoints = Math.round(declarerPoints); // Can be 0\n    defenderPoints = Math.round(Math.max(3, defenderPoints)); // Minimum 3 points for defeating contracts\n  }\n  details.push(`Final Declarer Points: ${declarerPoints}`);\n  details.push(`Final Defender Points: ${defenderPoints}`);\n  return {\n    declarerPoints,\n    defenderPoints,\n    details\n  };\n};\n\n// Helper function to determine if a contract is a game contract\nexport const isGameContract = contractDetails => {\n  if (!contractDetails) return false;\n  return contractDetails.level === 3 && contractDetails.suit === 'NT' || contractDetails.level === 4 && (contractDetails.suit === '♥' || contractDetails.suit === '♠') || contractDetails.level === 5 && (contractDetails.suit === '♣' || contractDetails.suit === '♦') || contractDetails.level >= 6;\n};\n\n// Parse contract string to get details\nexport const parseContract = (contractString, result, tricks, vulnerable) => {\n  if (!contractString) return null;\n  const contractRegex = /(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/;\n  const match = contractString.match(contractRegex);\n  if (!match) return null;\n  const level = parseInt(match[1]);\n  const suit = match[2];\n  const declarer = match[3];\n  const doubled = match[4];\n  return {\n    level,\n    suit,\n    declarer,\n    doubled,\n    isNS: declarer === 'N' || declarer === 'S',\n    isNT: suit === 'NT',\n    isMajor: suit === '♥' || suit === '♠',\n    isMinor: suit === '♣' || suit === '♦',\n    isMade: result >= 0,\n    tricks: tricks || 6 + level + (result || 0),\n    result: result || 0,\n    vulnerable: vulnerable || {\n      ns: false,\n      ew: false\n    }\n  };\n};\n\n// Determine vulnerability based on deal number\n// Standard bridge vulnerability rotation: None, NS, EW, Both, repeating\nexport const determineVulnerability = dealNumber => {\n  const vulnerabilityPattern = (dealNumber - 1) % 4;\n  switch (vulnerabilityPattern) {\n    case 0:\n      // None\n      return {\n        ns: false,\n        ew: false\n      };\n    case 1:\n      // NS\n      return {\n        ns: true,\n        ew: false\n      };\n    case 2:\n      // EW\n      return {\n        ns: false,\n        ew: true\n      };\n    case 3:\n      // Both\n      return {\n        ns: true,\n        ew: true\n      };\n    default:\n      return {\n        ns: false,\n        ew: false\n      };\n  }\n};\n\n// Function to generate a text description of vulnerability\nexport const vulnerabilityDescription = vulnerable => {\n  if (!vulnerable) return \"Not Vulnerable\";\n  if (vulnerable.ns && vulnerable.ew) {\n    return \"Both Vulnerable\";\n  } else if (vulnerable.ns) {\n    return \"NS Vulnerable\";\n  } else if (vulnerable.ew) {\n    return \"EW Vulnerable\";\n  } else {\n    return \"Not Vulnerable\";\n  }\n};\n\n// Calculate distribution points\nexport const calculateDistributionPoints = handPattern => {\n  // handPattern should be an array of 4 numbers representing the length of each suit\n  if (!handPattern || !Array.isArray(handPattern) || handPattern.length !== 4) {\n    return 0;\n  }\n  let points = 0;\n\n  // Points for short suits\n  handPattern.forEach(suitLength => {\n    if (suitLength === 0) points += 3; // Void\n    if (suitLength === 1) points += 2; // Singleton\n    if (suitLength === 2) points += 1; // Doubleton\n  });\n\n  // Points for long suits (only count suits of 6+ cards)\n  handPattern.forEach(suitLength => {\n    if (suitLength >= 6) {\n      points += suitLength - 5; // +1 for 6 card suit, +2 for 7 card suit, etc.\n    }\n  });\n  return points;\n};","map":{"version":3,"names":["expectedHCPByContract","partScore","game3NT","game4Major","game5Minor","smallSlam","grandSlam","calculateRawBridgeScore","contractDetails","level","suit","declarer","doubled","isMade","result","vulnerable","score","trickValue","firstTrickValue","overtrickValue","undertricks","Math","abs","multiplier","min","calculateBonusBridgeScore","declarerHCP","defenderHCP","declarerDistPoints","declarerPoints","defenderPoints","details","rawScore","initialPoints","push","toFixed","totalHCP","declarerHCPPercentage","defenderHCPPercentage","hcpAdvantage","advantageSide","expectedHCP","hcpAdjustment","contractExpectedTricks","handExpectedTricks","round","actualTricks","tricks","performanceVariance","potentialVariance","isGameContract","distributionAdjustment","handExpectedTricksRounded","defenderReward","extraReward","max","basePenalty","bonus","parseContract","contractString","contractRegex","match","parseInt","isNS","isNT","isMajor","isMinor","ns","ew","determineVulnerability","dealNumber","vulnerabilityPattern","vulnerabilityDescription","calculateDistributionPoints","handPattern","Array","isArray","length","points","forEach","suitLength"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/scoring.js"],"sourcesContent":["// Bonus Bridge Enhanced Scoring System utility functions\r\n\r\n// Expected HCP by contract type\r\nexport const expectedHCPByContract = {\r\n  partScore: 21,\r\n  game3NT: 25,\r\n  game4Major: 24,\r\n  game5Minor: 27,\r\n  smallSlam: 30,\r\n  grandSlam: 32\r\n};\r\n\r\n// Calculate the raw bridge score (standard bridge scoring)\r\nexport const calculateRawBridgeScore = (contractDetails) => {\r\n  if (!contractDetails) return 0;\r\n  \r\n  const { level, suit, declarer, doubled, isMade, result, vulnerable } = contractDetails;\r\n  \r\n  let score = 0;\r\n  \r\n  if (isMade) {\r\n    // Trick score\r\n    const trickValue = suit === '♣' || suit === '♦' ? 20 : 30;\r\n    const firstTrickValue = suit === 'NT' ? 40 : trickValue;\r\n    \r\n    // Calculate trick score\r\n    score = firstTrickValue + (level - 1) * trickValue;\r\n    \r\n    // Apply doubling\r\n    if (doubled === 'X') score *= 2;\r\n    if (doubled === 'XX') score *= 4;\r\n    \r\n    // Game and slam bonuses\r\n    if (score >= 100) {\r\n      // Game bonus\r\n      score += vulnerable ? 500 : 300;\r\n    } else {\r\n      // Part score bonus\r\n      score += 50;\r\n    }\r\n    \r\n    // Slam bonuses\r\n    if (level === 6) {\r\n      score += vulnerable ? 750 : 500; // Small slam\r\n    } else if (level === 7) {\r\n      score += vulnerable ? 1500 : 1000; // Grand slam\r\n    }\r\n    \r\n    // Overtrick bonuses\r\n    if (result > 0) {\r\n      const overtrickValue = doubled \r\n        ? (vulnerable ? 200 : 100) * (doubled === 'XX' ? 2 : 1)\r\n        : (suit === '♣' || suit === '♦' ? 20 : 30);\r\n      \r\n      score += overtrickValue * result;\r\n    }\r\n    \r\n    // Doubled and redoubled bonuses\r\n    if (doubled === 'X') score += 50;\r\n    if (doubled === 'XX') score += 100;\r\n  } else {\r\n    // Contract went down\r\n    const undertricks = Math.abs(result);\r\n    \r\n    if (!doubled) {\r\n      // Not doubled\r\n      score = -(undertricks * (vulnerable ? 100 : 50));\r\n    } else {\r\n      // Doubled or redoubled\r\n      const multiplier = doubled === 'XX' ? 2 : 1;\r\n      \r\n      if (vulnerable) {\r\n        score = -((300 * multiplier) + ((undertricks - 1) * 300 * multiplier));\r\n      } else {\r\n        // First undertrick\r\n        score = -(100 * multiplier);\r\n        \r\n        // Second and third undertricks\r\n        if (undertricks > 1) {\r\n          score -= Math.min(undertricks - 1, 2) * 200 * multiplier;\r\n        }\r\n        \r\n        // Fourth and subsequent undertricks\r\n        if (undertricks > 3) {\r\n          score -= (undertricks - 3) * 300 * multiplier;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return score;\r\n};\r\n\r\n// Calculate enhanced Bonus Bridge score\r\nexport const calculateBonusBridgeScore = (contractDetails, declarerHCP, defenderHCP, declarerDistPoints) => {\r\n  if (!contractDetails) return { declarerPoints: 0, defenderPoints: 0, details: [] };\r\n  \r\n  // Initialize details array for calculation steps\r\n  const details = [];\r\n  \r\n  // Step 1: Calculate Raw Score and Reduce Scale\r\n  const rawScore = calculateRawBridgeScore(contractDetails);\r\n  let initialPoints = rawScore / 20;\r\n  details.push(`Raw score: ${rawScore} ÷ 20 = ${initialPoints.toFixed(2)} points`);\r\n  \r\n  // Step 2: Calculate HCP Advantage\r\n  const totalHCP = declarerHCP + defenderHCP;\r\n  const declarerHCPPercentage = (declarerHCP / totalHCP) * 100;\r\n  const defenderHCPPercentage = 100 - declarerHCPPercentage;\r\n  const hcpAdvantage = Math.abs(declarerHCPPercentage - defenderHCPPercentage);\r\n  const advantageSide = declarerHCPPercentage > 50 ? \"declarer\" : \"defender\";\r\n  \r\n  details.push(`Declarer HCP: ${declarerHCP} (${declarerHCPPercentage.toFixed(1)}%)`);\r\n  details.push(`Defender HCP: ${defenderHCP} (${defenderHCPPercentage.toFixed(1)}%)`);\r\n  details.push(`HCP Advantage: ${hcpAdvantage.toFixed(1)}% to ${advantageSide}`);\r\n  \r\n  let declarerPoints = initialPoints;\r\n  let defenderPoints = 0;\r\n  \r\n  if (contractDetails.isMade) {\r\n    // Made contracts\r\n    \r\n    // Step 3: Apply HCP Adjustment Based on Contract Type\r\n    let expectedHCP = 21; // Default for part scores\r\n    \r\n    if (contractDetails.level === 3 && contractDetails.suit === 'NT') {\r\n      expectedHCP = expectedHCPByContract.game3NT;\r\n    } else if (contractDetails.level === 4 && (contractDetails.suit === '♥' || contractDetails.suit === '♠')) {\r\n      expectedHCP = expectedHCPByContract.game4Major;\r\n    } else if (contractDetails.level === 5 && (contractDetails.suit === '♣' || contractDetails.suit === '♦')) {\r\n      expectedHCP = expectedHCPByContract.game5Minor;\r\n    } else if (contractDetails.level === 6) {\r\n      expectedHCP = expectedHCPByContract.smallSlam;\r\n    } else if (contractDetails.level === 7) {\r\n      expectedHCP = expectedHCPByContract.grandSlam;\r\n    }\r\n    \r\n    const hcpAdjustment = (declarerHCP - expectedHCP) * 0.75;\r\n    \r\n    if (declarerHCP > expectedHCP) {\r\n      declarerPoints -= hcpAdjustment;\r\n      details.push(`HCP Adjustment: ${declarerHCP} > ${expectedHCP}, -${hcpAdjustment.toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n    } else if (declarerHCP < expectedHCP) {\r\n      declarerPoints += Math.abs(hcpAdjustment);\r\n      details.push(`HCP Adjustment: ${declarerHCP} < ${expectedHCP}, +${Math.abs(hcpAdjustment).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n    } else {\r\n      details.push(`HCP Adjustment: ${declarerHCP} = ${expectedHCP}, no adjustment → ${declarerPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    // Step 4: Calculate Expected Tricks\r\n    const contractExpectedTricks = 6 + contractDetails.level;\r\n    const handExpectedTricks = Math.min(13, 6 + (declarerHCP / 3) + (declarerDistPoints / 4));\r\n    \r\n    details.push(`Contract Expected Tricks: 6 + ${contractDetails.level} = ${contractExpectedTricks}`);\r\n    details.push(`Hand Expected Tricks: 6 + (${declarerHCP} ÷ 3) + (${declarerDistPoints} ÷ 4) = ${handExpectedTricks.toFixed(2)} → ${Math.min(13, Math.round(handExpectedTricks))}`);\r\n    \r\n    // Step 5: Performance Assessment\r\n    const actualTricks = contractDetails.tricks;\r\n    const performanceVariance = actualTricks - contractExpectedTricks;\r\n    \r\n    if (performanceVariance > 0) {\r\n      // Overtricks\r\n      declarerPoints += performanceVariance * 1.5;\r\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = +${performanceVariance} → +${(performanceVariance * 1.5).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n    } else if (performanceVariance < 0) {\r\n      // Failed contract (shouldn't happen in this branch)\r\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = ${performanceVariance} (contract failed)`);\r\n    } else {\r\n      details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = 0 (exactly made)`);\r\n    }\r\n    \r\n    // Hand Potential Performance\r\n    if (handExpectedTricks > contractExpectedTricks) {\r\n      const potentialVariance = actualTricks - handExpectedTricks;\r\n      \r\n      if (potentialVariance < 0) {\r\n        // Underperformance based on hand potential\r\n        declarerPoints -= Math.abs(potentialVariance) * 0.75;\r\n        details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} → -${(Math.abs(potentialVariance) * 0.75).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n      } else {\r\n        details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} (no adjustment)`);\r\n      }\r\n    }\r\n    \r\n    // Step 6: Apply Contract Type Adjustments\r\n    if (isGameContract(contractDetails)) {\r\n      declarerPoints += 2;\r\n      details.push(`Game Contract Bonus: +2 points → ${declarerPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    if (contractDetails.level === 6) {\r\n      declarerPoints += 4;\r\n      details.push(`Small Slam Bonus: +4 points → ${declarerPoints.toFixed(2)} points`);\r\n    } else if (contractDetails.level === 7) {\r\n      declarerPoints += 6;\r\n      details.push(`Grand Slam Bonus: +6 points → ${declarerPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    if (contractDetails.suit === 'NT') {\r\n      declarerPoints += 1;\r\n      details.push(`NT Contract Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    if (performanceVariance >= 4) {\r\n      declarerPoints += 1;\r\n      details.push(`4+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n      \r\n      if (performanceVariance >= 7) {\r\n        declarerPoints += 1;\r\n        details.push(`7+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n    }\r\n    \r\n    // Step 7: Distribution Adjustment (Suit Contracts Only)\r\n    if (contractDetails.suit !== 'NT') {\r\n      let distributionAdjustment = 0;\r\n      \r\n      if (declarerDistPoints >= 7) {\r\n        distributionAdjustment = 3;\r\n      } else if (declarerDistPoints >= 5) {\r\n        distributionAdjustment = 2;\r\n      } else if (declarerDistPoints >= 3) {\r\n        distributionAdjustment = 1;\r\n      }\r\n      \r\n      if (distributionAdjustment > 0) {\r\n        declarerPoints -= distributionAdjustment;\r\n        details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, -${distributionAdjustment} points → ${declarerPoints.toFixed(2)} points`);\r\n      } else {\r\n        details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, no deduction`);\r\n      }\r\n    }\r\n    \r\n    // Step 8: Defender Reward Calculation\r\n    const handExpectedTricksRounded = Math.min(13, Math.round(handExpectedTricks));\r\n    \r\n    if (handExpectedTricksRounded > contractExpectedTricks && actualTricks < handExpectedTricksRounded) {\r\n      const defenderReward = (handExpectedTricksRounded - actualTricks) * 2;\r\n      \r\n      let extraReward = 0;\r\n      if (advantageSide === \"declarer\") {\r\n        extraReward = Math.min(3, hcpAdvantage / 10);\r\n        details.push(`Defender Extra Reward: ${extraReward.toFixed(2)} points (for ${hcpAdvantage.toFixed(1)}% HCP disadvantage)`);\r\n      }\r\n      \r\n      defenderPoints = defenderReward + extraReward;\r\n      details.push(`Defender Reward: (${handExpectedTricksRounded} - ${actualTricks}) × 2 = ${defenderReward} + ${extraReward.toFixed(2)} extra = ${defenderPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    // Step 9: Finalize Scores\r\n    declarerPoints = Math.round(Math.max(1, declarerPoints)); // Minimum 1 point for made contracts\r\n    defenderPoints = Math.round(defenderPoints);\r\n    \r\n  } else {\r\n    // Defeated contracts\r\n    \r\n    // Step 1: Calculate Base Penalty\r\n    const basePenalty = Math.abs(rawScore) / 10;\r\n    defenderPoints = basePenalty;\r\n    details.push(`Base Penalty: |${rawScore}| ÷ 10 = ${basePenalty.toFixed(2)} points`);\r\n    \r\n    // Step 2: Add Contract Level Penalties\r\n    if (isGameContract(contractDetails)) {\r\n      defenderPoints += 3;\r\n      details.push(`Game Contract Penalty: +3 points → ${defenderPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    if (contractDetails.level === 6) {\r\n      defenderPoints += 5;\r\n      details.push(`Small Slam Penalty: +5 points → ${defenderPoints.toFixed(2)} points`);\r\n    } else if (contractDetails.level === 7) {\r\n      defenderPoints += 7;\r\n      details.push(`Grand Slam Penalty: +7 points → ${defenderPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    // Step 3: Calculate Defender Performance Bonus\r\n    if (declarerHCPPercentage > 60) {\r\n      const bonus = (declarerHCPPercentage - 50) / 5;\r\n      defenderPoints += bonus;\r\n      details.push(`Defender HCP Bonus: (${declarerHCPPercentage.toFixed(1)}% - 50) ÷ 5 = +${bonus.toFixed(2)} points → ${defenderPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    if (Math.abs(contractDetails.result) >= 2) {\r\n      defenderPoints += 2;\r\n      details.push(`Down 2+ Tricks Bonus: +2 points → ${defenderPoints.toFixed(2)} points`);\r\n      \r\n      if (Math.abs(contractDetails.result) >= 3) {\r\n        defenderPoints += 1; // Additional +1 for 3+ down\r\n        details.push(`Down 3+ Tricks Bonus: +1 point → ${defenderPoints.toFixed(2)} points`);\r\n      }\r\n    }\r\n    \r\n    // Step 4: Calculate Declarer Consolation\r\n    if (declarerHCPPercentage < 40) {\r\n      declarerPoints = (50 - declarerHCPPercentage) / 10;\r\n      details.push(`Declarer Consolation: (50 - ${declarerHCPPercentage.toFixed(1)}%) ÷ 10 = ${declarerPoints.toFixed(2)} points`);\r\n    }\r\n    \r\n    // Step 5: Finalize Scores\r\n    declarerPoints = Math.round(declarerPoints); // Can be 0\r\n    defenderPoints = Math.round(Math.max(3, defenderPoints)); // Minimum 3 points for defeating contracts\r\n  }\r\n  \r\n  details.push(`Final Declarer Points: ${declarerPoints}`);\r\n  details.push(`Final Defender Points: ${defenderPoints}`);\r\n  \r\n  return { declarerPoints, defenderPoints, details };\r\n};\r\n\r\n// Helper function to determine if a contract is a game contract\r\nexport const isGameContract = (contractDetails) => {\r\n  if (!contractDetails) return false;\r\n  \r\n  return (\r\n    (contractDetails.level === 3 && contractDetails.suit === 'NT') ||\r\n    (contractDetails.level === 4 && (contractDetails.suit === '♥' || contractDetails.suit === '♠')) ||\r\n    (contractDetails.level === 5 && (contractDetails.suit === '♣' || contractDetails.suit === '♦')) ||\r\n    contractDetails.level >= 6\r\n  );\r\n};\r\n\r\n// Parse contract string to get details\r\nexport const parseContract = (contractString, result, tricks, vulnerable) => {\r\n  if (!contractString) return null;\r\n  \r\n  const contractRegex = /(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/;\r\n  const match = contractString.match(contractRegex);\r\n  \r\n  if (!match) return null;\r\n  \r\n  const level = parseInt(match[1]);\r\n  const suit = match[2];\r\n  const declarer = match[3];\r\n  const doubled = match[4];\r\n  \r\n  return {\r\n    level,\r\n    suit,\r\n    declarer,\r\n    doubled,\r\n    isNS: declarer === 'N' || declarer === 'S',\r\n    isNT: suit === 'NT',\r\n    isMajor: suit === '♥' || suit === '♠',\r\n    isMinor: suit === '♣' || suit === '♦',\r\n    isMade: result >= 0,\r\n    tricks: tricks || (6 + level + (result || 0)),\r\n    result: result || 0,\r\n    vulnerable: vulnerable || { ns: false, ew: false }\r\n  };\r\n};\r\n\r\n// Determine vulnerability based on deal number\r\n// Standard bridge vulnerability rotation: None, NS, EW, Both, repeating\r\nexport const determineVulnerability = (dealNumber) => {\r\n  const vulnerabilityPattern = (dealNumber - 1) % 4;\r\n  \r\n  switch (vulnerabilityPattern) {\r\n    case 0: // None\r\n      return { ns: false, ew: false };\r\n    case 1: // NS\r\n      return { ns: true, ew: false };\r\n    case 2: // EW\r\n      return { ns: false, ew: true };\r\n    case 3: // Both\r\n      return { ns: true, ew: true };\r\n    default:\r\n      return { ns: false, ew: false };\r\n  }\r\n};\r\n\r\n// Function to generate a text description of vulnerability\r\nexport const vulnerabilityDescription = (vulnerable) => {\r\n  if (!vulnerable) return \"Not Vulnerable\";\r\n  \r\n  if (vulnerable.ns && vulnerable.ew) {\r\n    return \"Both Vulnerable\";\r\n  } else if (vulnerable.ns) {\r\n    return \"NS Vulnerable\";\r\n  } else if (vulnerable.ew) {\r\n    return \"EW Vulnerable\";\r\n  } else {\r\n    return \"Not Vulnerable\";\r\n  }\r\n};\r\n\r\n// Calculate distribution points\r\nexport const calculateDistributionPoints = (handPattern) => {\r\n  // handPattern should be an array of 4 numbers representing the length of each suit\r\n  if (!handPattern || !Array.isArray(handPattern) || handPattern.length !== 4) {\r\n    return 0;\r\n  }\r\n  \r\n  let points = 0;\r\n  \r\n  // Points for short suits\r\n  handPattern.forEach(suitLength => {\r\n    if (suitLength === 0) points += 3; // Void\r\n    if (suitLength === 1) points += 2; // Singleton\r\n    if (suitLength === 2) points += 1; // Doubleton\r\n  });\r\n  \r\n  // Points for long suits (only count suits of 6+ cards)\r\n  handPattern.forEach(suitLength => {\r\n    if (suitLength >= 6) {\r\n      points += suitLength - 5; // +1 for 6 card suit, +2 for 7 card suit, etc.\r\n    }\r\n  });\r\n  \r\n  return points;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}