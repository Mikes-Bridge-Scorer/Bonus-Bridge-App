{"ast":null,"code":"/**\r\n * Utility functions for managing wake lock\r\n * Wake Lock prevents the device from going to sleep while the app is in use\r\n */\n\n// Store the wake lock reference\nlet wakeLock = null;\n\n/**\r\n * Check if the Wake Lock API is supported by the browser\r\n * @returns {boolean} True if Wake Lock API is supported\r\n */\nexport const isWakeLockSupported = () => {\n  return 'wakeLock' in navigator;\n};\n\n/**\r\n * Request a wake lock to keep the screen awake\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\nexport const requestWakeLock = async () => {\n  // Check if Wake Lock API is supported\n  if (!isWakeLockSupported()) {\n    console.warn('Wake Lock API not supported in this browser');\n    return false;\n  }\n  try {\n    // Request a screen wake lock\n    wakeLock = await navigator.wakeLock.request('screen');\n    console.log('Wake Lock is active');\n\n    // Listen for visibility changes to reacquire wake lock if needed\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return true;\n  } catch (err) {\n    // Handle wake lock request errors\n    console.error(`Failed to request Wake Lock: ${err.message}`);\n    return false;\n  }\n};\n\n/**\r\n * Release the wake lock and allow the screen to sleep again\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\nexport const releaseWakeLock = async () => {\n  // Check if there's an active wake lock\n  if (!wakeLock) {\n    console.warn('No active Wake Lock to release');\n    return false;\n  }\n  try {\n    // Release the wake lock\n    await wakeLock.release();\n    wakeLock = null;\n    console.log('Wake Lock released');\n\n    // Remove the visibilitychange event listener\n    document.removeEventListener('visibilitychange', handleVisibilityChange);\n    return true;\n  } catch (err) {\n    // Handle release errors\n    console.error(`Failed to release Wake Lock: ${err.message}`);\n    return false;\n  }\n};\n\n/**\r\n * Handle visibility change events to reacquire wake lock when tab becomes visible again\r\n */\nconst handleVisibilityChange = async () => {\n  if (wakeLock !== null && document.visibilityState === 'visible') {\n    // Page has become visible again, reacquire the wake lock\n    try {\n      wakeLock = await navigator.wakeLock.request('screen');\n      console.log('Wake Lock reacquired');\n    } catch (err) {\n      console.error(`Failed to reacquire Wake Lock: ${err.message}`);\n    }\n  }\n};\n\n/**\r\n * Get the current wake lock status\r\n * @returns {boolean} True if wake lock is currently active\r\n */\nexport const isWakeLockActive = () => {\n  return wakeLock !== null;\n};","map":{"version":3,"names":["wakeLock","isWakeLockSupported","navigator","requestWakeLock","console","warn","request","log","document","addEventListener","handleVisibilityChange","err","error","message","releaseWakeLock","release","removeEventListener","visibilityState","isWakeLockActive"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/wakeLock.js"],"sourcesContent":["/**\r\n * Utility functions for managing wake lock\r\n * Wake Lock prevents the device from going to sleep while the app is in use\r\n */\r\n\r\n// Store the wake lock reference\r\nlet wakeLock = null;\r\n\r\n/**\r\n * Check if the Wake Lock API is supported by the browser\r\n * @returns {boolean} True if Wake Lock API is supported\r\n */\r\nexport const isWakeLockSupported = () => {\r\n  return 'wakeLock' in navigator;\r\n};\r\n\r\n/**\r\n * Request a wake lock to keep the screen awake\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\r\nexport const requestWakeLock = async () => {\r\n  // Check if Wake Lock API is supported\r\n  if (!isWakeLockSupported()) {\r\n    console.warn('Wake Lock API not supported in this browser');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Request a screen wake lock\r\n    wakeLock = await navigator.wakeLock.request('screen');\r\n    \r\n    console.log('Wake Lock is active');\r\n    \r\n    // Listen for visibility changes to reacquire wake lock if needed\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    // Handle wake lock request errors\r\n    console.error(`Failed to request Wake Lock: ${err.message}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Release the wake lock and allow the screen to sleep again\r\n * @returns {Promise<boolean>} Promise resolving to success status\r\n */\r\nexport const releaseWakeLock = async () => {\r\n  // Check if there's an active wake lock\r\n  if (!wakeLock) {\r\n    console.warn('No active Wake Lock to release');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Release the wake lock\r\n    await wakeLock.release();\r\n    wakeLock = null;\r\n    \r\n    console.log('Wake Lock released');\r\n    \r\n    // Remove the visibilitychange event listener\r\n    document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    // Handle release errors\r\n    console.error(`Failed to release Wake Lock: ${err.message}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Handle visibility change events to reacquire wake lock when tab becomes visible again\r\n */\r\nconst handleVisibilityChange = async () => {\r\n  if (wakeLock !== null && document.visibilityState === 'visible') {\r\n    // Page has become visible again, reacquire the wake lock\r\n    try {\r\n      wakeLock = await navigator.wakeLock.request('screen');\r\n      console.log('Wake Lock reacquired');\r\n    } catch (err) {\r\n      console.error(`Failed to reacquire Wake Lock: ${err.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current wake lock status\r\n * @returns {boolean} True if wake lock is currently active\r\n */\r\nexport const isWakeLockActive = () => {\r\n  return wakeLock !== null;\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,QAAQ,GAAG,IAAI;;AAEnB;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAO,UAAU,IAAIC,SAAS;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC;EACA,IAAI,CAACF,mBAAmB,CAAC,CAAC,EAAE;IAC1BG,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC;IAC3D,OAAO,KAAK;EACd;EAEA,IAAI;IACF;IACAL,QAAQ,GAAG,MAAME,SAAS,CAACF,QAAQ,CAACM,OAAO,CAAC,QAAQ,CAAC;IAErDF,OAAO,CAACG,GAAG,CAAC,qBAAqB,CAAC;;IAElC;IACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAEC,sBAAsB,CAAC;IAErE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ;IACAP,OAAO,CAACQ,KAAK,CAAC,gCAAgCD,GAAG,CAACE,OAAO,EAAE,CAAC;IAC5D,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC;EACA,IAAI,CAACd,QAAQ,EAAE;IACbI,OAAO,CAACC,IAAI,CAAC,gCAAgC,CAAC;IAC9C,OAAO,KAAK;EACd;EAEA,IAAI;IACF;IACA,MAAML,QAAQ,CAACe,OAAO,CAAC,CAAC;IACxBf,QAAQ,GAAG,IAAI;IAEfI,OAAO,CAACG,GAAG,CAAC,oBAAoB,CAAC;;IAEjC;IACAC,QAAQ,CAACQ,mBAAmB,CAAC,kBAAkB,EAAEN,sBAAsB,CAAC;IAExE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ;IACAP,OAAO,CAACQ,KAAK,CAAC,gCAAgCD,GAAG,CAACE,OAAO,EAAE,CAAC;IAC5D,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAMH,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAIV,QAAQ,KAAK,IAAI,IAAIQ,QAAQ,CAACS,eAAe,KAAK,SAAS,EAAE;IAC/D;IACA,IAAI;MACFjB,QAAQ,GAAG,MAAME,SAAS,CAACF,QAAQ,CAACM,OAAO,CAAC,QAAQ,CAAC;MACrDF,OAAO,CAACG,GAAG,CAAC,sBAAsB,CAAC;IACrC,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,kCAAkCD,GAAG,CAACE,OAAO,EAAE,CAAC;IAChE;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAOlB,QAAQ,KAAK,IAAI;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}