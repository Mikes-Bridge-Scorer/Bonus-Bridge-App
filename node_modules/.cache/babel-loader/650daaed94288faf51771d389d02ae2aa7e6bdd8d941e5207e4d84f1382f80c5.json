{"ast":null,"code":"// File: src/utils/storage.js\n/**\r\n * Utility functions for game state persistence using localStorage\r\n */\n\n// Local storage key for game state\nconst STORAGE_KEY = 'bonusbridge_game_state';\nconst VERSION = '1.0';\n\n/**\r\n * Save the current game state to localStorage\r\n * @param {Object} gameState - The current game state\r\n */\nexport const saveGameState = gameState => {\n  try {\n    const data = {\n      version: VERSION,\n      timestamp: new Date().toISOString(),\n      state: gameState\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n    return true;\n  } catch (error) {\n    console.error('Error saving game state:', error);\n    return false;\n  }\n};\n\n/**\r\n * Load the game state from localStorage\r\n * @returns {Object|null} The saved game state or null if not found/error\r\n */\nexport const loadGameState = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n      return null;\n    }\n    const parsedData = JSON.parse(data);\n\n    // Check if version matches\n    if (parsedData.version !== VERSION) {\n      console.warn('Game state version mismatch. Starting fresh.');\n      return null;\n    }\n    return parsedData.state;\n  } catch (error) {\n    console.error('Error loading game state:', error);\n    return null;\n  }\n};\n\n/**\r\n * Clear the saved game state\r\n */\nexport const clearGameState = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n    return true;\n  } catch (error) {\n    console.error('Error clearing game state:', error);\n    return false;\n  }\n};\n\n/**\r\n * Check if there is a saved game state available\r\n * @returns {Boolean} True if a saved game exists\r\n */\nexport const hasSavedGame = () => {\n  return !!localStorage.getItem(STORAGE_KEY);\n};\n\n/**\r\n * Get the total number of deals played across all games\r\n * (For tracking the 100-deal evaluation limit)\r\n * @returns {Number} Total deal count\r\n */\nexport const getTotalDealCount = () => {\n  try {\n    // Get from dedicated counter\n    const totalCount = localStorage.getItem('bonusbridge_total_deals');\n    return totalCount ? parseInt(totalCount, 10) : 0;\n  } catch (error) {\n    console.error('Error getting total deal count:', error);\n    return 0;\n  }\n};\n\n/**\r\n * Update the total deal count\r\n * @param {Number} count - The new total deal count\r\n */\nexport const updateTotalDealCount = count => {\n  try {\n    localStorage.setItem('bonusbridge_total_deals', count.toString());\n    return true;\n  } catch (error) {\n    console.error('Error updating total deal count:', error);\n    return false;\n  }\n};\n\n/**\r\n * Check if the user has reached the deal limit for the evaluation version\r\n * @returns {Boolean} True if limit reached\r\n */\nexport const hasReachedDealLimit = () => {\n  const MAX_DEALS = 100;\n  const totalDeals = getTotalDealCount();\n  return totalDeals >= MAX_DEALS;\n};","map":{"version":3,"names":["STORAGE_KEY","VERSION","saveGameState","gameState","data","version","timestamp","Date","toISOString","state","localStorage","setItem","JSON","stringify","error","console","loadGameState","getItem","parsedData","parse","warn","clearGameState","removeItem","hasSavedGame","getTotalDealCount","totalCount","parseInt","updateTotalDealCount","count","toString","hasReachedDealLimit","MAX_DEALS","totalDeals"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/storage.js"],"sourcesContent":["// File: src/utils/storage.js\r\n/**\r\n * Utility functions for game state persistence using localStorage\r\n */\r\n\r\n// Local storage key for game state\r\nconst STORAGE_KEY = 'bonusbridge_game_state';\r\nconst VERSION = '1.0';\r\n\r\n/**\r\n * Save the current game state to localStorage\r\n * @param {Object} gameState - The current game state\r\n */\r\nexport const saveGameState = (gameState) => {\r\n  try {\r\n    const data = {\r\n      version: VERSION,\r\n      timestamp: new Date().toISOString(),\r\n      state: gameState\r\n    };\r\n    \r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving game state:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Load the game state from localStorage\r\n * @returns {Object|null} The saved game state or null if not found/error\r\n */\r\nexport const loadGameState = () => {\r\n  try {\r\n    const data = localStorage.getItem(STORAGE_KEY);\r\n    \r\n    if (!data) {\r\n      return null;\r\n    }\r\n    \r\n    const parsedData = JSON.parse(data);\r\n    \r\n    // Check if version matches\r\n    if (parsedData.version !== VERSION) {\r\n      console.warn('Game state version mismatch. Starting fresh.');\r\n      return null;\r\n    }\r\n    \r\n    return parsedData.state;\r\n  } catch (error) {\r\n    console.error('Error loading game state:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Clear the saved game state\r\n */\r\nexport const clearGameState = () => {\r\n  try {\r\n    localStorage.removeItem(STORAGE_KEY);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing game state:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if there is a saved game state available\r\n * @returns {Boolean} True if a saved game exists\r\n */\r\nexport const hasSavedGame = () => {\r\n  return !!localStorage.getItem(STORAGE_KEY);\r\n};\r\n\r\n/**\r\n * Get the total number of deals played across all games\r\n * (For tracking the 100-deal evaluation limit)\r\n * @returns {Number} Total deal count\r\n */\r\nexport const getTotalDealCount = () => {\r\n  try {\r\n    // Get from dedicated counter\r\n    const totalCount = localStorage.getItem('bonusbridge_total_deals');\r\n    return totalCount ? parseInt(totalCount, 10) : 0;\r\n  } catch (error) {\r\n    console.error('Error getting total deal count:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Update the total deal count\r\n * @param {Number} count - The new total deal count\r\n */\r\nexport const updateTotalDealCount = (count) => {\r\n  try {\r\n    localStorage.setItem('bonusbridge_total_deals', count.toString());\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating total deal count:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if the user has reached the deal limit for the evaluation version\r\n * @returns {Boolean} True if limit reached\r\n */\r\nexport const hasReachedDealLimit = () => {\r\n  const MAX_DEALS = 100;\r\n  const totalDeals = getTotalDealCount();\r\n  return totalDeals >= MAX_DEALS;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}