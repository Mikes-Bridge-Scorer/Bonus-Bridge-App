{"ast":null,"code":"/**\r\n * Utility functions for bridge scoring calculations\r\n *//**\r\n * Parse a contract string into its components\r\n * @param {string} contractString - The contract string (e.g., \"4♥ N\")\r\n * @param {number} result - The result (positive for made contracts, negative for defeated)\r\n * @param {Object} vulnerable - Vulnerability object with ns and ew properties\r\n * @returns {Object} Contract details\r\n */export const parseContract=(contractString,result,vulnerable)=>{if(!contractString)return null;const contractMatch=contractString.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);if(!contractMatch)return null;const level=parseInt(contractMatch[1]);const suit=contractMatch[2];const declarer=contractMatch[3];const doubled=contractMatch[4]||'';const isNS=declarer==='N'||declarer==='S';const vulnerableNS=(vulnerable===null||vulnerable===void 0?void 0:vulnerable.ns)||false;const vulnerableEW=(vulnerable===null||vulnerable===void 0?void 0:vulnerable.ew)||false;const declarerVulnerable=isNS?vulnerableNS:vulnerableEW;const requiredTricks=level+6;const actualTricks=requiredTricks+(result||0);const madeContract=result>=0;return{level,suit,declarer,doubled,isNS,declarerVulnerable,requiredTricks,actualTricks,madeContract,result:result||0};};/**\r\n * Calculate standard bridge score\r\n * @param {Object} contractDetails - Contract details object from parseContract\r\n * @returns {Object} Scoring object with nsPoints and ewPoints\r\n */export const calculateBridgeScore=contractDetails=>{if(!contractDetails)return{nsPoints:0,ewPoints:0};const{level,suit,isNS,declarerVulnerable,madeContract,result,doubled}=contractDetails;let score=0;// Calculate score for made contracts\nif(madeContract){// Base trick score\nlet trickScore=0;if(suit==='♣'||suit==='♦'){// Minor suits: 20 points per trick\ntrickScore=level*20;}else if(suit==='♥'||suit==='♠'){// Major suits: 30 points per trick\ntrickScore=level*30;}else if(suit==='NT'){// No Trump: 40 for first trick, 30 for additional tricks\ntrickScore=40+(level-1)*30;}// Apply doubling if applicable\nif(doubled==='X'){trickScore*=2;}else if(doubled==='XX'){trickScore*=4;}score+=trickScore;// Add bonus for game contracts (300 non-vul, 500 vul)\nif(trickScore>=100){score+=declarerVulnerable?500:300;}else{// Partial contract bonus\nscore+=50;}// Slam bonuses\nif(level===6){// Small slam bonus\nscore+=declarerVulnerable?750:500;}else if(level===7){// Grand slam bonus\nscore+=declarerVulnerable?1500:1000;}// Doubled/redoubled bonus (\"insult bonus\")\nif(doubled==='X'){score+=50;}else if(doubled==='XX'){score+=100;}// Overtrick points\nif(result>0){let overtrickPoints=0;if(doubled==='X'){// Doubled overtricks\novertrickPoints=result*(declarerVulnerable?200:100);}else if(doubled==='XX'){// Redoubled overtricks\novertrickPoints=result*(declarerVulnerable?400:200);}else{// Undoubled overtricks\nif(suit==='♣'||suit==='♦'){overtrickPoints=result*20;}else if(suit==='♥'||suit==='♠'){overtrickPoints=result*30;}else{// NT\novertrickPoints=result*30;}}score+=overtrickPoints;}}else{// Score for defeated contracts\nlet undertrickPoints=0;if(doubled==='X'){// Doubled undertricks\nif(declarerVulnerable){// Vulnerable doubled undertricks\nundertrickPoints=200+(Math.abs(result)-1)*300;}else{// Non-vulnerable doubled undertricks\nundertrickPoints=100+(Math.abs(result)>1?200:0)+(Math.abs(result)>2?(Math.abs(result)-2)*300:0);}}else if(doubled==='XX'){// Redoubled undertricks (double the doubled undertricks)\nif(declarerVulnerable){undertrickPoints=400+(Math.abs(result)-1)*600;}else{undertrickPoints=200+(Math.abs(result)>1?400:0)+(Math.abs(result)>2?(Math.abs(result)-2)*600:0);}}else{// Undoubled undertricks\nundertrickPoints=Math.abs(result)*(declarerVulnerable?100:50);}score=-undertrickPoints;}// Assign points to the appropriate side\nif(isNS){return{nsPoints:madeContract?score:0,ewPoints:madeContract?0:-score};}else{return{nsPoints:madeContract?0:-score,ewPoints:madeContract?score:0};}};/**\r\n * Generate a readable vulnerability description\r\n * @param {Object} vulnerable - Vulnerability object with ns and ew properties\r\n * @returns {string} Description of vulnerability\r\n */export const vulnerabilityDescription=vulnerable=>{if(!vulnerable)return\"None Vulnerable\";const nsVul=vulnerable.ns||false;const ewVul=vulnerable.ew||false;if(nsVul&&ewVul)return\"All Vulnerable\";if(nsVul)return\"NS Vulnerable\";if(ewVul)return\"EW Vulnerable\";return\"None Vulnerable\";};/**\r\n * Determine vulnerability based on deal number\r\n * @param {number} dealNumber - Current deal number\r\n * @returns {Object} Vulnerability object with ns and ew properties\r\n */export const determineVulnerability=dealNumber=>{if(!dealNumber)return{ns:false,ew:false};// Standard bridge vulnerability rotation based on deal number\nconst vulPattern=(dealNumber-1)%16;switch(vulPattern){case 0:case 7:case 10:case 13:return{ns:false,ew:false};// None Vulnerable\ncase 1:case 4:case 11:case 14:return{ns:true,ew:false};// NS Vulnerable\ncase 2:case 5:case 8:case 15:return{ns:false,ew:true};// EW Vulnerable\ncase 3:case 6:case 9:case 12:return{ns:true,ew:true};// Both Vulnerable\ndefault:return{ns:false,ew:false};// Default to None Vulnerable\n}};/**\r\n * Determine dealer based on deal number\r\n * @param {number} dealNumber - Current deal number\r\n * @returns {string} Dealer position (North, East, South, West)\r\n */export const determineDealer=dealNumber=>{const positions=[\"North\",\"East\",\"South\",\"West\"];const index=(dealNumber-1)%4;return positions[index];};/**\r\n * Check if a contract is a game contract\r\n * @param {Object} contractDetails - Contract details from parseContract\r\n * @returns {boolean} True if the contract is a game contract\r\n */export const isGameContract=contractDetails=>{if(!contractDetails)return false;const{level,suit}=contractDetails;return level===3&&suit==='NT'||level===4&&(suit==='♥'||suit==='♠')||level===5&&(suit==='♣'||suit==='♦')||level>=6;};/**\r\n * Calculate bonus bridge score based on the enhanced scoring system\r\n * @param {Object} contractDetails - Contract details from parseContract\r\n * @param {Object} handAnalysis - Hand analysis data (HCP, distribution, etc.)\r\n * @returns {Object} Bonus bridge scoring object\r\n */export const calculateBonusBridgeScore=(contractDetails,handAnalysis)=>{if(!contractDetails||!handAnalysis)return{nsPoints:0,ewPoints:0};const{level,suit,isNS,declarerVulnerable,madeContract,result,doubled,actualTricks,requiredTricks}=contractDetails;const{totalHCP,singletons,voids,longSuits}=handAnalysis;let declarerPoints=0;let defenderPoints=0;// Get standard bridge score for raw score calculation\nconst standardScore=calculateBridgeScore(contractDetails);// Extract raw score (absolute value)\nconst rawScore=Math.abs(madeContract?isNS?standardScore.nsPoints:standardScore.ewPoints:isNS?standardScore.ewPoints:standardScore.nsPoints);if(madeContract){// ***** STEP 1: Calculate Raw Score and Reduce Scale *****\nconst initialPoints=rawScore/20;// ***** STEP 2: Calculate HCP Advantage *****\nconst declarerHCPPercentage=totalHCP/40*100;const defenderHCPPercentage=100-declarerHCPPercentage;const hcpAdvantage=Math.abs(declarerHCPPercentage-defenderHCPPercentage);const advantageSide=declarerHCPPercentage>50?\"declarer\":\"defender\";// ***** STEP 3: Apply HCP Adjustment Based on Contract Type *****\nlet expectedHCP;// Determine Expected HCP based on contract type\nif(level<=2){// Part Scores (1-2 level)\nexpectedHCP=21;}else if(level===3&&suit==='NT'){// 3NT Game\nexpectedHCP=25;}else if(level===4&&(suit==='♥'||suit==='♠')){// 4♥/♠ Game\nexpectedHCP=24;}else if(level===5&&(suit==='♣'||suit==='♦')){// 5♣/♦ Game\nexpectedHCP=27;}else if(level===6){// Small Slams (6 level)\nexpectedHCP=30;}else if(level===7){// Grand Slams (7 level)\nexpectedHCP=32;}else{// Other levels\nexpectedHCP=21+level*1.5;}// Calculate adjustment\nconst hcpAdjustment=(totalHCP-expectedHCP)*0.75;let adjustedPoints=initialPoints;if(totalHCP>expectedHCP){// If Declarer HCP > Expected HCP: Subtract adjustment\nadjustedPoints-=hcpAdjustment;}else if(totalHCP<expectedHCP){// If Declarer HCP < Expected HCP: Add adjustment\nadjustedPoints+=Math.abs(hcpAdjustment);}// No adjustment if Declarer HCP = Expected HCP\n// ***** STEP 4: Calculate Expected Tricks *****\nconst contractExpectedTricks=requiredTricks;const distributionPoints=voids*3+singletons*2+longSuits;const handExpectedTricks=Math.min(13,6+Math.floor(totalHCP/3)+Math.floor(distributionPoints/4));// ***** STEP 5: Performance Assessment *****\nlet performancePoints=adjustedPoints;// For Contract Performance\nconst performanceVariance=actualTricks-contractExpectedTricks;if(performanceVariance>0){// If Variance > 0 (overtricks): Add (Variance × 1.5) points\nperformancePoints+=performanceVariance*1.5;}// For Hand Potential Performance (only if Hand Expected > Contract Expected)\nif(handExpectedTricks>contractExpectedTricks){const potentialVariance=actualTricks-handExpectedTricks;if(potentialVariance<0){// If Potential Variance < 0 (underperformance): Subtract (|Potential Variance| × 0.75) points\nperformancePoints-=Math.abs(potentialVariance)*0.75;}}// ***** STEP 6: Apply Contract Type Adjustments *****\nlet contractPoints=performancePoints;// Check if it's a Game contract\nconst isGameContractVal=isGameContract(contractDetails);if(isGameContractVal){// For Game contracts\ncontractPoints+=2;}if(level===6){// For Small Slam contracts\ncontractPoints+=4;}else if(level===7){// For Grand Slam contracts\ncontractPoints+=6;}if(suit==='NT'){// For NT contracts\ncontractPoints+=1;}const overtricks=actualTricks-contractExpectedTricks;if(overtricks>=4){// For contracts with 4+ overtricks\ncontractPoints+=1;if(overtricks>=7){// For contracts with 7+ overtricks\ncontractPoints+=2;}}// ***** STEP 7: Distribution Adjustment (Suit Contracts Only) *****\nlet finalDeclarerPoints=contractPoints;if(suit!=='NT'){// Only apply for suit contracts\nif(distributionPoints>=7){finalDeclarerPoints-=3;}else if(distributionPoints>=5){finalDeclarerPoints-=2;}else if(distributionPoints>=3){finalDeclarerPoints-=1;}// 1-2 dist points: No deduction\n}// ***** STEP 8: Defender Reward Calculation *****\nif(handExpectedTricks>contractExpectedTricks&&actualTricks<handExpectedTricks){// Defender Reward = (Hand Expected Tricks - Actual Tricks) × 2\nconst defenderReward=(handExpectedTricks-actualTricks)*2;// Extra reward if defending at disadvantage\nconst extraReward=Math.min(3,hcpAdvantage/10);defenderPoints=defenderReward+(advantageSide===\"declarer\"?extraReward:0);}// ***** STEP 9: Finalize Scores *****\ndeclarerPoints=Math.max(1,Math.round(finalDeclarerPoints));// Minimum declarer score for made contracts: 1 point\ndefenderPoints=Math.round(defenderPoints);}else{// ***** SCORING FOR DEFEATED CONTRACTS *****\n// ***** STEP 1: Calculate Base Penalty *****\nconst basePenalty=rawScore/10;// ***** STEP 2: Add Contract Level Penalties *****\nlet levelPenalties=0;// Check if it's a Game contract\nconst isGameContractVal=isGameContract(contractDetails);if(isGameContractVal){// For defeated Game contracts\nlevelPenalties+=3;}if(level===6){// For defeated Small Slams\nlevelPenalties+=5;}else if(level===7){// For defeated Grand Slams\nlevelPenalties+=7;}// ***** STEP 3: Calculate Defender Performance Bonus *****\nlet performanceBonus=0;const declarerHCPPercentage=totalHCP/40*100;if(declarerHCPPercentage>60){// If Declarer HCP% > 60%\nperformanceBonus+=(declarerHCPPercentage-50)/5;}if(Math.abs(result)>=2){// If contract defeated by 2+ tricks\nperformanceBonus+=2;if(Math.abs(result)>=3){// If contract defeated by 3+ tricks\nperformanceBonus+=3;}}// ***** STEP 4: Calculate Declarer Consolation (Optional) *****\nlet consolationPoints=0;if(declarerHCPPercentage<40){// If Declarer HCP% < 40%\nconsolationPoints=(50-declarerHCPPercentage)/10;}// ***** STEP 5: Finalize Scores for Defeated Contracts *****\nconst totalDefenderPoints=basePenalty+levelPenalties+performanceBonus;defenderPoints=Math.max(3,Math.round(totalDefenderPoints));// Minimum defender score: 3 points\ndeclarerPoints=Math.round(consolationPoints);}// Return final scores for NS and EW\nif(isNS){return{nsPoints:madeContract?declarerPoints:declarerPoints,ewPoints:madeContract?defenderPoints:defenderPoints,rawScore};}else{return{nsPoints:madeContract?defenderPoints:defenderPoints,ewPoints:madeContract?declarerPoints:declarerPoints,rawScore};}};","map":{"version":3,"names":["parseContract","contractString","result","vulnerable","contractMatch","match","level","parseInt","suit","declarer","doubled","isNS","vulnerableNS","ns","vulnerableEW","ew","declarerVulnerable","requiredTricks","actualTricks","madeContract","calculateBridgeScore","contractDetails","nsPoints","ewPoints","score","trickScore","overtrickPoints","undertrickPoints","Math","abs","vulnerabilityDescription","nsVul","ewVul","determineVulnerability","dealNumber","vulPattern","determineDealer","positions","index","isGameContract","calculateBonusBridgeScore","handAnalysis","totalHCP","singletons","voids","longSuits","declarerPoints","defenderPoints","standardScore","rawScore","initialPoints","declarerHCPPercentage","defenderHCPPercentage","hcpAdvantage","advantageSide","expectedHCP","hcpAdjustment","adjustedPoints","contractExpectedTricks","distributionPoints","handExpectedTricks","min","floor","performancePoints","performanceVariance","potentialVariance","contractPoints","isGameContractVal","overtricks","finalDeclarerPoints","defenderReward","extraReward","max","round","basePenalty","levelPenalties","performanceBonus","consolationPoints","totalDefenderPoints"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/scoring.js"],"sourcesContent":["/**\r\n * Utility functions for bridge scoring calculations\r\n */\r\n\r\n/**\r\n * Parse a contract string into its components\r\n * @param {string} contractString - The contract string (e.g., \"4♥ N\")\r\n * @param {number} result - The result (positive for made contracts, negative for defeated)\r\n * @param {Object} vulnerable - Vulnerability object with ns and ew properties\r\n * @returns {Object} Contract details\r\n */\r\nexport const parseContract = (contractString, result, vulnerable) => {\r\n  if (!contractString) return null;\r\n  \r\n  const contractMatch = contractString.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n  if (!contractMatch) return null;\r\n  \r\n  const level = parseInt(contractMatch[1]);\r\n  const suit = contractMatch[2];\r\n  const declarer = contractMatch[3];\r\n  const doubled = contractMatch[4] || '';\r\n  \r\n  const isNS = declarer === 'N' || declarer === 'S';\r\n  const vulnerableNS = vulnerable?.ns || false;\r\n  const vulnerableEW = vulnerable?.ew || false;\r\n  \r\n  const declarerVulnerable = isNS ? vulnerableNS : vulnerableEW;\r\n  const requiredTricks = level + 6;\r\n  const actualTricks = requiredTricks + (result || 0);\r\n  const madeContract = result >= 0;\r\n  \r\n  return {\r\n    level,\r\n    suit,\r\n    declarer,\r\n    doubled,\r\n    isNS,\r\n    declarerVulnerable,\r\n    requiredTricks,\r\n    actualTricks,\r\n    madeContract,\r\n    result: result || 0\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate standard bridge score\r\n * @param {Object} contractDetails - Contract details object from parseContract\r\n * @returns {Object} Scoring object with nsPoints and ewPoints\r\n */\r\nexport const calculateBridgeScore = (contractDetails) => {\r\n  if (!contractDetails) return { nsPoints: 0, ewPoints: 0 };\r\n  \r\n  const {\r\n    level,\r\n    suit,\r\n    isNS,\r\n    declarerVulnerable,\r\n    madeContract,\r\n    result,\r\n    doubled\r\n  } = contractDetails;\r\n  \r\n  let score = 0;\r\n  \r\n  // Calculate score for made contracts\r\n  if (madeContract) {\r\n    // Base trick score\r\n    let trickScore = 0;\r\n    \r\n    if (suit === '♣' || suit === '♦') {\r\n      // Minor suits: 20 points per trick\r\n      trickScore = level * 20;\r\n    } else if (suit === '♥' || suit === '♠') {\r\n      // Major suits: 30 points per trick\r\n      trickScore = level * 30;\r\n    } else if (suit === 'NT') {\r\n      // No Trump: 40 for first trick, 30 for additional tricks\r\n      trickScore = 40 + (level - 1) * 30;\r\n    }\r\n    \r\n    // Apply doubling if applicable\r\n    if (doubled === 'X') {\r\n      trickScore *= 2;\r\n    } else if (doubled === 'XX') {\r\n      trickScore *= 4;\r\n    }\r\n    \r\n    score += trickScore;\r\n    \r\n    // Add bonus for game contracts (300 non-vul, 500 vul)\r\n    if (trickScore >= 100) {\r\n      score += declarerVulnerable ? 500 : 300;\r\n    } else {\r\n      // Partial contract bonus\r\n      score += 50;\r\n    }\r\n    \r\n    // Slam bonuses\r\n    if (level === 6) {\r\n      // Small slam bonus\r\n      score += declarerVulnerable ? 750 : 500;\r\n    } else if (level === 7) {\r\n      // Grand slam bonus\r\n      score += declarerVulnerable ? 1500 : 1000;\r\n    }\r\n    \r\n    // Doubled/redoubled bonus (\"insult bonus\")\r\n    if (doubled === 'X') {\r\n      score += 50;\r\n    } else if (doubled === 'XX') {\r\n      score += 100;\r\n    }\r\n    \r\n    // Overtrick points\r\n    if (result > 0) {\r\n      let overtrickPoints = 0;\r\n      \r\n      if (doubled === 'X') {\r\n        // Doubled overtricks\r\n        overtrickPoints = result * (declarerVulnerable ? 200 : 100);\r\n      } else if (doubled === 'XX') {\r\n        // Redoubled overtricks\r\n        overtrickPoints = result * (declarerVulnerable ? 400 : 200);\r\n      } else {\r\n        // Undoubled overtricks\r\n        if (suit === '♣' || suit === '♦') {\r\n          overtrickPoints = result * 20;\r\n        } else if (suit === '♥' || suit === '♠') {\r\n          overtrickPoints = result * 30;\r\n        } else { // NT\r\n          overtrickPoints = result * 30;\r\n        }\r\n      }\r\n      \r\n      score += overtrickPoints;\r\n    }\r\n  } else {\r\n    // Score for defeated contracts\r\n    let undertrickPoints = 0;\r\n    \r\n    if (doubled === 'X') {\r\n      // Doubled undertricks\r\n      if (declarerVulnerable) {\r\n        // Vulnerable doubled undertricks\r\n        undertrickPoints = 200 + (Math.abs(result) - 1) * 300;\r\n      } else {\r\n        // Non-vulnerable doubled undertricks\r\n        undertrickPoints = 100 + (Math.abs(result) > 1 ? 200 : 0) + \r\n                           (Math.abs(result) > 2 ? (Math.abs(result) - 2) * 300 : 0);\r\n      }\r\n    } else if (doubled === 'XX') {\r\n      // Redoubled undertricks (double the doubled undertricks)\r\n      if (declarerVulnerable) {\r\n        undertrickPoints = 400 + (Math.abs(result) - 1) * 600;\r\n      } else {\r\n        undertrickPoints = 200 + (Math.abs(result) > 1 ? 400 : 0) + \r\n                           (Math.abs(result) > 2 ? (Math.abs(result) - 2) * 600 : 0);\r\n      }\r\n    } else {\r\n      // Undoubled undertricks\r\n      undertrickPoints = Math.abs(result) * (declarerVulnerable ? 100 : 50);\r\n    }\r\n    \r\n    score = -undertrickPoints;\r\n  }\r\n  \r\n  // Assign points to the appropriate side\r\n  if (isNS) {\r\n    return {\r\n      nsPoints: madeContract ? score : 0,\r\n      ewPoints: madeContract ? 0 : -score\r\n    };\r\n  } else {\r\n    return {\r\n      nsPoints: madeContract ? 0 : -score,\r\n      ewPoints: madeContract ? score : 0\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Generate a readable vulnerability description\r\n * @param {Object} vulnerable - Vulnerability object with ns and ew properties\r\n * @returns {string} Description of vulnerability\r\n */\r\nexport const vulnerabilityDescription = (vulnerable) => {\r\n  if (!vulnerable) return \"None Vulnerable\";\r\n  \r\n  const nsVul = vulnerable.ns || false;\r\n  const ewVul = vulnerable.ew || false;\r\n  \r\n  if (nsVul && ewVul) return \"All Vulnerable\";\r\n  if (nsVul) return \"NS Vulnerable\";\r\n  if (ewVul) return \"EW Vulnerable\";\r\n  return \"None Vulnerable\";\r\n};\r\n\r\n/**\r\n * Determine vulnerability based on deal number\r\n * @param {number} dealNumber - Current deal number\r\n * @returns {Object} Vulnerability object with ns and ew properties\r\n */\r\nexport const determineVulnerability = (dealNumber) => {\r\n  if (!dealNumber) return { ns: false, ew: false };\r\n  \r\n  // Standard bridge vulnerability rotation based on deal number\r\n  const vulPattern = (dealNumber - 1) % 16;\r\n  \r\n  switch (vulPattern) {\r\n    case 0:\r\n    case 7:\r\n    case 10:\r\n    case 13:\r\n      return { ns: false, ew: false }; // None Vulnerable\r\n    case 1:\r\n    case 4:\r\n    case 11:\r\n    case 14:\r\n      return { ns: true, ew: false }; // NS Vulnerable\r\n    case 2:\r\n    case 5:\r\n    case 8:\r\n    case 15:\r\n      return { ns: false, ew: true }; // EW Vulnerable\r\n    case 3:\r\n    case 6:\r\n    case 9:\r\n    case 12:\r\n      return { ns: true, ew: true }; // Both Vulnerable\r\n    default:\r\n      return { ns: false, ew: false }; // Default to None Vulnerable\r\n  }\r\n};\r\n\r\n/**\r\n * Determine dealer based on deal number\r\n * @param {number} dealNumber - Current deal number\r\n * @returns {string} Dealer position (North, East, South, West)\r\n */\r\nexport const determineDealer = (dealNumber) => {\r\n  const positions = [\"North\", \"East\", \"South\", \"West\"];\r\n  const index = (dealNumber - 1) % 4;\r\n  return positions[index];\r\n};\r\n\r\n/**\r\n * Check if a contract is a game contract\r\n * @param {Object} contractDetails - Contract details from parseContract\r\n * @returns {boolean} True if the contract is a game contract\r\n */\r\nexport const isGameContract = (contractDetails) => {\r\n  if (!contractDetails) return false;\r\n  \r\n  const { level, suit } = contractDetails;\r\n  \r\n  return (\r\n    (level === 3 && suit === 'NT') ||\r\n    (level === 4 && (suit === '♥' || suit === '♠')) ||\r\n    (level === 5 && (suit === '♣' || suit === '♦')) ||\r\n    level >= 6\r\n  );\r\n};\r\n\r\n/**\r\n * Calculate bonus bridge score based on the enhanced scoring system\r\n * @param {Object} contractDetails - Contract details from parseContract\r\n * @param {Object} handAnalysis - Hand analysis data (HCP, distribution, etc.)\r\n * @returns {Object} Bonus bridge scoring object\r\n */\r\nexport const calculateBonusBridgeScore = (contractDetails, handAnalysis) => {\r\n  if (!contractDetails || !handAnalysis) return { nsPoints: 0, ewPoints: 0 };\r\n  \r\n  const {\r\n    level,\r\n    suit,\r\n    isNS,\r\n    declarerVulnerable,\r\n    madeContract,\r\n    result,\r\n    doubled,\r\n    actualTricks,\r\n    requiredTricks\r\n  } = contractDetails;\r\n  \r\n  const {\r\n    totalHCP,\r\n    singletons,\r\n    voids,\r\n    longSuits\r\n  } = handAnalysis;\r\n  \r\n  let declarerPoints = 0;\r\n  let defenderPoints = 0;\r\n  \r\n  // Get standard bridge score for raw score calculation\r\n  const standardScore = calculateBridgeScore(contractDetails);\r\n  \r\n  // Extract raw score (absolute value)\r\n  const rawScore = Math.abs(madeContract ? \r\n                           (isNS ? standardScore.nsPoints : standardScore.ewPoints) : \r\n                           (isNS ? standardScore.ewPoints : standardScore.nsPoints));\r\n  \r\n  if (madeContract) {\r\n    // ***** STEP 1: Calculate Raw Score and Reduce Scale *****\r\n    const initialPoints = rawScore / 20;\r\n    \r\n    // ***** STEP 2: Calculate HCP Advantage *****\r\n    const declarerHCPPercentage = (totalHCP / 40) * 100;\r\n    const defenderHCPPercentage = 100 - declarerHCPPercentage;\r\n    const hcpAdvantage = Math.abs(declarerHCPPercentage - defenderHCPPercentage);\r\n    const advantageSide = declarerHCPPercentage > 50 ? \"declarer\" : \"defender\";\r\n    \r\n    // ***** STEP 3: Apply HCP Adjustment Based on Contract Type *****\r\n    let expectedHCP;\r\n    \r\n    // Determine Expected HCP based on contract type\r\n    if (level <= 2) {\r\n      // Part Scores (1-2 level)\r\n      expectedHCP = 21;\r\n    } else if (level === 3 && suit === 'NT') {\r\n      // 3NT Game\r\n      expectedHCP = 25;\r\n    } else if (level === 4 && (suit === '♥' || suit === '♠')) {\r\n      // 4♥/♠ Game\r\n      expectedHCP = 24;\r\n    } else if (level === 5 && (suit === '♣' || suit === '♦')) {\r\n      // 5♣/♦ Game\r\n      expectedHCP = 27;\r\n    } else if (level === 6) {\r\n      // Small Slams (6 level)\r\n      expectedHCP = 30;\r\n    } else if (level === 7) {\r\n      // Grand Slams (7 level)\r\n      expectedHCP = 32;\r\n    } else {\r\n      // Other levels\r\n      expectedHCP = 21 + (level * 1.5);\r\n    }\r\n    \r\n    // Calculate adjustment\r\n    const hcpAdjustment = (totalHCP - expectedHCP) * 0.75;\r\n    let adjustedPoints = initialPoints;\r\n    \r\n    if (totalHCP > expectedHCP) {\r\n      // If Declarer HCP > Expected HCP: Subtract adjustment\r\n      adjustedPoints -= hcpAdjustment;\r\n    } else if (totalHCP < expectedHCP) {\r\n      // If Declarer HCP < Expected HCP: Add adjustment\r\n      adjustedPoints += Math.abs(hcpAdjustment);\r\n    }\r\n    // No adjustment if Declarer HCP = Expected HCP\r\n    \r\n    // ***** STEP 4: Calculate Expected Tricks *****\r\n    const contractExpectedTricks = requiredTricks;\r\n    const distributionPoints = (voids * 3) + (singletons * 2) + longSuits;\r\n    const handExpectedTricks = Math.min(13, 6 + Math.floor(totalHCP / 3) + Math.floor(distributionPoints / 4));\r\n    \r\n    // ***** STEP 5: Performance Assessment *****\r\n    let performancePoints = adjustedPoints;\r\n    \r\n    // For Contract Performance\r\n    const performanceVariance = actualTricks - contractExpectedTricks;\r\n    if (performanceVariance > 0) {\r\n      // If Variance > 0 (overtricks): Add (Variance × 1.5) points\r\n      performancePoints += (performanceVariance * 1.5);\r\n    }\r\n    \r\n    // For Hand Potential Performance (only if Hand Expected > Contract Expected)\r\n    if (handExpectedTricks > contractExpectedTricks) {\r\n      const potentialVariance = actualTricks - handExpectedTricks;\r\n      if (potentialVariance < 0) {\r\n        // If Potential Variance < 0 (underperformance): Subtract (|Potential Variance| × 0.75) points\r\n        performancePoints -= (Math.abs(potentialVariance) * 0.75);\r\n      }\r\n    }\r\n    \r\n    // ***** STEP 6: Apply Contract Type Adjustments *****\r\n    let contractPoints = performancePoints;\r\n    \r\n    // Check if it's a Game contract\r\n    const isGameContractVal = isGameContract(contractDetails);\r\n    \r\n    if (isGameContractVal) {\r\n      // For Game contracts\r\n      contractPoints += 2;\r\n    }\r\n    \r\n    if (level === 6) {\r\n      // For Small Slam contracts\r\n      contractPoints += 4;\r\n    } else if (level === 7) {\r\n      // For Grand Slam contracts\r\n      contractPoints += 6;\r\n    }\r\n    \r\n    if (suit === 'NT') {\r\n      // For NT contracts\r\n      contractPoints += 1;\r\n    }\r\n    \r\n    const overtricks = actualTricks - contractExpectedTricks;\r\n    \r\n    if (overtricks >= 4) {\r\n      // For contracts with 4+ overtricks\r\n      contractPoints += 1;\r\n      \r\n      if (overtricks >= 7) {\r\n        // For contracts with 7+ overtricks\r\n        contractPoints += 2;\r\n      }\r\n    }\r\n    \r\n    // ***** STEP 7: Distribution Adjustment (Suit Contracts Only) *****\r\n    let finalDeclarerPoints = contractPoints;\r\n    \r\n    if (suit !== 'NT') {\r\n      // Only apply for suit contracts\r\n      if (distributionPoints >= 7) {\r\n        finalDeclarerPoints -= 3;\r\n      } else if (distributionPoints >= 5) {\r\n        finalDeclarerPoints -= 2;\r\n      } else if (distributionPoints >= 3) {\r\n        finalDeclarerPoints -= 1;\r\n      }\r\n      // 1-2 dist points: No deduction\r\n    }\r\n    \r\n    // ***** STEP 8: Defender Reward Calculation *****\r\n    if (handExpectedTricks > contractExpectedTricks && \r\n        actualTricks < handExpectedTricks) {\r\n      // Defender Reward = (Hand Expected Tricks - Actual Tricks) × 2\r\n      const defenderReward = (handExpectedTricks - actualTricks) * 2;\r\n      \r\n      // Extra reward if defending at disadvantage\r\n      const extraReward = Math.min(3, hcpAdvantage / 10);\r\n      \r\n      defenderPoints = defenderReward + (advantageSide === \"declarer\" ? extraReward : 0);\r\n    }\r\n    \r\n    // ***** STEP 9: Finalize Scores *****\r\n    declarerPoints = Math.max(1, Math.round(finalDeclarerPoints)); // Minimum declarer score for made contracts: 1 point\r\n    defenderPoints = Math.round(defenderPoints);\r\n    \r\n  } else {\r\n    // ***** SCORING FOR DEFEATED CONTRACTS *****\r\n    \r\n    // ***** STEP 1: Calculate Base Penalty *****\r\n    const basePenalty = rawScore / 10;\r\n    \r\n    // ***** STEP 2: Add Contract Level Penalties *****\r\n    let levelPenalties = 0;\r\n    \r\n    // Check if it's a Game contract\r\n    const isGameContractVal = isGameContract(contractDetails);\r\n    \r\n    if (isGameContractVal) {\r\n      // For defeated Game contracts\r\n      levelPenalties += 3;\r\n    }\r\n    \r\n    if (level === 6) {\r\n      // For defeated Small Slams\r\n      levelPenalties += 5;\r\n    } else if (level === 7) {\r\n      // For defeated Grand Slams\r\n      levelPenalties += 7;\r\n    }\r\n    \r\n    // ***** STEP 3: Calculate Defender Performance Bonus *****\r\n    let performanceBonus = 0;\r\n    \r\n    const declarerHCPPercentage = (totalHCP / 40) * 100;\r\n    \r\n    if (declarerHCPPercentage > 60) {\r\n      // If Declarer HCP% > 60%\r\n      performanceBonus += (declarerHCPPercentage - 50) / 5;\r\n    }\r\n    \r\n    if (Math.abs(result) >= 2) {\r\n      // If contract defeated by 2+ tricks\r\n      performanceBonus += 2;\r\n      \r\n      if (Math.abs(result) >= 3) {\r\n        // If contract defeated by 3+ tricks\r\n        performanceBonus += 3;\r\n      }\r\n    }\r\n    \r\n    // ***** STEP 4: Calculate Declarer Consolation (Optional) *****\r\n    let consolationPoints = 0;\r\n    \r\n    if (declarerHCPPercentage < 40) {\r\n      // If Declarer HCP% < 40%\r\n      consolationPoints = (50 - declarerHCPPercentage) / 10;\r\n    }\r\n    \r\n    // ***** STEP 5: Finalize Scores for Defeated Contracts *****\r\n    const totalDefenderPoints = basePenalty + levelPenalties + performanceBonus;\r\n    defenderPoints = Math.max(3, Math.round(totalDefenderPoints)); // Minimum defender score: 3 points\r\n    declarerPoints = Math.round(consolationPoints);\r\n  }\r\n  \r\n  // Return final scores for NS and EW\r\n  if (isNS) {\r\n    return {\r\n      nsPoints: madeContract ? declarerPoints : declarerPoints,\r\n      ewPoints: madeContract ? defenderPoints : defenderPoints,\r\n      rawScore\r\n    };\r\n  } else {\r\n    return {\r\n      nsPoints: madeContract ? defenderPoints : defenderPoints,\r\n      ewPoints: madeContract ? declarerPoints : declarerPoints,\r\n      rawScore\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}