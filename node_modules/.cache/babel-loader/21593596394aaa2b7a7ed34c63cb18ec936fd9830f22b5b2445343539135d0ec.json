{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult,\n  contract\n}) => {\n  _s();\n  const [selectedButton, setSelectedButton] = useState(null);\n\n  // Debug logging for props\n  useEffect(() => {\n    console.log(\"TrickInput props:\", {\n      initialResult,\n      contract\n    });\n  }, []);\n\n  // Reset the selected button when contract changes\n  useEffect(() => {\n    console.log(\"TrickInput: contract changed to:\", contract);\n    setSelectedButton(null);\n  }, [contract]);\n\n  // Initialize from props if provided\n  useEffect(() => {\n    console.log(\"TrickInput: initialResult changed to:\", initialResult);\n\n    // If initialResult is null, reset the selection\n    if (initialResult === null) {\n      console.log(\"initialResult is null, resetting selection\");\n      setSelectedButton(null);\n      return;\n    }\n\n    // If we have a valid initialResult, select the appropriate button\n    if (initialResult !== undefined) {\n      // Parse the contract to determine the required tricks\n      if (contract) {\n        const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n        if (match) {\n          const level = parseInt(match[1]);\n          const requiredTricks = level + 6;\n\n          // Calculate the tricks taken based on the required tricks and result\n          const tricksTaken = requiredTricks + initialResult;\n          console.log(\"Setting tricksTaken to:\", tricksTaken, \"(required:\", requiredTricks, \"+ result:\", initialResult, \")\");\n          setSelectedButton(tricksTaken);\n        } else {\n          console.log(\"Could not parse contract:\", contract);\n        }\n      } else {\n        console.log(\"No contract available\");\n      }\n    }\n  }, [initialResult, contract]);\n\n  // Create an array of possible tricks (0-13)\n  const possibleTricks = Array.from({\n    length: 14\n  }, (_, i) => i);\n\n  // Handle trick button click\n  const handleTrickClick = tricks => {\n    console.log(\"Trick button clicked:\", tricks);\n    setSelectedButton(tricks);\n\n    // Only calculate result if we have a valid contract\n    if (contract) {\n      const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n      if (match) {\n        const level = parseInt(match[1]);\n        const requiredTricks = level + 6;\n\n        // Calculate result (positive if over, negative if under)\n        const result = tricks - requiredTricks;\n        console.log(\"Calculated result:\", result, \"(tricks:\", tricks, \"- required:\", requiredTricks, \")\");\n\n        // Pass the result and tricks back to parent\n        onTrickChange(result, tricks);\n      } else {\n        console.log(\"Could not parse contract for trick calculation:\", contract);\n      }\n    } else {\n      console.log(\"No contract available for trick calculation\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trick-input\",\n    children: possibleTricks.map(tricks => {\n      const isSelected = selectedButton === tricks;\n      console.log(`Rendering trick button ${tricks}, selected:`, isSelected);\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: isSelected ? 'selected' : '',\n        onClick: () => handleTrickClick(tricks),\n        children: tricks\n      }, tricks, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"Q+MpJyldcVBKHMftEZ2OQp8Fq40=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TrickInput","onTrickChange","initialResult","contract","_s","selectedButton","setSelectedButton","console","log","undefined","match","level","parseInt","requiredTricks","tricksTaken","possibleTricks","Array","from","length","_","i","handleTrickClick","tricks","result","className","children","map","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TrickInput = ({ onTrickChange, initialResult, contract }) => {\r\n  const [selectedButton, setSelectedButton] = useState(null);\r\n  \r\n  // Debug logging for props\r\n  useEffect(() => {\r\n    console.log(\"TrickInput props:\", { initialResult, contract });\r\n  }, []);\r\n  \r\n  // Reset the selected button when contract changes\r\n  useEffect(() => {\r\n    console.log(\"TrickInput: contract changed to:\", contract);\r\n    setSelectedButton(null);\r\n  }, [contract]);\r\n  \r\n  // Initialize from props if provided\r\n  useEffect(() => {\r\n    console.log(\"TrickInput: initialResult changed to:\", initialResult);\r\n    \r\n    // If initialResult is null, reset the selection\r\n    if (initialResult === null) {\r\n      console.log(\"initialResult is null, resetting selection\");\r\n      setSelectedButton(null);\r\n      return;\r\n    }\r\n    \r\n    // If we have a valid initialResult, select the appropriate button\r\n    if (initialResult !== undefined) {\r\n      // Parse the contract to determine the required tricks\r\n      if (contract) {\r\n        const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n        if (match) {\r\n          const level = parseInt(match[1]);\r\n          const requiredTricks = level + 6;\r\n          \r\n          // Calculate the tricks taken based on the required tricks and result\r\n          const tricksTaken = requiredTricks + initialResult;\r\n          console.log(\"Setting tricksTaken to:\", tricksTaken, \"(required:\", requiredTricks, \"+ result:\", initialResult, \")\");\r\n          setSelectedButton(tricksTaken);\r\n        } else {\r\n          console.log(\"Could not parse contract:\", contract);\r\n        }\r\n      } else {\r\n        console.log(\"No contract available\");\r\n      }\r\n    }\r\n  }, [initialResult, contract]);\r\n  \r\n  // Create an array of possible tricks (0-13)\r\n  const possibleTricks = Array.from({ length: 14 }, (_, i) => i);\r\n  \r\n  // Handle trick button click\r\n  const handleTrickClick = (tricks) => {\r\n    console.log(\"Trick button clicked:\", tricks);\r\n    setSelectedButton(tricks);\r\n    \r\n    // Only calculate result if we have a valid contract\r\n    if (contract) {\r\n      const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n      if (match) {\r\n        const level = parseInt(match[1]);\r\n        const requiredTricks = level + 6;\r\n        \r\n        // Calculate result (positive if over, negative if under)\r\n        const result = tricks - requiredTricks;\r\n        console.log(\"Calculated result:\", result, \"(tricks:\", tricks, \"- required:\", requiredTricks, \")\");\r\n        \r\n        // Pass the result and tricks back to parent\r\n        onTrickChange(result, tricks);\r\n      } else {\r\n        console.log(\"Could not parse contract for trick calculation:\", contract);\r\n      }\r\n    } else {\r\n      console.log(\"No contract available for trick calculation\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"trick-input\">\r\n      {possibleTricks.map(tricks => {\r\n        const isSelected = selectedButton === tricks;\r\n        console.log(`Rendering trick button ${tricks}, selected:`, isSelected);\r\n        return (\r\n          <button\r\n            key={tricks}\r\n            className={isSelected ? 'selected' : ''}\r\n            onClick={() => handleTrickClick(tricks)}\r\n          >\r\n            {tricks}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,aAAa;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;MAAEN,aAAa;MAAEC;IAAS,CAAC,CAAC;EAC/D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAN,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEL,QAAQ,CAAC;IACzDG,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;;EAEd;EACAN,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEN,aAAa,CAAC;;IAEnE;IACA,IAAIA,aAAa,KAAK,IAAI,EAAE;MAC1BK,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzDF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACF;;IAEA;IACA,IAAIJ,aAAa,KAAKO,SAAS,EAAE;MAC/B;MACA,IAAIN,QAAQ,EAAE;QACZ,MAAMO,KAAK,GAAGP,QAAQ,CAACO,KAAK,CAAC,oCAAoC,CAAC;QAClE,IAAIA,KAAK,EAAE;UACT,MAAMC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UAChC,MAAMG,cAAc,GAAGF,KAAK,GAAG,CAAC;;UAEhC;UACA,MAAMG,WAAW,GAAGD,cAAc,GAAGX,aAAa;UAClDK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,WAAW,EAAE,YAAY,EAAED,cAAc,EAAE,WAAW,EAAEX,aAAa,EAAE,GAAG,CAAC;UAClHI,iBAAiB,CAACQ,WAAW,CAAC;QAChC,CAAC,MAAM;UACLP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,QAAQ,CAAC;QACpD;MACF,CAAC,MAAM;QACLI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC;IACF;EACF,CAAC,EAAE,CAACN,aAAa,EAAEC,QAAQ,CAAC,CAAC;;EAE7B;EACA,MAAMY,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;;EAE9D;EACA,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;IACnCf,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEc,MAAM,CAAC;IAC5ChB,iBAAiB,CAACgB,MAAM,CAAC;;IAEzB;IACA,IAAInB,QAAQ,EAAE;MACZ,MAAMO,KAAK,GAAGP,QAAQ,CAACO,KAAK,CAAC,oCAAoC,CAAC;MAClE,IAAIA,KAAK,EAAE;QACT,MAAMC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC,MAAMG,cAAc,GAAGF,KAAK,GAAG,CAAC;;QAEhC;QACA,MAAMY,MAAM,GAAGD,MAAM,GAAGT,cAAc;QACtCN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEe,MAAM,EAAE,UAAU,EAAED,MAAM,EAAE,aAAa,EAAET,cAAc,EAAE,GAAG,CAAC;;QAEjG;QACAZ,aAAa,CAACsB,MAAM,EAAED,MAAM,CAAC;MAC/B,CAAC,MAAM;QACLf,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEL,QAAQ,CAAC;MAC1E;IACF,CAAC,MAAM;MACLI,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC5D;EACF,CAAC;EAED,oBACET,OAAA;IAAKyB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBV,cAAc,CAACW,GAAG,CAACJ,MAAM,IAAI;MAC5B,MAAMK,UAAU,GAAGtB,cAAc,KAAKiB,MAAM;MAC5Cf,OAAO,CAACC,GAAG,CAAC,0BAA0Bc,MAAM,aAAa,EAAEK,UAAU,CAAC;MACtE,oBACE5B,OAAA;QAEEyB,SAAS,EAAEG,UAAU,GAAG,UAAU,GAAG,EAAG;QACxCC,OAAO,EAAEA,CAAA,KAAMP,gBAAgB,CAACC,MAAM,CAAE;QAAAG,QAAA,EAEvCH;MAAM,GAJFA,MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKL,CAAC;IAEb,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA7FIJ,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AA+FhB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}