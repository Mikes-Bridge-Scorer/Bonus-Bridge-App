{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TrickInput.css'; // Keep importing this to maintain other styles\n\n/**\r\n * TrickInput Component for Bridge Game\r\n * Allows selecting the number of tricks taken by declarer\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult,\n  contract\n}) => {\n  _s();\n  // State for selected tricks\n  const [selectedTricks, setSelectedTricks] = useState(null);\n\n  // Calculate required tricks based on contract\n  const getRequiredTricks = () => {\n    if (!contract) return 0;\n    const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n    if (!contractMatch) return 0;\n    const level = parseInt(contractMatch[1]);\n    return level + 6; // Required tricks = level + 6\n  };\n\n  // Reset trick selection when contract changes\n  useEffect(() => {\n    setSelectedTricks(null);\n  }, [contract]);\n\n  // Set initial value if provided\n  useEffect(() => {\n    if (initialResult !== null && contract) {\n      const requiredTricks = getRequiredTricks();\n      const actualTricks = requiredTricks + initialResult;\n      setSelectedTricks(actualTricks);\n    }\n  }, [initialResult, contract]);\n\n  // Handle trick selection\n  const handleTrickSelect = tricks => {\n    setSelectedTricks(tricks);\n\n    // Calculate result based on required tricks\n    const requiredTricks = getRequiredTricks();\n    const result = tricks - requiredTricks;\n\n    // Notify parent component\n    onTrickChange(result, tricks);\n  };\n\n  // Define styles inline to override any external CSS\n  const containerStyle = {\n    width: '100%',\n    padding: '10px 0'\n  };\n  const requiredTricksStyle = {\n    display: 'inline-block',\n    fontSize: '14px',\n    color: '#1e5c8b',\n    marginBottom: '10px',\n    fontWeight: 'bold',\n    backgroundColor: '#f2f8ff',\n    padding: '8px 12px',\n    borderRadius: '4px',\n    border: '1px solid #d0e1f9'\n  };\n  const buttonGridStyle = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(3, 1fr)',\n    gap: '8px',\n    padding: '0',\n    marginBottom: '20px'\n  };\n\n  // Base button style\n  const buttonBaseStyle = {\n    height: '50px',\n    fontSize: '18px',\n    fontWeight: 'bold',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    border: '1px solid #ddd',\n    borderRadius: '6px',\n    backgroundColor: '#f9e8e8',\n    cursor: 'pointer',\n    padding: '0',\n    margin: '0'\n  };\n  const buttonSelectedStyle = {\n    ...buttonBaseStyle,\n    backgroundColor: '#2e8bc0',\n    color: 'white',\n    border: '2px solid #1e5c8b',\n    boxShadow: '0 0 0 1px white inset'\n  };\n  const buttonBelowRequiredStyle = {\n    ...buttonBaseStyle,\n    backgroundColor: '#ffe0e0',\n    border: '1px solid #ffb0b0'\n  };\n  const buttonDisabledStyle = {\n    ...buttonBaseStyle,\n    opacity: 0.6,\n    cursor: 'not-allowed'\n  };\n  const pleaseSelectStyle = {\n    height: '80px',\n    backgroundColor: '#f9f9f9',\n    border: '1px dashed #ccc',\n    borderRadius: '6px',\n    fontSize: '14px',\n    color: '#888',\n    textAlign: 'center',\n    fontStyle: 'italic',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    lineHeight: '1.3',\n    padding: '10px'\n  };\n\n  // Generate trick buttons (0-13) with inline styles\n  const renderTrickButtons = () => {\n    const requiredTricks = getRequiredTricks();\n    const buttons = [];\n\n    // Create buttons for tricks 0-13\n    for (let i = 0; i <= 13; i++) {\n      // Determine button style based on selection and required tricks\n      let currentStyle = buttonBaseStyle;\n      if (selectedTricks === i) {\n        currentStyle = buttonSelectedStyle;\n      } else if (i < requiredTricks) {\n        currentStyle = buttonBelowRequiredStyle;\n      }\n      if (!contract) {\n        currentStyle = buttonDisabledStyle;\n      }\n      buttons.push(/*#__PURE__*/_jsxDEV(\"button\", {\n        style: currentStyle,\n        onClick: () => handleTrickSelect(i),\n        disabled: !contract,\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this));\n    }\n    return buttons;\n  };\n  const requiredTricks = getRequiredTricks();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: contract ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: requiredTricksStyle,\n        children: [\"Required tricks: \", requiredTricks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: buttonGridStyle,\n        children: renderTrickButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: pleaseSelectStyle,\n      children: [\"Please select\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 24\n      }, this), \"a contract\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 40\n      }, this), \"first\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"VNL+SogF4VMa80Azjgb5rnO6UTU=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TrickInput","onTrickChange","initialResult","contract","_s","selectedTricks","setSelectedTricks","getRequiredTricks","contractMatch","match","level","parseInt","requiredTricks","actualTricks","handleTrickSelect","tricks","result","containerStyle","width","padding","requiredTricksStyle","display","fontSize","color","marginBottom","fontWeight","backgroundColor","borderRadius","border","buttonGridStyle","gridTemplateColumns","gap","buttonBaseStyle","height","justifyContent","alignItems","cursor","margin","buttonSelectedStyle","boxShadow","buttonBelowRequiredStyle","buttonDisabledStyle","opacity","pleaseSelectStyle","textAlign","fontStyle","lineHeight","renderTrickButtons","buttons","i","currentStyle","push","style","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrickInput.css'; // Keep importing this to maintain other styles\r\n\r\n/**\r\n * TrickInput Component for Bridge Game\r\n * Allows selecting the number of tricks taken by declarer\r\n */\r\nconst TrickInput = ({ onTrickChange, initialResult, contract }) => {\r\n  // State for selected tricks\r\n  const [selectedTricks, setSelectedTricks] = useState(null);\r\n  \r\n  // Calculate required tricks based on contract\r\n  const getRequiredTricks = () => {\r\n    if (!contract) return 0;\r\n    \r\n    const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n    if (!contractMatch) return 0;\r\n    \r\n    const level = parseInt(contractMatch[1]);\r\n    return level + 6; // Required tricks = level + 6\r\n  };\r\n  \r\n  // Reset trick selection when contract changes\r\n  useEffect(() => {\r\n    setSelectedTricks(null);\r\n  }, [contract]);\r\n  \r\n  // Set initial value if provided\r\n  useEffect(() => {\r\n    if (initialResult !== null && contract) {\r\n      const requiredTricks = getRequiredTricks();\r\n      const actualTricks = requiredTricks + initialResult;\r\n      setSelectedTricks(actualTricks);\r\n    }\r\n  }, [initialResult, contract]);\r\n  \r\n  // Handle trick selection\r\n  const handleTrickSelect = (tricks) => {\r\n    setSelectedTricks(tricks);\r\n    \r\n    // Calculate result based on required tricks\r\n    const requiredTricks = getRequiredTricks();\r\n    const result = tricks - requiredTricks;\r\n    \r\n    // Notify parent component\r\n    onTrickChange(result, tricks);\r\n  };\r\n  \r\n  // Define styles inline to override any external CSS\r\n  const containerStyle = {\r\n    width: '100%',\r\n    padding: '10px 0'\r\n  };\r\n  \r\n  const requiredTricksStyle = {\r\n    display: 'inline-block',\r\n    fontSize: '14px',\r\n    color: '#1e5c8b',\r\n    marginBottom: '10px',\r\n    fontWeight: 'bold',\r\n    backgroundColor: '#f2f8ff',\r\n    padding: '8px 12px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #d0e1f9'\r\n  };\r\n  \r\n  const buttonGridStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(3, 1fr)',\r\n    gap: '8px',\r\n    padding: '0',\r\n    marginBottom: '20px'\r\n  };\r\n  \r\n  // Base button style\r\n  const buttonBaseStyle = {\r\n    height: '50px',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '6px',\r\n    backgroundColor: '#f9e8e8',\r\n    cursor: 'pointer',\r\n    padding: '0',\r\n    margin: '0'\r\n  };\r\n  \r\n  const buttonSelectedStyle = {\r\n    ...buttonBaseStyle,\r\n    backgroundColor: '#2e8bc0',\r\n    color: 'white',\r\n    border: '2px solid #1e5c8b',\r\n    boxShadow: '0 0 0 1px white inset'\r\n  };\r\n  \r\n  const buttonBelowRequiredStyle = {\r\n    ...buttonBaseStyle,\r\n    backgroundColor: '#ffe0e0',\r\n    border: '1px solid #ffb0b0'\r\n  };\r\n  \r\n  const buttonDisabledStyle = {\r\n    ...buttonBaseStyle,\r\n    opacity: 0.6,\r\n    cursor: 'not-allowed'\r\n  };\r\n  \r\n  const pleaseSelectStyle = {\r\n    height: '80px',\r\n    backgroundColor: '#f9f9f9',\r\n    border: '1px dashed #ccc',\r\n    borderRadius: '6px',\r\n    fontSize: '14px',\r\n    color: '#888',\r\n    textAlign: 'center',\r\n    fontStyle: 'italic',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    lineHeight: '1.3',\r\n    padding: '10px'\r\n  };\r\n  \r\n  // Generate trick buttons (0-13) with inline styles\r\n  const renderTrickButtons = () => {\r\n    const requiredTricks = getRequiredTricks();\r\n    const buttons = [];\r\n    \r\n    // Create buttons for tricks 0-13\r\n    for (let i = 0; i <= 13; i++) {\r\n      // Determine button style based on selection and required tricks\r\n      let currentStyle = buttonBaseStyle;\r\n      \r\n      if (selectedTricks === i) {\r\n        currentStyle = buttonSelectedStyle;\r\n      } else if (i < requiredTricks) {\r\n        currentStyle = buttonBelowRequiredStyle;\r\n      }\r\n      \r\n      if (!contract) {\r\n        currentStyle = buttonDisabledStyle;\r\n      }\r\n      \r\n      buttons.push(\r\n        <button\r\n          key={i}\r\n          style={currentStyle}\r\n          onClick={() => handleTrickSelect(i)}\r\n          disabled={!contract}\r\n        >\r\n          {i}\r\n        </button>\r\n      );\r\n    }\r\n    \r\n    return buttons;\r\n  };\r\n  \r\n  const requiredTricks = getRequiredTricks();\r\n  \r\n  return (\r\n    <div style={containerStyle}>\r\n      {contract ? (\r\n        <>\r\n          <div style={requiredTricksStyle}>\r\n            Required tricks: {requiredTricks}\r\n          </div>\r\n          <div style={buttonGridStyle}>\r\n            {renderTrickButtons()}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div style={pleaseSelectStyle}>\r\n          Please select<br />a contract<br />first\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}