{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\ScoreAdjustment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScoreAdjustment = ({\n  gameState,\n  onSaveScore,\n  onNextDeal,\n  onNewGame\n}) => {\n  _s();\n  const [declarerHCP, setDeclarerHCP] = useState(0);\n  const [defenderHCP, setDefenderHCP] = useState(0);\n  const [declarerDistPoints, setDeclarerDistPoints] = useState(0);\n  const [adjustedScores, setAdjustedScores] = useState({\n    declarerPoints: 0,\n    defenderPoints: 0\n  });\n  const [calculationDetails, setCalculationDetails] = useState([]);\n\n  // Expected HCP by contract type\n  const expectedHCPByContract = {\n    partScore: 21,\n    game3NT: 25,\n    game4Major: 24,\n    game5Minor: 27,\n    smallSlam: 30,\n    grandSlam: 32\n  };\n\n  // Extract contract details\n  const getContractDetails = () => {\n    var _gameState$currentDea;\n    if (!(gameState !== null && gameState !== void 0 && (_gameState$currentDea = gameState.currentDeal) !== null && _gameState$currentDea !== void 0 && _gameState$currentDea.contract)) return null;\n    const contractRegex = /(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/;\n    const match = gameState.currentDeal.contract.match(contractRegex);\n    if (!match) return null;\n    return {\n      level: parseInt(match[1]),\n      suit: match[2],\n      declarer: match[3],\n      doubled: match[4],\n      isNS: match[3] === 'N' || match[3] === 'S',\n      isNT: match[2] === 'NT',\n      isMajor: match[2] === '♥' || match[2] === '♠',\n      isMinor: match[2] === '♣' || match[2] === '♦',\n      isMade: gameState.currentDeal.result >= 0,\n      tricks: gameState.currentDeal.tricks || 6 + parseInt(match[1]) + (gameState.currentDeal.result || 0),\n      result: gameState.currentDeal.result || 0,\n      vul: gameState.currentDeal.vulnerable\n    };\n  };\n\n  // Determine if contract is a game contract\n  const isGameContract = contractDetails => {\n    if (!contractDetails) return false;\n    return contractDetails.level === 3 && contractDetails.isNT || contractDetails.level === 4 && contractDetails.isMajor || contractDetails.level === 5 && contractDetails.isMinor || contractDetails.level >= 6;\n  };\n\n  // Calculate raw bridge score\n  const calculateRawBridgeScore = contractDetails => {\n    if (!contractDetails) return 0;\n    const {\n      level,\n      suit,\n      doubled,\n      isMade,\n      result,\n      vul\n    } = contractDetails;\n    let score = 0;\n    if (isMade) {\n      // Trick score\n      const trickValue = suit === '♣' || suit === '♦' ? 20 : 30;\n      const firstTrickValue = suit === 'NT' ? 40 : trickValue;\n\n      // Calculate trick score\n      score = firstTrickValue + (level - 1) * trickValue;\n\n      // Apply doubling\n      if (doubled === 'X') score *= 2;\n      if (doubled === 'XX') score *= 4;\n\n      // Game and slam bonuses\n      if (score >= 100) {\n        // Game bonus\n        score += vul ? 500 : 300;\n      } else {\n        // Part score bonus\n        score += 50;\n      }\n\n      // Slam bonuses\n      if (level === 6) {\n        score += vul ? 750 : 500; // Small slam\n      } else if (level === 7) {\n        score += vul ? 1500 : 1000; // Grand slam\n      }\n\n      // Overtrick bonuses\n      if (result > 0) {\n        const overtrickValue = doubled ? (vul ? 200 : 100) * (doubled === 'XX' ? 2 : 1) : suit === '♣' || suit === '♦' ? 20 : 30;\n        score += overtrickValue * result;\n      }\n\n      // Doubled and redoubled bonuses\n      if (doubled === 'X') score += 50;\n      if (doubled === 'XX') score += 100;\n    } else {\n      // Contract went down\n      const undertricks = Math.abs(result);\n      if (!doubled) {\n        // Not doubled\n        score = -(undertricks * (vul ? 100 : 50));\n      } else {\n        // Doubled or redoubled\n        const multiplier = doubled === 'XX' ? 2 : 1;\n        if (vul) {\n          score = -(300 * multiplier + (undertricks - 1) * 300 * multiplier);\n        } else {\n          // First undertrick\n          score = -(100 * multiplier);\n\n          // Second and third undertricks\n          if (undertricks > 1) {\n            score -= Math.min(undertricks - 1, 2) * 200 * multiplier;\n          }\n\n          // Fourth and subsequent undertricks\n          if (undertricks > 3) {\n            score -= (undertricks - 3) * 300 * multiplier;\n          }\n        }\n      }\n    }\n    return score;\n  };\n\n  // Calculate enhanced bonus bridge scoring\n  const calculateBonusBridgeScore = () => {\n    const contractDetails = getContractDetails();\n    if (!contractDetails) return {\n      declarerPoints: 0,\n      defenderPoints: 0\n    };\n\n    // Reset calculation details\n    const details = [];\n\n    // Step 1: Calculate Raw Score and Reduce Scale\n    const rawScore = calculateRawBridgeScore(contractDetails);\n    let initialPoints = rawScore / 20;\n    details.push(`Raw score: ${rawScore} ÷ 20 = ${initialPoints.toFixed(2)} points`);\n\n    // Step 2: Calculate HCP Advantage\n    const totalHCP = declarerHCP + defenderHCP;\n    const declarerHCPPercentage = declarerHCP / totalHCP * 100;\n    const defenderHCPPercentage = 100 - declarerHCPPercentage;\n    const hcpAdvantage = Math.abs(declarerHCPPercentage - defenderHCPPercentage);\n    const advantageSide = declarerHCPPercentage > 50 ? \"declarer\" : \"defender\";\n    details.push(`Declarer HCP: ${declarerHCP} (${declarerHCPPercentage.toFixed(1)}%)`);\n    details.push(`Defender HCP: ${defenderHCP} (${defenderHCPPercentage.toFixed(1)}%)`);\n    details.push(`HCP Advantage: ${hcpAdvantage.toFixed(1)}% to ${advantageSide}`);\n    let declarerPoints = initialPoints;\n    let defenderPoints = 0;\n    if (contractDetails.isMade) {\n      // Made contracts\n\n      // Step 3: Apply HCP Adjustment Based on Contract Type\n      let expectedHCP = 21; // Default for part scores\n\n      if (contractDetails.level === 3 && contractDetails.isNT) {\n        expectedHCP = expectedHCPByContract.game3NT;\n      } else if (contractDetails.level === 4 && contractDetails.isMajor) {\n        expectedHCP = expectedHCPByContract.game4Major;\n      } else if (contractDetails.level === 5 && contractDetails.isMinor) {\n        expectedHCP = expectedHCPByContract.game5Minor;\n      } else if (contractDetails.level === 6) {\n        expectedHCP = expectedHCPByContract.smallSlam;\n      } else if (contractDetails.level === 7) {\n        expectedHCP = expectedHCPByContract.grandSlam;\n      }\n      const hcpAdjustment = (declarerHCP - expectedHCP) * 0.75;\n      if (declarerHCP > expectedHCP) {\n        declarerPoints -= hcpAdjustment;\n        details.push(`HCP Adjustment: ${declarerHCP} > ${expectedHCP}, -${hcpAdjustment.toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n      } else if (declarerHCP < expectedHCP) {\n        declarerPoints += Math.abs(hcpAdjustment);\n        details.push(`HCP Adjustment: ${declarerHCP} < ${expectedHCP}, +${Math.abs(hcpAdjustment).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n      } else {\n        details.push(`HCP Adjustment: ${declarerHCP} = ${expectedHCP}, no adjustment → ${declarerPoints.toFixed(2)} points`);\n      }\n\n      // Step 4: Calculate Expected Tricks\n      const contractExpectedTricks = 6 + contractDetails.level;\n      const handExpectedTricks = Math.min(13, 6 + declarerHCP / 3 + declarerDistPoints / 4);\n      details.push(`Contract Expected Tricks: 6 + ${contractDetails.level} = ${contractExpectedTricks}`);\n      details.push(`Hand Expected Tricks: 6 + (${declarerHCP} ÷ 3) + (${declarerDistPoints} ÷ 4) = ${handExpectedTricks.toFixed(2)} → ${Math.min(13, Math.round(handExpectedTricks))}`);\n\n      // Step 5: Performance Assessment\n      const actualTricks = contractDetails.tricks;\n      const performanceVariance = actualTricks - contractExpectedTricks;\n      if (performanceVariance > 0) {\n        // Overtricks\n        declarerPoints += performanceVariance * 1.5;\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = +${performanceVariance} → +${(performanceVariance * 1.5).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n      } else if (performanceVariance < 0) {\n        // Failed contract (shouldn't happen in this branch)\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = ${performanceVariance} (contract failed)`);\n      } else {\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = 0 (exactly made)`);\n      }\n\n      // Hand Potential Performance\n      if (handExpectedTricks > contractExpectedTricks) {\n        const potentialVariance = actualTricks - handExpectedTricks;\n        if (potentialVariance < 0) {\n          // Underperformance based on hand potential\n          declarerPoints -= Math.abs(potentialVariance) * 0.75;\n          details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} → -${(Math.abs(potentialVariance) * 0.75).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\n        } else {\n          details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} (no adjustment)`);\n        }\n      }\n\n      // Step 6: Apply Contract Type Adjustments\n      if (isGameContract(contractDetails)) {\n        declarerPoints += 2;\n        details.push(`Game Contract Bonus: +2 points → ${declarerPoints.toFixed(2)} points`);\n      }\n      if (contractDetails.level === 6) {\n        declarerPoints += 4;\n        details.push(`Small Slam Bonus: +4 points → ${declarerPoints.toFixed(2)} points`);\n      } else if (contractDetails.level === 7) {\n        declarerPoints += 6;\n        details.push(`Grand Slam Bonus: +6 points → ${declarerPoints.toFixed(2)} points`);\n      }\n      if (contractDetails.isNT) {\n        declarerPoints += 1;\n        details.push(`NT Contract Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n      }\n      if (performanceVariance >= 4) {\n        declarerPoints += 1;\n        details.push(`4+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n        if (performanceVariance >= 7) {\n          declarerPoints += 1;\n          details.push(`7+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\n        }\n      }\n\n      // Step 7: Distribution Adjustment (Suit Contracts Only)\n      if (!contractDetails.isNT) {\n        let distributionAdjustment = 0;\n        if (declarerDistPoints >= 7) {\n          distributionAdjustment = 3;\n        } else if (declarerDistPoints >= 5) {\n          distributionAdjustment = 2;\n        } else if (declarerDistPoints >= 3) {\n          distributionAdjustment = 1;\n        }\n        if (distributionAdjustment > 0) {\n          declarerPoints -= distributionAdjustment;\n          details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, -${distributionAdjustment} points → ${declarerPoints.toFixed(2)} points`);\n        } else {\n          details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, no deduction`);\n        }\n      }\n\n      // Step 8: Defender Reward Calculation\n      const handExpectedTricksRounded = Math.min(13, Math.round(handExpectedTricks));\n      if (handExpectedTricksRounded > contractExpectedTricks && actualTricks < handExpectedTricksRounded) {\n        const defenderReward = (handExpectedTricksRounded - actualTricks) * 2;\n        let extraReward = 0;\n        if (advantageSide === \"declarer\") {\n          extraReward = Math.min(3, hcpAdvantage / 10);\n          details.push(`Defender Extra Reward: ${extraReward.toFixed(2)} points (for ${hcpAdvantage.toFixed(1)}% HCP disadvantage)`);\n        }\n        defenderPoints = defenderReward + extraReward;\n        details.push(`Defender Reward: (${handExpectedTricksRounded} - ${actualTricks}) × 2 = ${defenderReward} + ${extraReward.toFixed(2)} extra = ${defenderPoints.toFixed(2)} points`);\n      }\n\n      // Step 9: Finalize Scores\n      declarerPoints = Math.round(Math.max(1, declarerPoints)); // Minimum 1 point for made contracts\n      defenderPoints = Math.round(defenderPoints);\n      details.push(`Final Declarer Points: ${declarerPoints} (rounded from ${declarerPoints.toFixed(2)})`);\n      if (defenderPoints > 0) {\n        details.push(`Final Defender Points: ${defenderPoints} (rounded from ${defenderPoints.toFixed(2)})`);\n      } else {\n        details.push(`Final Defender Points: 0`);\n      }\n    } else {\n      // Defeated contracts\n\n      // Step 1: Calculate Base Penalty\n      const basePenalty = Math.abs(rawScore) / 10;\n      defenderPoints = basePenalty;\n      details.push(`Base Penalty: |${rawScore}| ÷ 10 = ${basePenalty.toFixed(2)} points`);\n\n      // Step 2: Add Contract Level Penalties\n      if (isGameContract(contractDetails)) {\n        defenderPoints += 3;\n        details.push(`Game Contract Penalty: +3 points → ${defenderPoints.toFixed(2)} points`);\n      }\n      if (contractDetails.level === 6) {\n        defenderPoints += 5;\n        details.push(`Small Slam Penalty: +5 points → ${defenderPoints.toFixed(2)} points`);\n      } else if (contractDetails.level === 7) {\n        defenderPoints += 7;\n        details.push(`Grand Slam Penalty: +7 points → ${defenderPoints.toFixed(2)} points`);\n      }\n\n      // Step 3: Calculate Defender Performance Bonus\n      if (declarerHCPPercentage > 60) {\n        const bonus = (declarerHCPPercentage - 50) / 5;\n        defenderPoints += bonus;\n        details.push(`Defender HCP Bonus: (${declarerHCPPercentage.toFixed(1)}% - 50) ÷ 5 = +${bonus.toFixed(2)} points → ${defenderPoints.toFixed(2)} points`);\n      }\n      if (Math.abs(contractDetails.result) >= 2) {\n        defenderPoints += 2;\n        details.push(`Down 2+ Tricks Bonus: +2 points → ${defenderPoints.toFixed(2)} points`);\n        if (Math.abs(contractDetails.result) >= 3) {\n          defenderPoints += 1; // Additional +1 for 3+ down\n          details.push(`Down 3+ Tricks Bonus: +1 point → ${defenderPoints.toFixed(2)} points`);\n        }\n      }\n\n      // Step 4: Calculate Declarer Consolation\n      if (declarerHCPPercentage < 40) {\n        declarerPoints = (50 - declarerHCPPercentage) / 10;\n        details.push(`Declarer Consolation: (50 - ${declarerHCPPercentage.toFixed(1)}%) ÷ 10 = ${declarerPoints.toFixed(2)} points`);\n      }\n\n      // Step 5: Finalize Scores\n      declarerPoints = Math.round(declarerPoints); // Can be 0\n      defenderPoints = Math.round(Math.max(3, defenderPoints)); // Minimum 3 points for defeating contracts\n\n      details.push(`Final Declarer Points: ${declarerPoints} (rounded from ${declarerPoints.toFixed(2)})`);\n      details.push(`Final Defender Points: ${defenderPoints} (rounded from ${defenderPoints.toFixed(2)}, minimum 3 for defeating a contract)`);\n    }\n    setCalculationDetails(details);\n    return {\n      declarerPoints,\n      defenderPoints\n    };\n  };\n\n  // Handle calculation and save\n  const handleCalculateAndSave = () => {\n    const scores = calculateBonusBridgeScore();\n    setAdjustedScores(scores);\n\n    // Save the calculated scores when complete\n    if (onSaveScore) {\n      const contractDetails = getContractDetails();\n      if (contractDetails) {\n        const nsPoints = contractDetails.isNS ? scores.declarerPoints : scores.defenderPoints;\n        const ewPoints = contractDetails.isNS ? scores.defenderPoints : scores.declarerPoints;\n        onSaveScore({\n          nsPoints,\n          ewPoints,\n          dealDetails: {\n            contract: gameState.currentDeal.contract,\n            declarer: contractDetails.declarer,\n            result: contractDetails.result,\n            declarerHCP,\n            defenderHCP,\n            distPoints: declarerDistPoints,\n            raw: calculateRawBridgeScore(contractDetails) / 20,\n            calculations: [...calculationDetails]\n          }\n        });\n      }\n    }\n  };\n\n  // Update score when inputs change\n  useEffect(() => {\n    const totalHCP = declarerHCP + defenderHCP;\n    // Only calculate if we have a valid total (should be close to 40)\n    if (totalHCP >= 35 && totalHCP <= 45) {\n      const scores = calculateBonusBridgeScore();\n      setAdjustedScores(scores);\n    }\n  }, [declarerHCP, defenderHCP, declarerDistPoints, gameState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"score-adjustment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Score Adjustment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), getContractDetails() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contract-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Contract: \", gameState.currentDeal.contract]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Result: \", getContractDetails().result > 0 ? `Made ${getContractDetails().result} overtrick${getContractDetails().result !== 1 ? 's' : ''}` : getContractDetails().result < 0 ? `Down ${Math.abs(getContractDetails().result)}` : 'Contract made exactly']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hcp-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Enter High Card Points\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Declarer (\", getContractDetails().isNS ? 'NS' : 'EW', \") HCP:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"37\",\n              value: declarerHCP,\n              onChange: e => setDeclarerHCP(parseInt(e.target.value) || 0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Defender (\", getContractDetails().isNS ? 'EW' : 'NS', \") HCP:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"37\",\n              value: defenderHCP,\n              onChange: e => setDefenderHCP(parseInt(e.target.value) || 0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Declarer Distribution Points:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"13\",\n              value: declarerDistPoints,\n              onChange: e => setDeclarerDistPoints(parseInt(e.target.value) || 0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"help-button\",\n            title: \"Distribution Points: Void=3, Singleton=2, Doubleton=1, Long suits (6+=1-3)\",\n            children: \"?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculation-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Bonus Bridge Points\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"team\",\n            children: [getContractDetails().isNS ? 'NS' : 'EW', \" (Declarer):\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"points\",\n            children: adjustedScores.declarerPoints\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"team\",\n            children: [getContractDetails().isNS ? 'EW' : 'NS', \" (Defender):\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"points\",\n            children: adjustedScores.defenderPoints\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculation-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Calculation Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"details-container\",\n          children: calculationDetails.map((detail, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: detail\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleCalculateAndSave,\n          children: \"Save Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-deal-btn\",\n          onClick: onNextDeal,\n          children: \"Next Deal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-game-btn\",\n          onClick: onNewGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No valid contract information found. Please return to the game screen and input a valid contract.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onNextDeal,\n        children: \"Return to Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n};\n_s(ScoreAdjustment, \"zqLvfP4/3HI4ElOFfq26yxcqO8Q=\");\n_c = ScoreAdjustment;\nexport default ScoreAdjustment;\nvar _c;\n$RefreshReg$(_c, \"ScoreAdjustment\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ScoreAdjustment","gameState","onSaveScore","onNextDeal","onNewGame","_s","declarerHCP","setDeclarerHCP","defenderHCP","setDefenderHCP","declarerDistPoints","setDeclarerDistPoints","adjustedScores","setAdjustedScores","declarerPoints","defenderPoints","calculationDetails","setCalculationDetails","expectedHCPByContract","partScore","game3NT","game4Major","game5Minor","smallSlam","grandSlam","getContractDetails","_gameState$currentDea","currentDeal","contract","contractRegex","match","level","parseInt","suit","declarer","doubled","isNS","isNT","isMajor","isMinor","isMade","result","tricks","vul","vulnerable","isGameContract","contractDetails","calculateRawBridgeScore","score","trickValue","firstTrickValue","overtrickValue","undertricks","Math","abs","multiplier","min","calculateBonusBridgeScore","details","rawScore","initialPoints","push","toFixed","totalHCP","declarerHCPPercentage","defenderHCPPercentage","hcpAdvantage","advantageSide","expectedHCP","hcpAdjustment","contractExpectedTricks","handExpectedTricks","round","actualTricks","performanceVariance","potentialVariance","distributionAdjustment","handExpectedTricksRounded","defenderReward","extraReward","max","basePenalty","bonus","handleCalculateAndSave","scores","nsPoints","ewPoints","dealDetails","distPoints","raw","calculations","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","title","map","detail","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/ScoreAdjustment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ScoreAdjustment = ({ gameState, onSaveScore, onNextDeal, onNewGame }) => {\r\n  const [declarerHCP, setDeclarerHCP] = useState(0);\r\n  const [defenderHCP, setDefenderHCP] = useState(0);\r\n  const [declarerDistPoints, setDeclarerDistPoints] = useState(0);\r\n  const [adjustedScores, setAdjustedScores] = useState({\r\n    declarerPoints: 0,\r\n    defenderPoints: 0\r\n  });\r\n  const [calculationDetails, setCalculationDetails] = useState([]);\r\n  \r\n  // Expected HCP by contract type\r\n  const expectedHCPByContract = {\r\n    partScore: 21,\r\n    game3NT: 25,\r\n    game4Major: 24,\r\n    game5Minor: 27,\r\n    smallSlam: 30,\r\n    grandSlam: 32\r\n  };\r\n  \r\n  // Extract contract details\r\n  const getContractDetails = () => {\r\n    if (!gameState?.currentDeal?.contract) return null;\r\n    \r\n    const contractRegex = /(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/;\r\n    const match = gameState.currentDeal.contract.match(contractRegex);\r\n    \r\n    if (!match) return null;\r\n    \r\n    return {\r\n      level: parseInt(match[1]),\r\n      suit: match[2],\r\n      declarer: match[3],\r\n      doubled: match[4],\r\n      isNS: match[3] === 'N' || match[3] === 'S',\r\n      isNT: match[2] === 'NT',\r\n      isMajor: match[2] === '♥' || match[2] === '♠',\r\n      isMinor: match[2] === '♣' || match[2] === '♦',\r\n      isMade: gameState.currentDeal.result >= 0,\r\n      tricks: gameState.currentDeal.tricks || (6 + parseInt(match[1]) + (gameState.currentDeal.result || 0)),\r\n      result: gameState.currentDeal.result || 0,\r\n      vul: gameState.currentDeal.vulnerable\r\n    };\r\n  };\r\n  \r\n  // Determine if contract is a game contract\r\n  const isGameContract = (contractDetails) => {\r\n    if (!contractDetails) return false;\r\n    \r\n    return (\r\n      (contractDetails.level === 3 && contractDetails.isNT) ||\r\n      (contractDetails.level === 4 && contractDetails.isMajor) ||\r\n      (contractDetails.level === 5 && contractDetails.isMinor) ||\r\n      contractDetails.level >= 6\r\n    );\r\n  };\r\n  \r\n  // Calculate raw bridge score\r\n  const calculateRawBridgeScore = (contractDetails) => {\r\n    if (!contractDetails) return 0;\r\n    \r\n    const { level, suit, doubled, isMade, result, vul } = contractDetails;\r\n    \r\n    let score = 0;\r\n    \r\n    if (isMade) {\r\n      // Trick score\r\n      const trickValue = suit === '♣' || suit === '♦' ? 20 : 30;\r\n      const firstTrickValue = suit === 'NT' ? 40 : trickValue;\r\n      \r\n      // Calculate trick score\r\n      score = firstTrickValue + (level - 1) * trickValue;\r\n      \r\n      // Apply doubling\r\n      if (doubled === 'X') score *= 2;\r\n      if (doubled === 'XX') score *= 4;\r\n      \r\n      // Game and slam bonuses\r\n      if (score >= 100) {\r\n        // Game bonus\r\n        score += vul ? 500 : 300;\r\n      } else {\r\n        // Part score bonus\r\n        score += 50;\r\n      }\r\n      \r\n      // Slam bonuses\r\n      if (level === 6) {\r\n        score += vul ? 750 : 500; // Small slam\r\n      } else if (level === 7) {\r\n        score += vul ? 1500 : 1000; // Grand slam\r\n      }\r\n      \r\n      // Overtrick bonuses\r\n      if (result > 0) {\r\n        const overtrickValue = doubled \r\n          ? (vul ? 200 : 100) * (doubled === 'XX' ? 2 : 1)\r\n          : (suit === '♣' || suit === '♦' ? 20 : 30);\r\n        \r\n        score += overtrickValue * result;\r\n      }\r\n      \r\n      // Doubled and redoubled bonuses\r\n      if (doubled === 'X') score += 50;\r\n      if (doubled === 'XX') score += 100;\r\n    } else {\r\n      // Contract went down\r\n      const undertricks = Math.abs(result);\r\n      \r\n      if (!doubled) {\r\n        // Not doubled\r\n        score = -(undertricks * (vul ? 100 : 50));\r\n      } else {\r\n        // Doubled or redoubled\r\n        const multiplier = doubled === 'XX' ? 2 : 1;\r\n        \r\n        if (vul) {\r\n          score = -((300 * multiplier) + ((undertricks - 1) * 300 * multiplier));\r\n        } else {\r\n          // First undertrick\r\n          score = -(100 * multiplier);\r\n          \r\n          // Second and third undertricks\r\n          if (undertricks > 1) {\r\n            score -= Math.min(undertricks - 1, 2) * 200 * multiplier;\r\n          }\r\n          \r\n          // Fourth and subsequent undertricks\r\n          if (undertricks > 3) {\r\n            score -= (undertricks - 3) * 300 * multiplier;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return score;\r\n  };\r\n  \r\n  // Calculate enhanced bonus bridge scoring\r\n  const calculateBonusBridgeScore = () => {\r\n    const contractDetails = getContractDetails();\r\n    if (!contractDetails) return { declarerPoints: 0, defenderPoints: 0 };\r\n    \r\n    // Reset calculation details\r\n    const details = [];\r\n    \r\n    // Step 1: Calculate Raw Score and Reduce Scale\r\n    const rawScore = calculateRawBridgeScore(contractDetails);\r\n    let initialPoints = rawScore / 20;\r\n    details.push(`Raw score: ${rawScore} ÷ 20 = ${initialPoints.toFixed(2)} points`);\r\n    \r\n    // Step 2: Calculate HCP Advantage\r\n    const totalHCP = declarerHCP + defenderHCP;\r\n    const declarerHCPPercentage = (declarerHCP / totalHCP) * 100;\r\n    const defenderHCPPercentage = 100 - declarerHCPPercentage;\r\n    const hcpAdvantage = Math.abs(declarerHCPPercentage - defenderHCPPercentage);\r\n    const advantageSide = declarerHCPPercentage > 50 ? \"declarer\" : \"defender\";\r\n    \r\n    details.push(`Declarer HCP: ${declarerHCP} (${declarerHCPPercentage.toFixed(1)}%)`);\r\n    details.push(`Defender HCP: ${defenderHCP} (${defenderHCPPercentage.toFixed(1)}%)`);\r\n    details.push(`HCP Advantage: ${hcpAdvantage.toFixed(1)}% to ${advantageSide}`);\r\n    \r\n    let declarerPoints = initialPoints;\r\n    let defenderPoints = 0;\r\n    \r\n    if (contractDetails.isMade) {\r\n      // Made contracts\r\n      \r\n      // Step 3: Apply HCP Adjustment Based on Contract Type\r\n      let expectedHCP = 21; // Default for part scores\r\n      \r\n      if (contractDetails.level === 3 && contractDetails.isNT) {\r\n        expectedHCP = expectedHCPByContract.game3NT;\r\n      } else if (contractDetails.level === 4 && contractDetails.isMajor) {\r\n        expectedHCP = expectedHCPByContract.game4Major;\r\n      } else if (contractDetails.level === 5 && contractDetails.isMinor) {\r\n        expectedHCP = expectedHCPByContract.game5Minor;\r\n      } else if (contractDetails.level === 6) {\r\n        expectedHCP = expectedHCPByContract.smallSlam;\r\n      } else if (contractDetails.level === 7) {\r\n        expectedHCP = expectedHCPByContract.grandSlam;\r\n      }\r\n      \r\n      const hcpAdjustment = (declarerHCP - expectedHCP) * 0.75;\r\n      \r\n      if (declarerHCP > expectedHCP) {\r\n        declarerPoints -= hcpAdjustment;\r\n        details.push(`HCP Adjustment: ${declarerHCP} > ${expectedHCP}, -${hcpAdjustment.toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n      } else if (declarerHCP < expectedHCP) {\r\n        declarerPoints += Math.abs(hcpAdjustment);\r\n        details.push(`HCP Adjustment: ${declarerHCP} < ${expectedHCP}, +${Math.abs(hcpAdjustment).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n      } else {\r\n        details.push(`HCP Adjustment: ${declarerHCP} = ${expectedHCP}, no adjustment → ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      // Step 4: Calculate Expected Tricks\r\n      const contractExpectedTricks = 6 + contractDetails.level;\r\n      const handExpectedTricks = Math.min(13, 6 + (declarerHCP / 3) + (declarerDistPoints / 4));\r\n      \r\n      details.push(`Contract Expected Tricks: 6 + ${contractDetails.level} = ${contractExpectedTricks}`);\r\n      details.push(`Hand Expected Tricks: 6 + (${declarerHCP} ÷ 3) + (${declarerDistPoints} ÷ 4) = ${handExpectedTricks.toFixed(2)} → ${Math.min(13, Math.round(handExpectedTricks))}`);\r\n      \r\n      // Step 5: Performance Assessment\r\n      const actualTricks = contractDetails.tricks;\r\n      const performanceVariance = actualTricks - contractExpectedTricks;\r\n      \r\n      if (performanceVariance > 0) {\r\n        // Overtricks\r\n        declarerPoints += performanceVariance * 1.5;\r\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = +${performanceVariance} → +${(performanceVariance * 1.5).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n      } else if (performanceVariance < 0) {\r\n        // Failed contract (shouldn't happen in this branch)\r\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = ${performanceVariance} (contract failed)`);\r\n      } else {\r\n        details.push(`Performance Variance: ${actualTricks} - ${contractExpectedTricks} = 0 (exactly made)`);\r\n      }\r\n      \r\n      // Hand Potential Performance\r\n      if (handExpectedTricks > contractExpectedTricks) {\r\n        const potentialVariance = actualTricks - handExpectedTricks;\r\n        \r\n        if (potentialVariance < 0) {\r\n          // Underperformance based on hand potential\r\n          declarerPoints -= Math.abs(potentialVariance) * 0.75;\r\n          details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} → -${(Math.abs(potentialVariance) * 0.75).toFixed(2)} points → ${declarerPoints.toFixed(2)} points`);\r\n        } else {\r\n          details.push(`Hand Potential Variance: ${actualTricks} - ${handExpectedTricks.toFixed(2)} = ${potentialVariance.toFixed(2)} (no adjustment)`);\r\n        }\r\n      }\r\n      \r\n      // Step 6: Apply Contract Type Adjustments\r\n      if (isGameContract(contractDetails)) {\r\n        declarerPoints += 2;\r\n        details.push(`Game Contract Bonus: +2 points → ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      if (contractDetails.level === 6) {\r\n        declarerPoints += 4;\r\n        details.push(`Small Slam Bonus: +4 points → ${declarerPoints.toFixed(2)} points`);\r\n      } else if (contractDetails.level === 7) {\r\n        declarerPoints += 6;\r\n        details.push(`Grand Slam Bonus: +6 points → ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      if (contractDetails.isNT) {\r\n        declarerPoints += 1;\r\n        details.push(`NT Contract Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      if (performanceVariance >= 4) {\r\n        declarerPoints += 1;\r\n        details.push(`4+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n        \r\n        if (performanceVariance >= 7) {\r\n          declarerPoints += 1;\r\n          details.push(`7+ Overtricks Bonus: +1 point → ${declarerPoints.toFixed(2)} points`);\r\n        }\r\n      }\r\n      \r\n      // Step 7: Distribution Adjustment (Suit Contracts Only)\r\n      if (!contractDetails.isNT) {\r\n        let distributionAdjustment = 0;\r\n        \r\n        if (declarerDistPoints >= 7) {\r\n          distributionAdjustment = 3;\r\n        } else if (declarerDistPoints >= 5) {\r\n          distributionAdjustment = 2;\r\n        } else if (declarerDistPoints >= 3) {\r\n          distributionAdjustment = 1;\r\n        }\r\n        \r\n        if (distributionAdjustment > 0) {\r\n          declarerPoints -= distributionAdjustment;\r\n          details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, -${distributionAdjustment} points → ${declarerPoints.toFixed(2)} points`);\r\n        } else {\r\n          details.push(`Distribution Adjustment: ${declarerDistPoints} distribution points, no deduction`);\r\n        }\r\n      }\r\n      \r\n      // Step 8: Defender Reward Calculation\r\n      const handExpectedTricksRounded = Math.min(13, Math.round(handExpectedTricks));\r\n      \r\n      if (handExpectedTricksRounded > contractExpectedTricks && actualTricks < handExpectedTricksRounded) {\r\n        const defenderReward = (handExpectedTricksRounded - actualTricks) * 2;\r\n        \r\n        let extraReward = 0;\r\n        if (advantageSide === \"declarer\") {\r\n          extraReward = Math.min(3, hcpAdvantage / 10);\r\n          details.push(`Defender Extra Reward: ${extraReward.toFixed(2)} points (for ${hcpAdvantage.toFixed(1)}% HCP disadvantage)`);\r\n        }\r\n        \r\n        defenderPoints = defenderReward + extraReward;\r\n        details.push(`Defender Reward: (${handExpectedTricksRounded} - ${actualTricks}) × 2 = ${defenderReward} + ${extraReward.toFixed(2)} extra = ${defenderPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      // Step 9: Finalize Scores\r\n      declarerPoints = Math.round(Math.max(1, declarerPoints)); // Minimum 1 point for made contracts\r\n      defenderPoints = Math.round(defenderPoints);\r\n      \r\n      details.push(`Final Declarer Points: ${declarerPoints} (rounded from ${declarerPoints.toFixed(2)})`);\r\n      if (defenderPoints > 0) {\r\n        details.push(`Final Defender Points: ${defenderPoints} (rounded from ${defenderPoints.toFixed(2)})`);\r\n      } else {\r\n        details.push(`Final Defender Points: 0`);\r\n      }\r\n      \r\n    } else {\r\n      // Defeated contracts\r\n      \r\n      // Step 1: Calculate Base Penalty\r\n      const basePenalty = Math.abs(rawScore) / 10;\r\n      defenderPoints = basePenalty;\r\n      details.push(`Base Penalty: |${rawScore}| ÷ 10 = ${basePenalty.toFixed(2)} points`);\r\n      \r\n      // Step 2: Add Contract Level Penalties\r\n      if (isGameContract(contractDetails)) {\r\n        defenderPoints += 3;\r\n        details.push(`Game Contract Penalty: +3 points → ${defenderPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      if (contractDetails.level === 6) {\r\n        defenderPoints += 5;\r\n        details.push(`Small Slam Penalty: +5 points → ${defenderPoints.toFixed(2)} points`);\r\n      } else if (contractDetails.level === 7) {\r\n        defenderPoints += 7;\r\n        details.push(`Grand Slam Penalty: +7 points → ${defenderPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      // Step 3: Calculate Defender Performance Bonus\r\n      if (declarerHCPPercentage > 60) {\r\n        const bonus = (declarerHCPPercentage - 50) / 5;\r\n        defenderPoints += bonus;\r\n        details.push(`Defender HCP Bonus: (${declarerHCPPercentage.toFixed(1)}% - 50) ÷ 5 = +${bonus.toFixed(2)} points → ${defenderPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      if (Math.abs(contractDetails.result) >= 2) {\r\n        defenderPoints += 2;\r\n        details.push(`Down 2+ Tricks Bonus: +2 points → ${defenderPoints.toFixed(2)} points`);\r\n        \r\n        if (Math.abs(contractDetails.result) >= 3) {\r\n          defenderPoints += 1; // Additional +1 for 3+ down\r\n          details.push(`Down 3+ Tricks Bonus: +1 point → ${defenderPoints.toFixed(2)} points`);\r\n        }\r\n      }\r\n      \r\n      // Step 4: Calculate Declarer Consolation\r\n      if (declarerHCPPercentage < 40) {\r\n        declarerPoints = (50 - declarerHCPPercentage) / 10;\r\n        details.push(`Declarer Consolation: (50 - ${declarerHCPPercentage.toFixed(1)}%) ÷ 10 = ${declarerPoints.toFixed(2)} points`);\r\n      }\r\n      \r\n      // Step 5: Finalize Scores\r\n      declarerPoints = Math.round(declarerPoints); // Can be 0\r\n      defenderPoints = Math.round(Math.max(3, defenderPoints)); // Minimum 3 points for defeating contracts\r\n      \r\n      details.push(`Final Declarer Points: ${declarerPoints} (rounded from ${declarerPoints.toFixed(2)})`);\r\n      details.push(`Final Defender Points: ${defenderPoints} (rounded from ${defenderPoints.toFixed(2)}, minimum 3 for defeating a contract)`);\r\n    }\r\n    \r\n    setCalculationDetails(details);\r\n    return { declarerPoints, defenderPoints };\r\n  };\r\n  \r\n  // Handle calculation and save\r\n  const handleCalculateAndSave = () => {\r\n    const scores = calculateBonusBridgeScore();\r\n    setAdjustedScores(scores);\r\n    \r\n    // Save the calculated scores when complete\r\n    if (onSaveScore) {\r\n      const contractDetails = getContractDetails();\r\n      if (contractDetails) {\r\n        const nsPoints = contractDetails.isNS ? scores.declarerPoints : scores.defenderPoints;\r\n        const ewPoints = contractDetails.isNS ? scores.defenderPoints : scores.declarerPoints;\r\n        \r\n        onSaveScore({\r\n          nsPoints,\r\n          ewPoints,\r\n          dealDetails: {\r\n            contract: gameState.currentDeal.contract,\r\n            declarer: contractDetails.declarer,\r\n            result: contractDetails.result,\r\n            declarerHCP,\r\n            defenderHCP,\r\n            distPoints: declarerDistPoints,\r\n            raw: calculateRawBridgeScore(contractDetails) / 20,\r\n            calculations: [...calculationDetails]\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Update score when inputs change\r\n  useEffect(() => {\r\n    const totalHCP = declarerHCP + defenderHCP;\r\n    // Only calculate if we have a valid total (should be close to 40)\r\n    if (totalHCP >= 35 && totalHCP <= 45) {\r\n      const scores = calculateBonusBridgeScore();\r\n      setAdjustedScores(scores);\r\n    }\r\n  }, [declarerHCP, defenderHCP, declarerDistPoints, gameState]);\r\n  \r\n  return (\r\n    <div className=\"score-adjustment\">\r\n      <h2>Score Adjustment</h2>\r\n      \r\n      {getContractDetails() ? (\r\n        <>\r\n          <div className=\"contract-details\">\r\n            <h3>Contract: {gameState.currentDeal.contract}</h3>\r\n            <p>Result: {getContractDetails().result > 0 \r\n              ? `Made ${getContractDetails().result} overtrick${getContractDetails().result !== 1 ? 's' : ''}` \r\n              : getContractDetails().result < 0 \r\n                ? `Down ${Math.abs(getContractDetails().result)}`\r\n                : 'Contract made exactly'\r\n            }</p>\r\n          </div>\r\n          \r\n          <div className=\"hcp-input\">\r\n            <h3>Enter High Card Points</h3>\r\n            <div className=\"input-row\">\r\n              <label>\r\n                Declarer ({getContractDetails().isNS ? 'NS' : 'EW'}) HCP:\r\n                <input \r\n                  type=\"number\" \r\n                  min=\"0\" \r\n                  max=\"37\" \r\n                  value={declarerHCP}\r\n                  onChange={(e) => setDeclarerHCP(parseInt(e.target.value) || 0)}\r\n                />\r\n              </label>\r\n            </div>\r\n            \r\n            <div className=\"input-row\">\r\n              <label>\r\n                Defender ({getContractDetails().isNS ? 'EW' : 'NS'}) HCP:\r\n                <input \r\n                  type=\"number\" \r\n                  min=\"0\" \r\n                  max=\"37\" \r\n                  value={defenderHCP}\r\n                  onChange={(e) => setDefenderHCP(parseInt(e.target.value) || 0)}\r\n                />\r\n              </label>\r\n            </div>\r\n            \r\n            <div className=\"input-row\">\r\n              <label>\r\n                Declarer Distribution Points:\r\n                <input \r\n                  type=\"number\" \r\n                  min=\"0\" \r\n                  max=\"13\" \r\n                  value={declarerDistPoints}\r\n                  onChange={(e) => setDeclarerDistPoints(parseInt(e.target.value) || 0)}\r\n                />\r\n              </label>\r\n              <button className=\"help-button\" title=\"Distribution Points: Void=3, Singleton=2, Doubleton=1, Long suits (6+=1-3)\">?</button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"calculation-results\">\r\n            <h3>Bonus Bridge Points</h3>\r\n            <div className=\"result-row\">\r\n              <span className=\"team\">{getContractDetails().isNS ? 'NS' : 'EW'} (Declarer):</span>\r\n              <span className=\"points\">{adjustedScores.declarerPoints}</span>\r\n            </div>\r\n            <div className=\"result-row\">\r\n              <span className=\"team\">{getContractDetails().isNS ? 'EW' : 'NS'} (Defender):</span>\r\n              <span className=\"points\">{adjustedScores.defenderPoints}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"calculation-details\">\r\n            <h3>Calculation Details</h3>\r\n            <div className=\"details-container\">\r\n              {calculationDetails.map((detail, index) => (\r\n                <p key={index}>{detail}</p>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"action-buttons\">\r\n            <button \r\n              className=\"save-btn\"\r\n              onClick={handleCalculateAndSave}\r\n            >\r\n              Save Score\r\n            </button>\r\n            \r\n            <button \r\n              className=\"next-deal-btn\"\r\n              onClick={onNextDeal}\r\n            >\r\n              Next Deal\r\n            </button>\r\n            \r\n            <button \r\n              className=\"new-game-btn\"\r\n              onClick={onNewGame}\r\n            >\r\n              New Game\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"error-message\">\r\n          <p>No valid contract information found. Please return to the game screen and input a valid contract.</p>\r\n          <button onClick={onNextDeal}>Return to Game</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScoreAdjustment;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,UAAU;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC;IACnDoB,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE;EAClB,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAEhE;EACA,MAAMwB,qBAAqB,GAAG;IAC5BC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE;EACb,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC/B,IAAI,EAACzB,SAAS,aAATA,SAAS,gBAAAyB,qBAAA,GAATzB,SAAS,CAAE0B,WAAW,cAAAD,qBAAA,eAAtBA,qBAAA,CAAwBE,QAAQ,GAAE,OAAO,IAAI;IAElD,MAAMC,aAAa,GAAG,oCAAoC;IAC1D,MAAMC,KAAK,GAAG7B,SAAS,CAAC0B,WAAW,CAACC,QAAQ,CAACE,KAAK,CAACD,aAAa,CAAC;IAEjE,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;IAEvB,OAAO;MACLC,KAAK,EAAEC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;MACzBG,IAAI,EAAEH,KAAK,CAAC,CAAC,CAAC;MACdI,QAAQ,EAAEJ,KAAK,CAAC,CAAC,CAAC;MAClBK,OAAO,EAAEL,KAAK,CAAC,CAAC,CAAC;MACjBM,IAAI,EAAEN,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;MAC1CO,IAAI,EAAEP,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI;MACvBQ,OAAO,EAAER,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;MAC7CS,OAAO,EAAET,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;MAC7CU,MAAM,EAAEvC,SAAS,CAAC0B,WAAW,CAACc,MAAM,IAAI,CAAC;MACzCC,MAAM,EAAEzC,SAAS,CAAC0B,WAAW,CAACe,MAAM,IAAK,CAAC,GAAGV,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI7B,SAAS,CAAC0B,WAAW,CAACc,MAAM,IAAI,CAAC,CAAE;MACtGA,MAAM,EAAExC,SAAS,CAAC0B,WAAW,CAACc,MAAM,IAAI,CAAC;MACzCE,GAAG,EAAE1C,SAAS,CAAC0B,WAAW,CAACiB;IAC7B,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,eAAe,IAAK;IAC1C,IAAI,CAACA,eAAe,EAAE,OAAO,KAAK;IAElC,OACGA,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACT,IAAI,IACnDS,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACR,OAAQ,IACvDQ,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACP,OAAQ,IACxDO,eAAe,CAACf,KAAK,IAAI,CAAC;EAE9B,CAAC;;EAED;EACA,MAAMgB,uBAAuB,GAAID,eAAe,IAAK;IACnD,IAAI,CAACA,eAAe,EAAE,OAAO,CAAC;IAE9B,MAAM;MAAEf,KAAK;MAAEE,IAAI;MAAEE,OAAO;MAAEK,MAAM;MAAEC,MAAM;MAAEE;IAAI,CAAC,GAAGG,eAAe;IAErE,IAAIE,KAAK,GAAG,CAAC;IAEb,IAAIR,MAAM,EAAE;MACV;MACA,MAAMS,UAAU,GAAGhB,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,EAAE;MACzD,MAAMiB,eAAe,GAAGjB,IAAI,KAAK,IAAI,GAAG,EAAE,GAAGgB,UAAU;;MAEvD;MACAD,KAAK,GAAGE,eAAe,GAAG,CAACnB,KAAK,GAAG,CAAC,IAAIkB,UAAU;;MAElD;MACA,IAAId,OAAO,KAAK,GAAG,EAAEa,KAAK,IAAI,CAAC;MAC/B,IAAIb,OAAO,KAAK,IAAI,EAAEa,KAAK,IAAI,CAAC;;MAEhC;MACA,IAAIA,KAAK,IAAI,GAAG,EAAE;QAChB;QACAA,KAAK,IAAIL,GAAG,GAAG,GAAG,GAAG,GAAG;MAC1B,CAAC,MAAM;QACL;QACAK,KAAK,IAAI,EAAE;MACb;;MAEA;MACA,IAAIjB,KAAK,KAAK,CAAC,EAAE;QACfiB,KAAK,IAAIL,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;MAC5B,CAAC,MAAM,IAAIZ,KAAK,KAAK,CAAC,EAAE;QACtBiB,KAAK,IAAIL,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;MAC9B;;MAEA;MACA,IAAIF,MAAM,GAAG,CAAC,EAAE;QACd,MAAMU,cAAc,GAAGhB,OAAO,GAC1B,CAACQ,GAAG,GAAG,GAAG,GAAG,GAAG,KAAKR,OAAO,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,GAC7CF,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,EAAG;QAE5Ce,KAAK,IAAIG,cAAc,GAAGV,MAAM;MAClC;;MAEA;MACA,IAAIN,OAAO,KAAK,GAAG,EAAEa,KAAK,IAAI,EAAE;MAChC,IAAIb,OAAO,KAAK,IAAI,EAAEa,KAAK,IAAI,GAAG;IACpC,CAAC,MAAM;MACL;MACA,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACb,MAAM,CAAC;MAEpC,IAAI,CAACN,OAAO,EAAE;QACZ;QACAa,KAAK,GAAG,EAAEI,WAAW,IAAIT,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;MAC3C,CAAC,MAAM;QACL;QACA,MAAMY,UAAU,GAAGpB,OAAO,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;QAE3C,IAAIQ,GAAG,EAAE;UACPK,KAAK,GAAG,EAAG,GAAG,GAAGO,UAAU,GAAK,CAACH,WAAW,GAAG,CAAC,IAAI,GAAG,GAAGG,UAAW,CAAC;QACxE,CAAC,MAAM;UACL;UACAP,KAAK,GAAG,EAAE,GAAG,GAAGO,UAAU,CAAC;;UAE3B;UACA,IAAIH,WAAW,GAAG,CAAC,EAAE;YACnBJ,KAAK,IAAIK,IAAI,CAACG,GAAG,CAACJ,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAGG,UAAU;UAC1D;;UAEA;UACA,IAAIH,WAAW,GAAG,CAAC,EAAE;YACnBJ,KAAK,IAAI,CAACI,WAAW,GAAG,CAAC,IAAI,GAAG,GAAGG,UAAU;UAC/C;QACF;MACF;IACF;IAEA,OAAOP,KAAK;EACd,CAAC;;EAED;EACA,MAAMS,yBAAyB,GAAGA,CAAA,KAAM;IACtC,MAAMX,eAAe,GAAGrB,kBAAkB,CAAC,CAAC;IAC5C,IAAI,CAACqB,eAAe,EAAE,OAAO;MAAEhC,cAAc,EAAE,CAAC;MAAEC,cAAc,EAAE;IAAE,CAAC;;IAErE;IACA,MAAM2C,OAAO,GAAG,EAAE;;IAElB;IACA,MAAMC,QAAQ,GAAGZ,uBAAuB,CAACD,eAAe,CAAC;IACzD,IAAIc,aAAa,GAAGD,QAAQ,GAAG,EAAE;IACjCD,OAAO,CAACG,IAAI,CAAC,cAAcF,QAAQ,WAAWC,aAAa,CAACE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;;IAEhF;IACA,MAAMC,QAAQ,GAAGzD,WAAW,GAAGE,WAAW;IAC1C,MAAMwD,qBAAqB,GAAI1D,WAAW,GAAGyD,QAAQ,GAAI,GAAG;IAC5D,MAAME,qBAAqB,GAAG,GAAG,GAAGD,qBAAqB;IACzD,MAAME,YAAY,GAAGb,IAAI,CAACC,GAAG,CAACU,qBAAqB,GAAGC,qBAAqB,CAAC;IAC5E,MAAME,aAAa,GAAGH,qBAAqB,GAAG,EAAE,GAAG,UAAU,GAAG,UAAU;IAE1EN,OAAO,CAACG,IAAI,CAAC,iBAAiBvD,WAAW,KAAK0D,qBAAqB,CAACF,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACnFJ,OAAO,CAACG,IAAI,CAAC,iBAAiBrD,WAAW,KAAKyD,qBAAqB,CAACH,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACnFJ,OAAO,CAACG,IAAI,CAAC,kBAAkBK,YAAY,CAACJ,OAAO,CAAC,CAAC,CAAC,QAAQK,aAAa,EAAE,CAAC;IAE9E,IAAIrD,cAAc,GAAG8C,aAAa;IAClC,IAAI7C,cAAc,GAAG,CAAC;IAEtB,IAAI+B,eAAe,CAACN,MAAM,EAAE;MAC1B;;MAEA;MACA,IAAI4B,WAAW,GAAG,EAAE,CAAC,CAAC;;MAEtB,IAAItB,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACT,IAAI,EAAE;QACvD+B,WAAW,GAAGlD,qBAAqB,CAACE,OAAO;MAC7C,CAAC,MAAM,IAAI0B,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACR,OAAO,EAAE;QACjE8B,WAAW,GAAGlD,qBAAqB,CAACG,UAAU;MAChD,CAAC,MAAM,IAAIyB,eAAe,CAACf,KAAK,KAAK,CAAC,IAAIe,eAAe,CAACP,OAAO,EAAE;QACjE6B,WAAW,GAAGlD,qBAAqB,CAACI,UAAU;MAChD,CAAC,MAAM,IAAIwB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QACtCqC,WAAW,GAAGlD,qBAAqB,CAACK,SAAS;MAC/C,CAAC,MAAM,IAAIuB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QACtCqC,WAAW,GAAGlD,qBAAqB,CAACM,SAAS;MAC/C;MAEA,MAAM6C,aAAa,GAAG,CAAC/D,WAAW,GAAG8D,WAAW,IAAI,IAAI;MAExD,IAAI9D,WAAW,GAAG8D,WAAW,EAAE;QAC7BtD,cAAc,IAAIuD,aAAa;QAC/BX,OAAO,CAACG,IAAI,CAAC,mBAAmBvD,WAAW,MAAM8D,WAAW,MAAMC,aAAa,CAACP,OAAO,CAAC,CAAC,CAAC,aAAahD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MAC5I,CAAC,MAAM,IAAIxD,WAAW,GAAG8D,WAAW,EAAE;QACpCtD,cAAc,IAAIuC,IAAI,CAACC,GAAG,CAACe,aAAa,CAAC;QACzCX,OAAO,CAACG,IAAI,CAAC,mBAAmBvD,WAAW,MAAM8D,WAAW,MAAMf,IAAI,CAACC,GAAG,CAACe,aAAa,CAAC,CAACP,OAAO,CAAC,CAAC,CAAC,aAAahD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACtJ,CAAC,MAAM;QACLJ,OAAO,CAACG,IAAI,CAAC,mBAAmBvD,WAAW,MAAM8D,WAAW,qBAAqBtD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACtH;;MAEA;MACA,MAAMQ,sBAAsB,GAAG,CAAC,GAAGxB,eAAe,CAACf,KAAK;MACxD,MAAMwC,kBAAkB,GAAGlB,IAAI,CAACG,GAAG,CAAC,EAAE,EAAE,CAAC,GAAIlD,WAAW,GAAG,CAAE,GAAII,kBAAkB,GAAG,CAAE,CAAC;MAEzFgD,OAAO,CAACG,IAAI,CAAC,iCAAiCf,eAAe,CAACf,KAAK,MAAMuC,sBAAsB,EAAE,CAAC;MAClGZ,OAAO,CAACG,IAAI,CAAC,8BAA8BvD,WAAW,YAAYI,kBAAkB,WAAW6D,kBAAkB,CAACT,OAAO,CAAC,CAAC,CAAC,MAAMT,IAAI,CAACG,GAAG,CAAC,EAAE,EAAEH,IAAI,CAACmB,KAAK,CAACD,kBAAkB,CAAC,CAAC,EAAE,CAAC;;MAEjL;MACA,MAAME,YAAY,GAAG3B,eAAe,CAACJ,MAAM;MAC3C,MAAMgC,mBAAmB,GAAGD,YAAY,GAAGH,sBAAsB;MAEjE,IAAII,mBAAmB,GAAG,CAAC,EAAE;QAC3B;QACA5D,cAAc,IAAI4D,mBAAmB,GAAG,GAAG;QAC3ChB,OAAO,CAACG,IAAI,CAAC,yBAAyBY,YAAY,MAAMH,sBAAsB,OAAOI,mBAAmB,OAAO,CAACA,mBAAmB,GAAG,GAAG,EAAEZ,OAAO,CAAC,CAAC,CAAC,aAAahD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACvM,CAAC,MAAM,IAAIY,mBAAmB,GAAG,CAAC,EAAE;QAClC;QACAhB,OAAO,CAACG,IAAI,CAAC,yBAAyBY,YAAY,MAAMH,sBAAsB,MAAMI,mBAAmB,oBAAoB,CAAC;MAC9H,CAAC,MAAM;QACLhB,OAAO,CAACG,IAAI,CAAC,yBAAyBY,YAAY,MAAMH,sBAAsB,qBAAqB,CAAC;MACtG;;MAEA;MACA,IAAIC,kBAAkB,GAAGD,sBAAsB,EAAE;QAC/C,MAAMK,iBAAiB,GAAGF,YAAY,GAAGF,kBAAkB;QAE3D,IAAII,iBAAiB,GAAG,CAAC,EAAE;UACzB;UACA7D,cAAc,IAAIuC,IAAI,CAACC,GAAG,CAACqB,iBAAiB,CAAC,GAAG,IAAI;UACpDjB,OAAO,CAACG,IAAI,CAAC,4BAA4BY,YAAY,MAAMF,kBAAkB,CAACT,OAAO,CAAC,CAAC,CAAC,MAAMa,iBAAiB,CAACb,OAAO,CAAC,CAAC,CAAC,OAAO,CAACT,IAAI,CAACC,GAAG,CAACqB,iBAAiB,CAAC,GAAG,IAAI,EAAEb,OAAO,CAAC,CAAC,CAAC,aAAahD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAClO,CAAC,MAAM;UACLJ,OAAO,CAACG,IAAI,CAAC,4BAA4BY,YAAY,MAAMF,kBAAkB,CAACT,OAAO,CAAC,CAAC,CAAC,MAAMa,iBAAiB,CAACb,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAC/I;MACF;;MAEA;MACA,IAAIjB,cAAc,CAACC,eAAe,CAAC,EAAE;QACnChC,cAAc,IAAI,CAAC;QACnB4C,OAAO,CAACG,IAAI,CAAC,oCAAoC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACtF;MAEA,IAAIhB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QAC/BjB,cAAc,IAAI,CAAC;QACnB4C,OAAO,CAACG,IAAI,CAAC,iCAAiC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACnF,CAAC,MAAM,IAAIhB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QACtCjB,cAAc,IAAI,CAAC;QACnB4C,OAAO,CAACG,IAAI,CAAC,iCAAiC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACnF;MAEA,IAAIhB,eAAe,CAACT,IAAI,EAAE;QACxBvB,cAAc,IAAI,CAAC;QACnB4C,OAAO,CAACG,IAAI,CAAC,iCAAiC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACnF;MAEA,IAAIY,mBAAmB,IAAI,CAAC,EAAE;QAC5B5D,cAAc,IAAI,CAAC;QACnB4C,OAAO,CAACG,IAAI,CAAC,mCAAmC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAEnF,IAAIY,mBAAmB,IAAI,CAAC,EAAE;UAC5B5D,cAAc,IAAI,CAAC;UACnB4C,OAAO,CAACG,IAAI,CAAC,mCAAmC/C,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QACrF;MACF;;MAEA;MACA,IAAI,CAAChB,eAAe,CAACT,IAAI,EAAE;QACzB,IAAIuC,sBAAsB,GAAG,CAAC;QAE9B,IAAIlE,kBAAkB,IAAI,CAAC,EAAE;UAC3BkE,sBAAsB,GAAG,CAAC;QAC5B,CAAC,MAAM,IAAIlE,kBAAkB,IAAI,CAAC,EAAE;UAClCkE,sBAAsB,GAAG,CAAC;QAC5B,CAAC,MAAM,IAAIlE,kBAAkB,IAAI,CAAC,EAAE;UAClCkE,sBAAsB,GAAG,CAAC;QAC5B;QAEA,IAAIA,sBAAsB,GAAG,CAAC,EAAE;UAC9B9D,cAAc,IAAI8D,sBAAsB;UACxClB,OAAO,CAACG,IAAI,CAAC,4BAA4BnD,kBAAkB,0BAA0BkE,sBAAsB,aAAa9D,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7J,CAAC,MAAM;UACLJ,OAAO,CAACG,IAAI,CAAC,4BAA4BnD,kBAAkB,oCAAoC,CAAC;QAClG;MACF;;MAEA;MACA,MAAMmE,yBAAyB,GAAGxB,IAAI,CAACG,GAAG,CAAC,EAAE,EAAEH,IAAI,CAACmB,KAAK,CAACD,kBAAkB,CAAC,CAAC;MAE9E,IAAIM,yBAAyB,GAAGP,sBAAsB,IAAIG,YAAY,GAAGI,yBAAyB,EAAE;QAClG,MAAMC,cAAc,GAAG,CAACD,yBAAyB,GAAGJ,YAAY,IAAI,CAAC;QAErE,IAAIM,WAAW,GAAG,CAAC;QACnB,IAAIZ,aAAa,KAAK,UAAU,EAAE;UAChCY,WAAW,GAAG1B,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEU,YAAY,GAAG,EAAE,CAAC;UAC5CR,OAAO,CAACG,IAAI,CAAC,0BAA0BkB,WAAW,CAACjB,OAAO,CAAC,CAAC,CAAC,gBAAgBI,YAAY,CAACJ,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC;QAC5H;QAEA/C,cAAc,GAAG+D,cAAc,GAAGC,WAAW;QAC7CrB,OAAO,CAACG,IAAI,CAAC,qBAAqBgB,yBAAyB,MAAMJ,YAAY,WAAWK,cAAc,MAAMC,WAAW,CAACjB,OAAO,CAAC,CAAC,CAAC,YAAY/C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACnL;;MAEA;MACAhD,cAAc,GAAGuC,IAAI,CAACmB,KAAK,CAACnB,IAAI,CAAC2B,GAAG,CAAC,CAAC,EAAElE,cAAc,CAAC,CAAC,CAAC,CAAC;MAC1DC,cAAc,GAAGsC,IAAI,CAACmB,KAAK,CAACzD,cAAc,CAAC;MAE3C2C,OAAO,CAACG,IAAI,CAAC,0BAA0B/C,cAAc,kBAAkBA,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;MACpG,IAAI/C,cAAc,GAAG,CAAC,EAAE;QACtB2C,OAAO,CAACG,IAAI,CAAC,0BAA0B9C,cAAc,kBAAkBA,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;MACtG,CAAC,MAAM;QACLJ,OAAO,CAACG,IAAI,CAAC,0BAA0B,CAAC;MAC1C;IAEF,CAAC,MAAM;MACL;;MAEA;MACA,MAAMoB,WAAW,GAAG5B,IAAI,CAACC,GAAG,CAACK,QAAQ,CAAC,GAAG,EAAE;MAC3C5C,cAAc,GAAGkE,WAAW;MAC5BvB,OAAO,CAACG,IAAI,CAAC,kBAAkBF,QAAQ,YAAYsB,WAAW,CAACnB,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;;MAEnF;MACA,IAAIjB,cAAc,CAACC,eAAe,CAAC,EAAE;QACnC/B,cAAc,IAAI,CAAC;QACnB2C,OAAO,CAACG,IAAI,CAAC,sCAAsC9C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACxF;MAEA,IAAIhB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QAC/BhB,cAAc,IAAI,CAAC;QACnB2C,OAAO,CAACG,IAAI,CAAC,mCAAmC9C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACrF,CAAC,MAAM,IAAIhB,eAAe,CAACf,KAAK,KAAK,CAAC,EAAE;QACtChB,cAAc,IAAI,CAAC;QACnB2C,OAAO,CAACG,IAAI,CAAC,mCAAmC9C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACrF;;MAEA;MACA,IAAIE,qBAAqB,GAAG,EAAE,EAAE;QAC9B,MAAMkB,KAAK,GAAG,CAAClB,qBAAqB,GAAG,EAAE,IAAI,CAAC;QAC9CjD,cAAc,IAAImE,KAAK;QACvBxB,OAAO,CAACG,IAAI,CAAC,wBAAwBG,qBAAqB,CAACF,OAAO,CAAC,CAAC,CAAC,kBAAkBoB,KAAK,CAACpB,OAAO,CAAC,CAAC,CAAC,aAAa/C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MACzJ;MAEA,IAAIT,IAAI,CAACC,GAAG,CAACR,eAAe,CAACL,MAAM,CAAC,IAAI,CAAC,EAAE;QACzC1B,cAAc,IAAI,CAAC;QACnB2C,OAAO,CAACG,IAAI,CAAC,qCAAqC9C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAErF,IAAIT,IAAI,CAACC,GAAG,CAACR,eAAe,CAACL,MAAM,CAAC,IAAI,CAAC,EAAE;UACzC1B,cAAc,IAAI,CAAC,CAAC,CAAC;UACrB2C,OAAO,CAACG,IAAI,CAAC,oCAAoC9C,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QACtF;MACF;;MAEA;MACA,IAAIE,qBAAqB,GAAG,EAAE,EAAE;QAC9BlD,cAAc,GAAG,CAAC,EAAE,GAAGkD,qBAAqB,IAAI,EAAE;QAClDN,OAAO,CAACG,IAAI,CAAC,+BAA+BG,qBAAqB,CAACF,OAAO,CAAC,CAAC,CAAC,aAAahD,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;MAC9H;;MAEA;MACAhD,cAAc,GAAGuC,IAAI,CAACmB,KAAK,CAAC1D,cAAc,CAAC,CAAC,CAAC;MAC7CC,cAAc,GAAGsC,IAAI,CAACmB,KAAK,CAACnB,IAAI,CAAC2B,GAAG,CAAC,CAAC,EAAEjE,cAAc,CAAC,CAAC,CAAC,CAAC;;MAE1D2C,OAAO,CAACG,IAAI,CAAC,0BAA0B/C,cAAc,kBAAkBA,cAAc,CAACgD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;MACpGJ,OAAO,CAACG,IAAI,CAAC,0BAA0B9C,cAAc,kBAAkBA,cAAc,CAAC+C,OAAO,CAAC,CAAC,CAAC,uCAAuC,CAAC;IAC1I;IAEA7C,qBAAqB,CAACyC,OAAO,CAAC;IAC9B,OAAO;MAAE5C,cAAc;MAAEC;IAAe,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMoE,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,MAAM,GAAG3B,yBAAyB,CAAC,CAAC;IAC1C5C,iBAAiB,CAACuE,MAAM,CAAC;;IAEzB;IACA,IAAIlF,WAAW,EAAE;MACf,MAAM4C,eAAe,GAAGrB,kBAAkB,CAAC,CAAC;MAC5C,IAAIqB,eAAe,EAAE;QACnB,MAAMuC,QAAQ,GAAGvC,eAAe,CAACV,IAAI,GAAGgD,MAAM,CAACtE,cAAc,GAAGsE,MAAM,CAACrE,cAAc;QACrF,MAAMuE,QAAQ,GAAGxC,eAAe,CAACV,IAAI,GAAGgD,MAAM,CAACrE,cAAc,GAAGqE,MAAM,CAACtE,cAAc;QAErFZ,WAAW,CAAC;UACVmF,QAAQ;UACRC,QAAQ;UACRC,WAAW,EAAE;YACX3D,QAAQ,EAAE3B,SAAS,CAAC0B,WAAW,CAACC,QAAQ;YACxCM,QAAQ,EAAEY,eAAe,CAACZ,QAAQ;YAClCO,MAAM,EAAEK,eAAe,CAACL,MAAM;YAC9BnC,WAAW;YACXE,WAAW;YACXgF,UAAU,EAAE9E,kBAAkB;YAC9B+E,GAAG,EAAE1C,uBAAuB,CAACD,eAAe,CAAC,GAAG,EAAE;YAClD4C,YAAY,EAAE,CAAC,GAAG1E,kBAAkB;UACtC;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,MAAMoE,QAAQ,GAAGzD,WAAW,GAAGE,WAAW;IAC1C;IACA,IAAIuD,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;MACpC,MAAMqB,MAAM,GAAG3B,yBAAyB,CAAC,CAAC;MAC1C5C,iBAAiB,CAACuE,MAAM,CAAC;IAC3B;EACF,CAAC,EAAE,CAAC9E,WAAW,EAAEE,WAAW,EAAEE,kBAAkB,EAAET,SAAS,CAAC,CAAC;EAE7D,oBACEJ,OAAA;IAAK8F,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/B/F,OAAA;MAAA+F,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAExBvE,kBAAkB,CAAC,CAAC,gBACnB5B,OAAA,CAAAE,SAAA;MAAA6F,QAAA,gBACE/F,OAAA;QAAK8F,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B/F,OAAA;UAAA+F,QAAA,GAAI,YAAU,EAAC3F,SAAS,CAAC0B,WAAW,CAACC,QAAQ;QAAA;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnDnG,OAAA;UAAA+F,QAAA,GAAG,UAAQ,EAACnE,kBAAkB,CAAC,CAAC,CAACgB,MAAM,GAAG,CAAC,GACvC,QAAQhB,kBAAkB,CAAC,CAAC,CAACgB,MAAM,aAAahB,kBAAkB,CAAC,CAAC,CAACgB,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAC9FhB,kBAAkB,CAAC,CAAC,CAACgB,MAAM,GAAG,CAAC,GAC7B,QAAQY,IAAI,CAACC,GAAG,CAAC7B,kBAAkB,CAAC,CAAC,CAACgB,MAAM,CAAC,EAAE,GAC/C,uBAAuB;QAAA;UAAAoD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAENnG,OAAA;QAAK8F,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB/F,OAAA;UAAA+F,QAAA,EAAI;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/BnG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxB/F,OAAA;YAAA+F,QAAA,GAAO,YACK,EAACnE,kBAAkB,CAAC,CAAC,CAACW,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC,QACnD,eAAAvC,OAAA;cACEoG,IAAI,EAAC,QAAQ;cACbzC,GAAG,EAAC,GAAG;cACPwB,GAAG,EAAC,IAAI;cACRkB,KAAK,EAAE5F,WAAY;cACnB6F,QAAQ,EAAGC,CAAC,IAAK7F,cAAc,CAACyB,QAAQ,CAACoE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC,IAAI,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENnG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxB/F,OAAA;YAAA+F,QAAA,GAAO,YACK,EAACnE,kBAAkB,CAAC,CAAC,CAACW,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC,QACnD,eAAAvC,OAAA;cACEoG,IAAI,EAAC,QAAQ;cACbzC,GAAG,EAAC,GAAG;cACPwB,GAAG,EAAC,IAAI;cACRkB,KAAK,EAAE1F,WAAY;cACnB2F,QAAQ,EAAGC,CAAC,IAAK3F,cAAc,CAACuB,QAAQ,CAACoE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC,IAAI,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENnG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxB/F,OAAA;YAAA+F,QAAA,GAAO,+BAEL,eAAA/F,OAAA;cACEoG,IAAI,EAAC,QAAQ;cACbzC,GAAG,EAAC,GAAG;cACPwB,GAAG,EAAC,IAAI;cACRkB,KAAK,EAAExF,kBAAmB;cAC1ByF,QAAQ,EAAGC,CAAC,IAAKzF,qBAAqB,CAACqB,QAAQ,CAACoE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC,IAAI,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC,eACRnG,OAAA;YAAQ8F,SAAS,EAAC,aAAa;YAACW,KAAK,EAAC,4EAA4E;YAAAV,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1H,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENnG,OAAA;QAAK8F,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClC/F,OAAA;UAAA+F,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BnG,OAAA;UAAK8F,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB/F,OAAA;YAAM8F,SAAS,EAAC,MAAM;YAAAC,QAAA,GAAEnE,kBAAkB,CAAC,CAAC,CAACW,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC,cAAY;UAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACnFnG,OAAA;YAAM8F,SAAS,EAAC,QAAQ;YAAAC,QAAA,EAAEhF,cAAc,CAACE;UAAc;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC,eACNnG,OAAA;UAAK8F,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB/F,OAAA;YAAM8F,SAAS,EAAC,MAAM;YAAAC,QAAA,GAAEnE,kBAAkB,CAAC,CAAC,CAACW,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC,cAAY;UAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACnFnG,OAAA;YAAM8F,SAAS,EAAC,QAAQ;YAAAC,QAAA,EAAEhF,cAAc,CAACG;UAAc;YAAA8E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENnG,OAAA;QAAK8F,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClC/F,OAAA;UAAA+F,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BnG,OAAA;UAAK8F,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAC/B5E,kBAAkB,CAACuF,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACpC5G,OAAA;YAAA+F,QAAA,EAAgBY;UAAM,GAAdC,KAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENnG,OAAA;QAAK8F,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B/F,OAAA;UACE8F,SAAS,EAAC,UAAU;UACpBe,OAAO,EAAEvB,sBAAuB;UAAAS,QAAA,EACjC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETnG,OAAA;UACE8F,SAAS,EAAC,eAAe;UACzBe,OAAO,EAAEvG,UAAW;UAAAyF,QAAA,EACrB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETnG,OAAA;UACE8F,SAAS,EAAC,cAAc;UACxBe,OAAO,EAAEtG,SAAU;UAAAwF,QAAA,EACpB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA,eACN,CAAC,gBAEHnG,OAAA;MAAK8F,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B/F,OAAA;QAAA+F,QAAA,EAAG;MAAiG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxGnG,OAAA;QAAQ6G,OAAO,EAAEvG,UAAW;QAAAyF,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3F,EAAA,CAlgBIL,eAAe;AAAA2G,EAAA,GAAf3G,eAAe;AAogBrB,eAAeA,eAAe;AAAC,IAAA2G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}