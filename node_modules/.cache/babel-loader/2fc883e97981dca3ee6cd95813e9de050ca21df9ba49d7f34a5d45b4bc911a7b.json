{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { parseContract, calculateBridgeScore, calculateBonusBridgeScore } from '../utils/scoring';\n\n/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */\nconst ScoreProcessor = ({\n  currentDeal,\n  onScoreCalculated\n}) => {\n  _s();\n  // Add debug logging\n  useEffect(() => {\n    console.log('ScoreProcessor received deal:', currentDeal);\n  }, [currentDeal]);\n  useEffect(() => {\n    // Only process scores if we have a valid contract and result\n    if (currentDeal && currentDeal.contract && currentDeal.result !== null && currentDeal.result !== undefined) {\n      console.log('Processing score for deal:', currentDeal);\n      processDealScore(currentDeal);\n    }\n  }, [currentDeal === null || currentDeal === void 0 ? void 0 : currentDeal.contract, currentDeal === null || currentDeal === void 0 ? void 0 : currentDeal.result]);\n\n  // Process the current deal and calculate scores\n  const processDealScore = deal => {\n    // Parse the contract string\n    const contractDetails = parseContract(deal.contract, deal.result, deal.vulnerable);\n    if (!contractDetails) {\n      console.error('Unable to parse contract', deal.contract);\n      return;\n    }\n\n    // Calculate standard bridge score\n    const standardScore = calculateBridgeScore(contractDetails);\n    console.log('Standard bridge score calculated:', standardScore);\n\n    // If we have HCP data, calculate bonus bridge score\n    let bonusScore = standardScore;\n    if (deal.handAnalysis) {\n      bonusScore = calculateBonusBridgeScore(contractDetails, deal.handAnalysis);\n      console.log('Bonus bridge score calculated:', bonusScore);\n    }\n\n    // Determine which score to use based on the scoring mode\n    const finalScore = deal.bonusScoringEnabled ? bonusScore : standardScore;\n\n    // Calculate raw score - the maximum absolute value of NS or EW points\n    const rawScore = Math.max(Math.abs(finalScore.nsPoints || 0), Math.abs(finalScore.ewPoints || 0));\n    console.log('Raw score calculated:', rawScore);\n\n    // Format the score for sending to parent component\n    const scoreResult = {\n      nsPoints: finalScore.nsPoints || 0,\n      ewPoints: finalScore.ewPoints || 0,\n      rawScore: rawScore,\n      bonusScoringEnabled: deal.bonusScoringEnabled || false,\n      handAnalysis: deal.handAnalysis || null,\n      madeContract: contractDetails.madeContract\n    };\n    console.log('Final score result:', scoreResult);\n\n    // Send the calculated score to the parent component\n    onScoreCalculated(scoreResult);\n  };\n\n  // This is a utility component, so it doesn't render anything\n  return null;\n};\n_s(ScoreProcessor, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = ScoreProcessor;\nexport default ScoreProcessor;\nvar _c;\n$RefreshReg$(_c, \"ScoreProcessor\");","map":{"version":3,"names":["React","useState","useEffect","parseContract","calculateBridgeScore","calculateBonusBridgeScore","ScoreProcessor","currentDeal","onScoreCalculated","_s","console","log","contract","result","undefined","processDealScore","deal","contractDetails","vulnerable","error","standardScore","bonusScore","handAnalysis","finalScore","bonusScoringEnabled","rawScore","Math","max","abs","nsPoints","ewPoints","scoreResult","madeContract","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/ScoreProcessor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  parseContract, \r\n  calculateBridgeScore, \r\n  calculateBonusBridgeScore\r\n} from '../utils/scoring';\r\n\r\n/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */\r\nconst ScoreProcessor = ({ currentDeal, onScoreCalculated }) => {\r\n  // Add debug logging\r\n  useEffect(() => {\r\n    console.log('ScoreProcessor received deal:', currentDeal);\r\n  }, [currentDeal]);\r\n  \r\n  useEffect(() => {\r\n    // Only process scores if we have a valid contract and result\r\n    if (currentDeal && currentDeal.contract && currentDeal.result !== null && currentDeal.result !== undefined) {\r\n      console.log('Processing score for deal:', currentDeal);\r\n      processDealScore(currentDeal);\r\n    }\r\n  }, [currentDeal?.contract, currentDeal?.result]);\r\n  \r\n  // Process the current deal and calculate scores\r\n  const processDealScore = (deal) => {\r\n    // Parse the contract string\r\n    const contractDetails = parseContract(deal.contract, deal.result, deal.vulnerable);\r\n    \r\n    if (!contractDetails) {\r\n      console.error('Unable to parse contract', deal.contract);\r\n      return;\r\n    }\r\n    \r\n    // Calculate standard bridge score\r\n    const standardScore = calculateBridgeScore(contractDetails);\r\n    console.log('Standard bridge score calculated:', standardScore);\r\n    \r\n    // If we have HCP data, calculate bonus bridge score\r\n    let bonusScore = standardScore;\r\n    \r\n    if (deal.handAnalysis) {\r\n      bonusScore = calculateBonusBridgeScore(contractDetails, deal.handAnalysis);\r\n      console.log('Bonus bridge score calculated:', bonusScore);\r\n    }\r\n    \r\n    // Determine which score to use based on the scoring mode\r\n    const finalScore = deal.bonusScoringEnabled ? bonusScore : standardScore;\r\n    \r\n    // Calculate raw score - the maximum absolute value of NS or EW points\r\n    const rawScore = Math.max(\r\n      Math.abs(finalScore.nsPoints || 0), \r\n      Math.abs(finalScore.ewPoints || 0)\r\n    );\r\n    \r\n    console.log('Raw score calculated:', rawScore);\r\n    \r\n    // Format the score for sending to parent component\r\n    const scoreResult = {\r\n      nsPoints: finalScore.nsPoints || 0,\r\n      ewPoints: finalScore.ewPoints || 0,\r\n      rawScore: rawScore,\r\n      bonusScoringEnabled: deal.bonusScoringEnabled || false,\r\n      handAnalysis: deal.handAnalysis || null,\r\n      madeContract: contractDetails.madeContract\r\n    };\r\n    \r\n    console.log('Final score result:', scoreResult);\r\n    \r\n    // Send the calculated score to the parent component\r\n    onScoreCalculated(scoreResult);\r\n  };\r\n  \r\n  // This is a utility component, so it doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default ScoreProcessor;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,aAAa,EACbC,oBAAoB,EACpBC,yBAAyB,QACpB,kBAAkB;;AAEzB;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC7D;EACAP,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEJ,WAAW,CAAC;EAC3D,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjBL,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,WAAW,IAAIA,WAAW,CAACK,QAAQ,IAAIL,WAAW,CAACM,MAAM,KAAK,IAAI,IAAIN,WAAW,CAACM,MAAM,KAAKC,SAAS,EAAE;MAC1GJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,WAAW,CAAC;MACtDQ,gBAAgB,CAACR,WAAW,CAAC;IAC/B;EACF,CAAC,EAAE,CAACA,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,QAAQ,EAAEL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,MAAM,CAAC,CAAC;;EAEhD;EACA,MAAME,gBAAgB,GAAIC,IAAI,IAAK;IACjC;IACA,MAAMC,eAAe,GAAGd,aAAa,CAACa,IAAI,CAACJ,QAAQ,EAAEI,IAAI,CAACH,MAAM,EAAEG,IAAI,CAACE,UAAU,CAAC;IAElF,IAAI,CAACD,eAAe,EAAE;MACpBP,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEH,IAAI,CAACJ,QAAQ,CAAC;MACxD;IACF;;IAEA;IACA,MAAMQ,aAAa,GAAGhB,oBAAoB,CAACa,eAAe,CAAC;IAC3DP,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAES,aAAa,CAAC;;IAE/D;IACA,IAAIC,UAAU,GAAGD,aAAa;IAE9B,IAAIJ,IAAI,CAACM,YAAY,EAAE;MACrBD,UAAU,GAAGhB,yBAAyB,CAACY,eAAe,EAAED,IAAI,CAACM,YAAY,CAAC;MAC1EZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEU,UAAU,CAAC;IAC3D;;IAEA;IACA,MAAME,UAAU,GAAGP,IAAI,CAACQ,mBAAmB,GAAGH,UAAU,GAAGD,aAAa;;IAExE;IACA,MAAMK,QAAQ,GAAGC,IAAI,CAACC,GAAG,CACvBD,IAAI,CAACE,GAAG,CAACL,UAAU,CAACM,QAAQ,IAAI,CAAC,CAAC,EAClCH,IAAI,CAACE,GAAG,CAACL,UAAU,CAACO,QAAQ,IAAI,CAAC,CACnC,CAAC;IAEDpB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEc,QAAQ,CAAC;;IAE9C;IACA,MAAMM,WAAW,GAAG;MAClBF,QAAQ,EAAEN,UAAU,CAACM,QAAQ,IAAI,CAAC;MAClCC,QAAQ,EAAEP,UAAU,CAACO,QAAQ,IAAI,CAAC;MAClCL,QAAQ,EAAEA,QAAQ;MAClBD,mBAAmB,EAAER,IAAI,CAACQ,mBAAmB,IAAI,KAAK;MACtDF,YAAY,EAAEN,IAAI,CAACM,YAAY,IAAI,IAAI;MACvCU,YAAY,EAAEf,eAAe,CAACe;IAChC,CAAC;IAEDtB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEoB,WAAW,CAAC;;IAE/C;IACAvB,iBAAiB,CAACuB,WAAW,CAAC;EAChC,CAAC;;EAED;EACA,OAAO,IAAI;AACb,CAAC;AAACtB,EAAA,CAjEIH,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAmEpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}