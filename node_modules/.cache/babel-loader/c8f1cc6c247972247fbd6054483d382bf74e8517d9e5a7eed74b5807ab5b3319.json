{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { parseContract, calculateBridgeScore, calculateBonusBridgeScore } from '../utils/scoring';\n\n/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */\nconst ScoreProcessor = ({\n  currentDeal,\n  onScoreCalculated\n}) => {\n  _s();\n  useEffect(() => {\n    // Only process scores if we have a valid contract and result\n    if (currentDeal && currentDeal.contract && currentDeal.result !== null && currentDeal.result !== undefined) {\n      processDealScore(currentDeal);\n    }\n  }, [currentDeal]);\n\n  // Process the current deal and calculate scores\n  const processDealScore = deal => {\n    // Parse the contract string\n    const contractDetails = parseContract(deal.contract, deal.result, deal.vulnerable);\n    if (!contractDetails) {\n      console.error('Unable to parse contract', deal.contract);\n      return;\n    }\n\n    // Calculate standard bridge score\n    const standardScore = calculateBridgeScore(contractDetails);\n\n    // If we have HCP data, calculate bonus bridge score\n    let bonusScore = standardScore;\n    if (deal.handAnalysis) {\n      bonusScore = calculateBonusBridgeScore(contractDetails, deal.handAnalysis);\n    }\n\n    // Determine which score to use based on the scoring mode\n    const finalScore = deal.bonusScoringEnabled ? bonusScore : standardScore;\n\n    // Get the raw score for display\n    const rawScore = deal.bonusScoringEnabled ? bonusScore.rawScore || 0 : Math.max(Math.abs(standardScore.nsPoints || 0), Math.abs(standardScore.ewPoints || 0));\n\n    // Format the score for sending to parent component\n    const scoreResult = {\n      nsPoints: finalScore.nsPoints || 0,\n      ewPoints: finalScore.ewPoints || 0,\n      rawScore: rawScore || 0,\n      bonusScoringEnabled: deal.bonusScoringEnabled || false,\n      handAnalysis: deal.handAnalysis || null,\n      madeContract: contractDetails.madeContract\n    };\n\n    // Send the calculated score to the parent component\n    onScoreCalculated(scoreResult);\n  };\n\n  // This is a utility component, so it doesn't render anything\n  return null;\n};\n_s(ScoreProcessor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ScoreProcessor;\nexport default ScoreProcessor;\nvar _c;\n$RefreshReg$(_c, \"ScoreProcessor\");","map":{"version":3,"names":["React","useState","useEffect","parseContract","calculateBridgeScore","calculateBonusBridgeScore","ScoreProcessor","currentDeal","onScoreCalculated","_s","contract","result","undefined","processDealScore","deal","contractDetails","vulnerable","console","error","standardScore","bonusScore","handAnalysis","finalScore","bonusScoringEnabled","rawScore","Math","max","abs","nsPoints","ewPoints","scoreResult","madeContract","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/ScoreProcessor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  parseContract, \r\n  calculateBridgeScore, \r\n  calculateBonusBridgeScore\r\n} from '../utils/scoring';\r\n\r\n/**\r\n * Bridge Game Score Processor component\r\n * This component acts as a bridge between the game state and the scoring system\r\n * It processes the current deal and applies the scoring rules\r\n */\r\nconst ScoreProcessor = ({ currentDeal, onScoreCalculated }) => {\r\n  useEffect(() => {\r\n    // Only process scores if we have a valid contract and result\r\n    if (currentDeal && currentDeal.contract && currentDeal.result !== null && currentDeal.result !== undefined) {\r\n      processDealScore(currentDeal);\r\n    }\r\n  }, [currentDeal]);\r\n  \r\n  // Process the current deal and calculate scores\r\n  const processDealScore = (deal) => {\r\n    // Parse the contract string\r\n    const contractDetails = parseContract(deal.contract, deal.result, deal.vulnerable);\r\n    \r\n    if (!contractDetails) {\r\n      console.error('Unable to parse contract', deal.contract);\r\n      return;\r\n    }\r\n    \r\n    // Calculate standard bridge score\r\n    const standardScore = calculateBridgeScore(contractDetails);\r\n    \r\n    // If we have HCP data, calculate bonus bridge score\r\n    let bonusScore = standardScore;\r\n    \r\n    if (deal.handAnalysis) {\r\n      bonusScore = calculateBonusBridgeScore(contractDetails, deal.handAnalysis);\r\n    }\r\n    \r\n    // Determine which score to use based on the scoring mode\r\n    const finalScore = deal.bonusScoringEnabled ? bonusScore : standardScore;\r\n    \r\n    // Get the raw score for display\r\n    const rawScore = deal.bonusScoringEnabled ? \r\n      (bonusScore.rawScore || 0) : \r\n      Math.max(\r\n        Math.abs(standardScore.nsPoints || 0), \r\n        Math.abs(standardScore.ewPoints || 0)\r\n      );\r\n    \r\n    // Format the score for sending to parent component\r\n    const scoreResult = {\r\n      nsPoints: finalScore.nsPoints || 0,\r\n      ewPoints: finalScore.ewPoints || 0,\r\n      rawScore: rawScore || 0,\r\n      bonusScoringEnabled: deal.bonusScoringEnabled || false,\r\n      handAnalysis: deal.handAnalysis || null,\r\n      madeContract: contractDetails.madeContract\r\n    };\r\n    \r\n    // Send the calculated score to the parent component\r\n    onScoreCalculated(scoreResult);\r\n  };\r\n  \r\n  // This is a utility component, so it doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default ScoreProcessor;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,aAAa,EACbC,oBAAoB,EACpBC,yBAAyB,QACpB,kBAAkB;;AAEzB;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC7DP,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,WAAW,IAAIA,WAAW,CAACG,QAAQ,IAAIH,WAAW,CAACI,MAAM,KAAK,IAAI,IAAIJ,WAAW,CAACI,MAAM,KAAKC,SAAS,EAAE;MAC1GC,gBAAgB,CAACN,WAAW,CAAC;IAC/B;EACF,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMM,gBAAgB,GAAIC,IAAI,IAAK;IACjC;IACA,MAAMC,eAAe,GAAGZ,aAAa,CAACW,IAAI,CAACJ,QAAQ,EAAEI,IAAI,CAACH,MAAM,EAAEG,IAAI,CAACE,UAAU,CAAC;IAElF,IAAI,CAACD,eAAe,EAAE;MACpBE,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEJ,IAAI,CAACJ,QAAQ,CAAC;MACxD;IACF;;IAEA;IACA,MAAMS,aAAa,GAAGf,oBAAoB,CAACW,eAAe,CAAC;;IAE3D;IACA,IAAIK,UAAU,GAAGD,aAAa;IAE9B,IAAIL,IAAI,CAACO,YAAY,EAAE;MACrBD,UAAU,GAAGf,yBAAyB,CAACU,eAAe,EAAED,IAAI,CAACO,YAAY,CAAC;IAC5E;;IAEA;IACA,MAAMC,UAAU,GAAGR,IAAI,CAACS,mBAAmB,GAAGH,UAAU,GAAGD,aAAa;;IAExE;IACA,MAAMK,QAAQ,GAAGV,IAAI,CAACS,mBAAmB,GACtCH,UAAU,CAACI,QAAQ,IAAI,CAAC,GACzBC,IAAI,CAACC,GAAG,CACND,IAAI,CAACE,GAAG,CAACR,aAAa,CAACS,QAAQ,IAAI,CAAC,CAAC,EACrCH,IAAI,CAACE,GAAG,CAACR,aAAa,CAACU,QAAQ,IAAI,CAAC,CACtC,CAAC;;IAEH;IACA,MAAMC,WAAW,GAAG;MAClBF,QAAQ,EAAEN,UAAU,CAACM,QAAQ,IAAI,CAAC;MAClCC,QAAQ,EAAEP,UAAU,CAACO,QAAQ,IAAI,CAAC;MAClCL,QAAQ,EAAEA,QAAQ,IAAI,CAAC;MACvBD,mBAAmB,EAAET,IAAI,CAACS,mBAAmB,IAAI,KAAK;MACtDF,YAAY,EAAEP,IAAI,CAACO,YAAY,IAAI,IAAI;MACvCU,YAAY,EAAEhB,eAAe,CAACgB;IAChC,CAAC;;IAED;IACAvB,iBAAiB,CAACsB,WAAW,CAAC;EAChC,CAAC;;EAED;EACA,OAAO,IAAI;AACb,CAAC;AAACrB,EAAA,CAvDIH,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAyDpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}