{"ast":null,"code":"// Wake Lock API utility functions\nlet wakeLock = null;\n\n// Function to request a wake lock\nexport const requestWakeLock = async () => {\n  try {\n    if ('wakeLock' in navigator) {\n      // Request a screen wake lock\n      wakeLock = await navigator.wakeLock.request('screen');\n\n      // Add event listener to release and re-acquire wake lock if page visibility changes\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n      console.log('Wake Lock is active');\n      return true;\n    } else {\n      console.log('Wake Lock API not supported in this browser');\n      return false;\n    }\n  } catch (err) {\n    console.error(`Error requesting Wake Lock: ${err.name}, ${err.message}`);\n    return false;\n  }\n};\n\n// Function to release the wake lock\nexport const releaseWakeLock = async () => {\n  if (wakeLock) {\n    try {\n      await wakeLock.release();\n      wakeLock = null;\n\n      // Remove the event listener\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      console.log('Wake Lock has been released');\n      return true;\n    } catch (err) {\n      console.error(`Error releasing Wake Lock: ${err.name}, ${err.message}`);\n      return false;\n    }\n  }\n  return true; // Already released\n};\n\n// Handle visibility change events to release/re-acquire the wake lock\nconst handleVisibilityChange = async () => {\n  if (wakeLock !== null && document.visibilityState === 'visible') {\n    // Page has become visible again, reacquire the wake lock\n    wakeLock = await navigator.wakeLock.request('screen');\n    console.log('Wake Lock re-acquired');\n  }\n};\n\n// Check if the Wake Lock API is supported\nexport const isWakeLockSupported = () => {\n  return 'wakeLock' in navigator;\n};\n\n// Check if wake lock is currently active\nexport const isWakeLockActive = () => {\n  return wakeLock !== null;\n};","map":{"version":3,"names":["wakeLock","requestWakeLock","navigator","request","document","addEventListener","handleVisibilityChange","console","log","err","error","name","message","releaseWakeLock","release","removeEventListener","visibilityState","isWakeLockSupported","isWakeLockActive"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/wakeLock.js"],"sourcesContent":["// Wake Lock API utility functions\r\nlet wakeLock = null;\r\n\r\n// Function to request a wake lock\r\nexport const requestWakeLock = async () => {\r\n  try {\r\n    if ('wakeLock' in navigator) {\r\n      // Request a screen wake lock\r\n      wakeLock = await navigator.wakeLock.request('screen');\r\n      \r\n      // Add event listener to release and re-acquire wake lock if page visibility changes\r\n      document.addEventListener('visibilitychange', handleVisibilityChange);\r\n      \r\n      console.log('Wake Lock is active');\r\n      return true;\r\n    } else {\r\n      console.log('Wake Lock API not supported in this browser');\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    console.error(`Error requesting Wake Lock: ${err.name}, ${err.message}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to release the wake lock\r\nexport const releaseWakeLock = async () => {\r\n  if (wakeLock) {\r\n    try {\r\n      await wakeLock.release();\r\n      wakeLock = null;\r\n      \r\n      // Remove the event listener\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      \r\n      console.log('Wake Lock has been released');\r\n      return true;\r\n    } catch (err) {\r\n      console.error(`Error releasing Wake Lock: ${err.name}, ${err.message}`);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return true; // Already released\r\n};\r\n\r\n// Handle visibility change events to release/re-acquire the wake lock\r\nconst handleVisibilityChange = async () => {\r\n  if (wakeLock !== null && document.visibilityState === 'visible') {\r\n    // Page has become visible again, reacquire the wake lock\r\n    wakeLock = await navigator.wakeLock.request('screen');\r\n    console.log('Wake Lock re-acquired');\r\n  }\r\n};\r\n\r\n// Check if the Wake Lock API is supported\r\nexport const isWakeLockSupported = () => {\r\n  return 'wakeLock' in navigator;\r\n};\r\n\r\n// Check if wake lock is currently active\r\nexport const isWakeLockActive = () => {\r\n  return wakeLock !== null;\r\n};"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAG,IAAI;;AAEnB;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,IAAI,UAAU,IAAIC,SAAS,EAAE;MAC3B;MACAF,QAAQ,GAAG,MAAME,SAAS,CAACF,QAAQ,CAACG,OAAO,CAAC,QAAQ,CAAC;;MAErD;MACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAEC,sBAAsB,CAAC;MAErEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC,OAAO,IAAI;IACb,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,+BAA+BD,GAAG,CAACE,IAAI,KAAKF,GAAG,CAACG,OAAO,EAAE,CAAC;IACxE,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAIb,QAAQ,EAAE;IACZ,IAAI;MACF,MAAMA,QAAQ,CAACc,OAAO,CAAC,CAAC;MACxBd,QAAQ,GAAG,IAAI;;MAEf;MACAI,QAAQ,CAACW,mBAAmB,CAAC,kBAAkB,EAAET,sBAAsB,CAAC;MAExEC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,8BAA8BD,GAAG,CAACE,IAAI,KAAKF,GAAG,CAACG,OAAO,EAAE,CAAC;MACvE,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA,MAAMN,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAIN,QAAQ,KAAK,IAAI,IAAII,QAAQ,CAACY,eAAe,KAAK,SAAS,EAAE;IAC/D;IACAhB,QAAQ,GAAG,MAAME,SAAS,CAACF,QAAQ,CAACG,OAAO,CAAC,QAAQ,CAAC;IACrDI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAO,UAAU,IAAIf,SAAS;AAChC,CAAC;;AAED;AACA,OAAO,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAOlB,QAAQ,KAAK,IAAI;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}