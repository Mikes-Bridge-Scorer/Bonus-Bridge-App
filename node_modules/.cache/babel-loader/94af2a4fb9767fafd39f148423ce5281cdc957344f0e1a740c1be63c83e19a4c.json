{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TrickInput.css';\n\n/**\r\n * Component for handling trick input in the Bridge game\r\n * @param {Object} props - Component props\r\n * @param {Function} props.onTrickChange - Function to handle trick changes\r\n * @param {Number} props.initialResult - Initial result value\r\n * @param {String} props.contract - Current contract\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult,\n  contract\n}) => {\n  _s();\n  const [selectedTrick, setSelectedTrick] = useState(null);\n\n  // Parse the contract to determine required tricks\n  const getRequiredTricks = () => {\n    if (!contract) return 7; // Default to 7 if no contract\n\n    const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n    if (!contractMatch) return 7;\n    const level = parseInt(contractMatch[1]);\n    return level + 6; // Required tricks = level + 6\n  };\n\n  // Calculate result based on selected trick and required tricks\n  const calculateResult = tricks => {\n    const requiredTricks = getRequiredTricks();\n    return tricks - requiredTricks;\n  };\n\n  // Get all possible tricks (0-13)\n  const getTrickOptions = () => {\n    return Array.from({\n      length: 14\n    }, (_, i) => i);\n  };\n\n  // Initialize with initial result if provided\n  useEffect(() => {\n    if (contract && initialResult !== null && initialResult !== undefined) {\n      const requiredTricks = getRequiredTricks();\n      setSelectedTrick(requiredTricks + initialResult);\n    } else {\n      setSelectedTrick(null);\n    }\n  }, [initialResult, contract]);\n\n  // Handle trick selection\n  const handleTrickSelect = tricks => {\n    setSelectedTrick(tricks);\n    const result = calculateResult(tricks);\n    onTrickChange(result, tricks);\n  };\n\n  // Format trick result for display\n  const formatTrickResult = tricks => {\n    if (tricks === null || tricks === undefined) return '';\n    const requiredTricks = getRequiredTricks();\n    const result = tricks - requiredTricks;\n    if (result === 0) {\n      return 'Made exactly';\n    } else if (result > 0) {\n      return `Made +${result}`;\n    } else {\n      return `Down ${Math.abs(result)}`;\n    }\n  };\n\n  // Determine if a contract is set/defined\n  const hasContract = !!contract;\n\n  // Get trick options\n  const trickOptions = getTrickOptions();\n\n  // Get required tricks for display\n  const requiredTricks = getRequiredTricks();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trick-input\",\n    children: [!hasContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-contract-message\",\n      children: \"Please select a contract first\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), hasContract && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"required-tricks-info\",\n        children: [\"Required tricks: \", requiredTricks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tricks-grid\",\n        children: trickOptions.map(tricks => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trick-btn ${selectedTrick === tricks ? 'selected' : ''} ${tricks < requiredTricks ? 'down' : tricks === requiredTricks ? 'exact' : 'over'}`,\n          onClick: () => handleTrickSelect(tricks),\n          children: tricks\n        }, `tricks-${tricks}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), selectedTrick !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trick-result\",\n        children: formatTrickResult(selectedTrick)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"PJWRhvOd4OeXkr0fhyQhnM8fkDU=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TrickInput","onTrickChange","initialResult","contract","_s","selectedTrick","setSelectedTrick","getRequiredTricks","contractMatch","match","level","parseInt","calculateResult","tricks","requiredTricks","getTrickOptions","Array","from","length","_","i","undefined","handleTrickSelect","result","formatTrickResult","Math","abs","hasContract","trickOptions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrickInput.css'; \r\n\r\n/**\r\n * Component for handling trick input in the Bridge game\r\n * @param {Object} props - Component props\r\n * @param {Function} props.onTrickChange - Function to handle trick changes\r\n * @param {Number} props.initialResult - Initial result value\r\n * @param {String} props.contract - Current contract\r\n */\r\nconst TrickInput = ({ onTrickChange, initialResult, contract }) => {\r\n  const [selectedTrick, setSelectedTrick] = useState(null);\r\n  \r\n  // Parse the contract to determine required tricks\r\n  const getRequiredTricks = () => {\r\n    if (!contract) return 7; // Default to 7 if no contract\r\n    \r\n    const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n    if (!contractMatch) return 7;\r\n    \r\n    const level = parseInt(contractMatch[1]);\r\n    return level + 6; // Required tricks = level + 6\r\n  };\r\n  \r\n  // Calculate result based on selected trick and required tricks\r\n  const calculateResult = (tricks) => {\r\n    const requiredTricks = getRequiredTricks();\r\n    return tricks - requiredTricks;\r\n  };\r\n  \r\n  // Get all possible tricks (0-13)\r\n  const getTrickOptions = () => {\r\n    return Array.from({ length: 14 }, (_, i) => i);\r\n  };\r\n  \r\n  // Initialize with initial result if provided\r\n  useEffect(() => {\r\n    if (contract && initialResult !== null && initialResult !== undefined) {\r\n      const requiredTricks = getRequiredTricks();\r\n      setSelectedTrick(requiredTricks + initialResult);\r\n    } else {\r\n      setSelectedTrick(null);\r\n    }\r\n  }, [initialResult, contract]);\r\n  \r\n  // Handle trick selection\r\n  const handleTrickSelect = (tricks) => {\r\n    setSelectedTrick(tricks);\r\n    const result = calculateResult(tricks);\r\n    onTrickChange(result, tricks);\r\n  };\r\n  \r\n  // Format trick result for display\r\n  const formatTrickResult = (tricks) => {\r\n    if (tricks === null || tricks === undefined) return '';\r\n    \r\n    const requiredTricks = getRequiredTricks();\r\n    const result = tricks - requiredTricks;\r\n    \r\n    if (result === 0) {\r\n      return 'Made exactly';\r\n    } else if (result > 0) {\r\n      return `Made +${result}`;\r\n    } else {\r\n      return `Down ${Math.abs(result)}`;\r\n    }\r\n  };\r\n  \r\n  // Determine if a contract is set/defined\r\n  const hasContract = !!contract;\r\n  \r\n  // Get trick options\r\n  const trickOptions = getTrickOptions();\r\n  \r\n  // Get required tricks for display\r\n  const requiredTricks = getRequiredTricks();\r\n  \r\n  return (\r\n    <div className=\"trick-input\">\r\n      {!hasContract && (\r\n        <div className=\"no-contract-message\">\r\n          Please select a contract first\r\n        </div>\r\n      )}\r\n      \r\n      {hasContract && (\r\n        <>\r\n          <div className=\"required-tricks-info\">\r\n            Required tricks: {requiredTricks}\r\n          </div>\r\n          \r\n          <div className=\"tricks-grid\">\r\n            {trickOptions.map(tricks => (\r\n              <button\r\n                key={`tricks-${tricks}`}\r\n                className={`trick-btn ${selectedTrick === tricks ? 'selected' : ''} ${\r\n                  tricks < requiredTricks ? 'down' : \r\n                  tricks === requiredTricks ? 'exact' : 'over'\r\n                }`}\r\n                onClick={() => handleTrickSelect(tricks)}\r\n              >\r\n                {tricks}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          \r\n          {selectedTrick !== null && (\r\n            <div className=\"trick-result\">\r\n              {formatTrickResult(selectedTrick)}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}