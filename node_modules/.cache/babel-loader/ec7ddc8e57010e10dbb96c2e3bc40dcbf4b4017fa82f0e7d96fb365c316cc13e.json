{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult,\n  contract\n}) => {\n  _s();\n  const [selectedButton, setSelectedButton] = useState(null);\n\n  // Reset the selected button when contract changes\n  useEffect(() => {\n    console.log(\"TrickInput: contract changed to:\", contract);\n    setSelectedButton(null);\n  }, [contract]);\n\n  // Initialize from props if provided\n  useEffect(() => {\n    console.log(\"TrickInput: initialResult changed to:\", initialResult);\n\n    // If initialResult is null, reset the selection\n    if (initialResult === null) {\n      setSelectedButton(null);\n      return;\n    }\n\n    // If we have a valid initialResult, select the appropriate button\n    if (initialResult !== undefined) {\n      // Parse the contract to determine the required tricks\n      if (contract) {\n        const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n        if (match) {\n          const level = parseInt(match[1]);\n          const requiredTricks = level + 6;\n\n          // Calculate the tricks taken based on the required tricks and result\n          const tricksTaken = requiredTricks + initialResult;\n          setSelectedButton(tricksTaken);\n        }\n      }\n    }\n  }, [initialResult, contract]);\n\n  // Create an array of possible tricks (0-13)\n  const possibleTricks = Array.from({\n    length: 14\n  }, (_, i) => i);\n\n  // Handle trick button click\n  const handleTrickClick = tricks => {\n    setSelectedButton(tricks);\n\n    // Only calculate result if we have a valid contract\n    if (contract) {\n      const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n      if (match) {\n        const level = parseInt(match[1]);\n        const requiredTricks = level + 6;\n\n        // Calculate result (positive if over, negative if under)\n        const result = tricks - requiredTricks;\n\n        // Pass the result and tricks back to parent\n        onTrickChange(result, tricks);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trick-input\",\n    children: possibleTricks.map(tricks => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: selectedButton === tricks ? 'selected' : '',\n      onClick: () => handleTrickClick(tricks),\n      children: tricks\n    }, tricks, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"jLxCGviMxJMf1d/YTWQswhJBKy0=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TrickInput","onTrickChange","initialResult","contract","_s","selectedButton","setSelectedButton","console","log","undefined","match","level","parseInt","requiredTricks","tricksTaken","possibleTricks","Array","from","length","_","i","handleTrickClick","tricks","result","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TrickInput = ({ onTrickChange, initialResult, contract }) => {\r\n  const [selectedButton, setSelectedButton] = useState(null);\r\n  \r\n  // Reset the selected button when contract changes\r\n  useEffect(() => {\r\n    console.log(\"TrickInput: contract changed to:\", contract);\r\n    setSelectedButton(null);\r\n  }, [contract]);\r\n  \r\n  // Initialize from props if provided\r\n  useEffect(() => {\r\n    console.log(\"TrickInput: initialResult changed to:\", initialResult);\r\n    \r\n    // If initialResult is null, reset the selection\r\n    if (initialResult === null) {\r\n      setSelectedButton(null);\r\n      return;\r\n    }\r\n    \r\n    // If we have a valid initialResult, select the appropriate button\r\n    if (initialResult !== undefined) {\r\n      // Parse the contract to determine the required tricks\r\n      if (contract) {\r\n        const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n        if (match) {\r\n          const level = parseInt(match[1]);\r\n          const requiredTricks = level + 6;\r\n          \r\n          // Calculate the tricks taken based on the required tricks and result\r\n          const tricksTaken = requiredTricks + initialResult;\r\n          setSelectedButton(tricksTaken);\r\n        }\r\n      }\r\n    }\r\n  }, [initialResult, contract]);\r\n  \r\n  // Create an array of possible tricks (0-13)\r\n  const possibleTricks = Array.from({ length: 14 }, (_, i) => i);\r\n  \r\n  // Handle trick button click\r\n  const handleTrickClick = (tricks) => {\r\n    setSelectedButton(tricks);\r\n    \r\n    // Only calculate result if we have a valid contract\r\n    if (contract) {\r\n      const match = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n      if (match) {\r\n        const level = parseInt(match[1]);\r\n        const requiredTricks = level + 6;\r\n        \r\n        // Calculate result (positive if over, negative if under)\r\n        const result = tricks - requiredTricks;\r\n        \r\n        // Pass the result and tricks back to parent\r\n        onTrickChange(result, tricks);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"trick-input\">\r\n      {possibleTricks.map(tricks => (\r\n        <button\r\n          key={tricks}\r\n          className={selectedButton === tricks ? 'selected' : ''}\r\n          onClick={() => handleTrickClick(tricks)}\r\n        >\r\n          {tricks}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,aAAa;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEL,QAAQ,CAAC;IACzDG,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;;EAEd;EACAN,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEN,aAAa,CAAC;;IAEnE;IACA,IAAIA,aAAa,KAAK,IAAI,EAAE;MAC1BI,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACF;;IAEA;IACA,IAAIJ,aAAa,KAAKO,SAAS,EAAE;MAC/B;MACA,IAAIN,QAAQ,EAAE;QACZ,MAAMO,KAAK,GAAGP,QAAQ,CAACO,KAAK,CAAC,oCAAoC,CAAC;QAClE,IAAIA,KAAK,EAAE;UACT,MAAMC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UAChC,MAAMG,cAAc,GAAGF,KAAK,GAAG,CAAC;;UAEhC;UACA,MAAMG,WAAW,GAAGD,cAAc,GAAGX,aAAa;UAClDI,iBAAiB,CAACQ,WAAW,CAAC;QAChC;MACF;IACF;EACF,CAAC,EAAE,CAACZ,aAAa,EAAEC,QAAQ,CAAC,CAAC;;EAE7B;EACA,MAAMY,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;;EAE9D;EACA,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;IACnChB,iBAAiB,CAACgB,MAAM,CAAC;;IAEzB;IACA,IAAInB,QAAQ,EAAE;MACZ,MAAMO,KAAK,GAAGP,QAAQ,CAACO,KAAK,CAAC,oCAAoC,CAAC;MAClE,IAAIA,KAAK,EAAE;QACT,MAAMC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC,MAAMG,cAAc,GAAGF,KAAK,GAAG,CAAC;;QAEhC;QACA,MAAMY,MAAM,GAAGD,MAAM,GAAGT,cAAc;;QAEtC;QACAZ,aAAa,CAACsB,MAAM,EAAED,MAAM,CAAC;MAC/B;IACF;EACF,CAAC;EAED,oBACEvB,OAAA;IAAKyB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBV,cAAc,CAACW,GAAG,CAACJ,MAAM,iBACxBvB,OAAA;MAEEyB,SAAS,EAAEnB,cAAc,KAAKiB,MAAM,GAAG,UAAU,GAAG,EAAG;MACvDK,OAAO,EAAEA,CAAA,KAAMN,gBAAgB,CAACC,MAAM,CAAE;MAAAG,QAAA,EAEvCH;IAAM,GAJFA,MAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKL,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAxEIJ,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA0EhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}