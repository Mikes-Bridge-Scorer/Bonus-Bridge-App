{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\MikesBridge\\\\bonusbridge\\\\src\\\\components\\\\TrickInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TrickInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrickInput = ({\n  onTrickChange,\n  initialResult = null,\n  contract = '',\n  onChangeContract\n}) => {\n  _s();\n  const [selectedTrick, setSelectedTrick] = useState(null);\n  const [requiredTricks, setRequiredTricks] = useState(7);\n\n  // Calculate required tricks when contract changes\n  useEffect(() => {\n    if (contract) {\n      const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\n      if (contractMatch) {\n        const level = parseInt(contractMatch[1]);\n        setRequiredTricks(level + 6);\n      }\n    }\n  }, [contract]);\n\n  // Set selected trick from initialResult if provided\n  useEffect(() => {\n    if (initialResult !== null && requiredTricks) {\n      const actualTricks = requiredTricks + initialResult;\n      setSelectedTrick(actualTricks);\n    }\n  }, [initialResult, requiredTricks]);\n\n  // Handle trick button click\n  const handleTrickClick = numTricks => {\n    setSelectedTrick(numTricks);\n    const result = numTricks - requiredTricks;\n    onTrickChange(result, numTricks);\n  };\n\n  // Render trick grid with improved styling\n  const renderTrickGrid = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trick-grid\",\n      children: Array.from({\n        length: 14\n      }, (_, i) => {\n        // Only create buttons for tricks 0-13\n        if (i <= 13) {\n          const isExact = i === requiredTricks;\n          const isMade = i > requiredTricks;\n          const isDown = i < requiredTricks;\n\n          // Determine button class based on relation to required tricks\n          let buttonClass = \"trick-btn\";\n          if (isDown) buttonClass += \" trick-btn-down\";else if (isExact) buttonClass += \" trick-btn-exact\";else if (isMade) buttonClass += \" trick-btn-made\";\n\n          // Add selected class if this button is selected\n          if (selectedTrick === i) buttonClass += \" selected\";\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: buttonClass,\n            onClick: () => handleTrickClick(i),\n            children: i\n          }, `trick-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trick-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"required-tricks\",\n      children: [\"Required tricks: \", requiredTricks]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), renderTrickGrid(), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"change-contract-btn\",\n      onClick: onChangeContract,\n      children: \"Change Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(TrickInput, \"/QmD/W+wxqgdg5tWOmifM1V76DQ=\");\n_c = TrickInput;\nexport default TrickInput;\nvar _c;\n$RefreshReg$(_c, \"TrickInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TrickInput","onTrickChange","initialResult","contract","onChangeContract","_s","selectedTrick","setSelectedTrick","requiredTricks","setRequiredTricks","contractMatch","match","level","parseInt","actualTricks","handleTrickClick","numTricks","result","renderTrickGrid","className","children","Array","from","length","_","i","isExact","isMade","isDown","buttonClass","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/components/TrickInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrickInput.css';\r\n\r\nconst TrickInput = ({ onTrickChange, initialResult = null, contract = '', onChangeContract }) => {\r\n  const [selectedTrick, setSelectedTrick] = useState(null);\r\n  const [requiredTricks, setRequiredTricks] = useState(7);\r\n  \r\n  // Calculate required tricks when contract changes\r\n  useEffect(() => {\r\n    if (contract) {\r\n      const contractMatch = contract.match(/(\\d)([♣♦♥♠]|NT)\\s+([NESW])(X{0,2})/);\r\n      if (contractMatch) {\r\n        const level = parseInt(contractMatch[1]);\r\n        setRequiredTricks(level + 6);\r\n      }\r\n    }\r\n  }, [contract]);\r\n  \r\n  // Set selected trick from initialResult if provided\r\n  useEffect(() => {\r\n    if (initialResult !== null && requiredTricks) {\r\n      const actualTricks = requiredTricks + initialResult;\r\n      setSelectedTrick(actualTricks);\r\n    }\r\n  }, [initialResult, requiredTricks]);\r\n  \r\n  // Handle trick button click\r\n  const handleTrickClick = (numTricks) => {\r\n    setSelectedTrick(numTricks);\r\n    const result = numTricks - requiredTricks;\r\n    onTrickChange(result, numTricks);\r\n  };\r\n  \r\n  // Render trick grid with improved styling\r\n  const renderTrickGrid = () => {\r\n    return (\r\n      <div className=\"trick-grid\">\r\n        {Array.from({ length: 14 }, (_, i) => {\r\n          // Only create buttons for tricks 0-13\r\n          if (i <= 13) {\r\n            const isExact = i === requiredTricks;\r\n            const isMade = i > requiredTricks;\r\n            const isDown = i < requiredTricks;\r\n            \r\n            // Determine button class based on relation to required tricks\r\n            let buttonClass = \"trick-btn\";\r\n            if (isDown) buttonClass += \" trick-btn-down\";\r\n            else if (isExact) buttonClass += \" trick-btn-exact\";\r\n            else if (isMade) buttonClass += \" trick-btn-made\";\r\n            \r\n            // Add selected class if this button is selected\r\n            if (selectedTrick === i) buttonClass += \" selected\";\r\n            \r\n            return (\r\n              <button\r\n                key={`trick-${i}`}\r\n                className={buttonClass}\r\n                onClick={() => handleTrickClick(i)}\r\n              >\r\n                {i}\r\n              </button>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div className=\"trick-input\">\r\n      <div className=\"required-tricks\">\r\n        Required tricks: {requiredTricks}\r\n      </div>\r\n      \r\n      {/* Trick Grid */}\r\n      {renderTrickGrid()}\r\n      \r\n      {/* Change Contract Button - ONLY ONE BUTTON */}\r\n      <button \r\n        className=\"change-contract-btn\"\r\n        onClick={onChangeContract}\r\n      >\r\n        Change Contract\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrickInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}