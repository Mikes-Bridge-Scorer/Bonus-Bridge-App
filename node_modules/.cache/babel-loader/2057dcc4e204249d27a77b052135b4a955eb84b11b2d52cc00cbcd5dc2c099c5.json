{"ast":null,"code":"// TrialManager.js - Complete version with 7-digit code system and one-time use\nimport CryptoJS from 'crypto-js';\nclass TrialManager {\n  constructor() {\n    // TEST SETTINGS - 5 deals total, warning at 60% (3 deals)\n    this.maxDeals = 5; // Initial trial deals  \n    this.warningThreshold = 3; // Warning at 3 deals (60%)\n\n    // Security settings\n    this.storageKey = 'bonus_bridge_trial';\n    this.hashKey = 'bb_secure_2025';\n\n    // Generate unique identifier for this browser\n    this.browserFingerprint = this.generateFingerprint();\n\n    // Initialize the trial\n    this.initialize();\n  }\n\n  // Create a unique identifier for this browser/device\n  generateFingerprint() {\n    const data = {\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      screen: `${window.screen.width}x${window.screen.height}`,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    };\n    return CryptoJS.SHA256(JSON.stringify(data)).toString();\n  }\n\n  // Initialize trial data on first load\n  initialize() {\n    const existing = this.getTrialData();\n    if (!existing) {\n      // First time user - create new trial\n      const trialData = {\n        startDate: new Date().toISOString(),\n        fingerprint: this.browserFingerprint,\n        dealsPlayed: 0,\n        maxDeals: this.maxDeals,\n        gamesCompleted: 0,\n        isExpired: false,\n        warnings: 0,\n        extensions: [] // Track all extensions applied (prevents reuse)\n      };\n      this.saveTrialData(trialData);\n      console.log(`ðŸŽ¯ Trial initialized: ${this.maxDeals} deals available`);\n    } else {\n      // Existing user - check fingerprint\n      if (existing.fingerprint !== this.browserFingerprint) {\n        console.warn('ðŸš« Browser fingerprint mismatch - trial reset');\n        this.resetTrial();\n      }\n\n      // Update maxDeals from stored data (in case it was extended)\n      this.maxDeals = existing.maxDeals || this.maxDeals;\n    }\n  }\n\n  // Validate 7-character extension code (6 letters/digits + 1 digit)  \n  // Custom mapping: A=3, B=4, C=5, ..., Z=28, and 0=0, 1=1, ..., 9=9\n  validateExtensionCode(code) {\n    if (!code || typeof code !== 'string') return null;\n\n    // Remove any spaces and convert to uppercase\n    const cleanCode = code.replace(/\\s/g, '').toUpperCase();\n    if (cleanCode.length !== 7) return null;\n\n    // Check format: 6 letters/digits + 1 digit (1-9)\n    if (!/^[A-Z0-9]{6}[1-9]$/.test(cleanCode)) return null;\n\n    // Extract first 6 characters and last digit\n    const firstSix = cleanCode.substring(0, 6);\n    const lastDigit = parseInt(cleanCode.substring(6, 7));\n\n    // Calculate sum of first 6 characters\n    const sum = firstSix.split('').reduce((acc, char) => {\n      if (char >= 'A' && char <= 'Z') {\n        // Letters: A=3, B=4, etc.\n        return acc + (char.charCodeAt(0) - 62); // A=65, so 65-62=3\n      } else {\n        // Digits: 0=0, 1=1, etc.\n        return acc + parseInt(char);\n      }\n    }, 0);\n\n    // Check if sum equals 100\n    if (sum !== 100) return null;\n\n    // Calculate number of deals this code grants\n    const dealsGranted = lastDigit * 100;\n    return {\n      isValid: true,\n      dealsGranted: dealsGranted,\n      codeUsed: cleanCode,\n      sum: sum,\n      multiplier: lastDigit\n    };\n  }\n\n  // Generate a sample extension code (for testing/demonstration)\n  // Using custom mapping: A=3, B=4, C=5, ..., Z=28\n  generateSampleCode(dealPackage = 100) {\n    // dealPackage should be 100, 200, 300, etc. up to 900\n    const multiplier = dealPackage / 100;\n    if (multiplier < 1 || multiplier > 9 || dealPackage % 100 !== 0) {\n      throw new Error('Deal package must be 100, 200, 300, ... up to 900');\n    }\n\n    // Generate 6 random letter values that sum to 100\n    // Letter values: A=3, B=4, ..., Z=28\n    let values = [];\n    let remainingSum = 100;\n\n    // Generate first 5 letters (values 3-28 each)\n    for (let i = 0; i < 5; i++) {\n      const maxForThis = Math.min(28, remainingSum - (5 - i) * 3); // Ensure we can finish\n      const minForThis = Math.max(3, remainingSum - (5 - i) * 28); // Ensure we don't exceed\n      const value = Math.floor(Math.random() * (maxForThis - minForThis + 1)) + minForThis;\n      values.push(value);\n      remainingSum -= value;\n    }\n\n    // Last letter value is whatever makes the sum = 100\n    values.push(remainingSum);\n\n    // Shuffle the values to make them less predictable\n    for (let i = values.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [values[i], values[j]] = [values[j], values[i]];\n    }\n\n    // Convert values to letters (3=A, 4=B, etc.)\n    const letters = values.map(value => String.fromCharCode(62 + value));\n\n    // Create the 7-character code\n    const code = letters.join('') + multiplier.toString();\n    return {\n      code: code,\n      dealsGranted: dealPackage,\n      sum: 100,\n      multiplier: multiplier,\n      letterValues: values\n    };\n  }\n\n  // Extend trial with 7-digit code (ONE-TIME USE ONLY)\n  extendTrial(code) {\n    const validation = this.validateExtensionCode(code);\n    if (!validation || !validation.isValid) {\n      return {\n        success: false,\n        message: 'Invalid extension code. Please check the 7-digit code and try again.'\n      };\n    }\n    const data = this.getTrialData();\n    if (!data) {\n      return {\n        success: false,\n        message: 'No trial data found'\n      };\n    }\n\n    // CRITICAL: Check if this code has already been used (prevents reuse)\n    if (data.extensions && data.extensions.some(ext => ext.code === validation.codeUsed)) {\n      return {\n        success: false,\n        message: 'This extension code has already been used.'\n      };\n    }\n\n    // Apply the extension\n    const newMaxDeals = data.maxDeals + validation.dealsGranted;\n    const extensionRecord = {\n      code: validation.codeUsed,\n      dealsGranted: validation.dealsGranted,\n      appliedDate: new Date().toISOString(),\n      previousMaxDeals: data.maxDeals,\n      newMaxDeals: newMaxDeals\n    };\n\n    // Update trial data\n    data.maxDeals = newMaxDeals;\n    data.isExpired = false; // Remove expiry status\n    data.warnings = 0; // Reset warnings\n    data.extensions = data.extensions || [];\n    data.extensions.push(extensionRecord); // STORE USED CODE PERMANENTLY\n\n    // Update instance variable\n    this.maxDeals = newMaxDeals;\n    this.saveTrialData(data);\n    console.log(`ðŸŽ‰ Trial extended! +${validation.dealsGranted} deals (Total: ${newMaxDeals})`);\n    console.log(`ðŸ”’ Code ${validation.codeUsed} marked as used and cannot be reused`);\n    return {\n      success: true,\n      message: `Trial extended successfully! You now have ${newMaxDeals - data.dealsPlayed} deals remaining.`,\n      dealsAdded: validation.dealsGranted,\n      totalDeals: newMaxDeals,\n      remainingDeals: newMaxDeals - data.dealsPlayed\n    };\n  }\n\n  // Get trial data from storage (decrypted)\n  getTrialData() {\n    try {\n      const encrypted = localStorage.getItem(this.storageKey);\n      if (!encrypted) return null;\n      const decrypted = CryptoJS.AES.decrypt(encrypted, this.hashKey).toString(CryptoJS.enc.Utf8);\n      return JSON.parse(decrypted);\n    } catch (error) {\n      console.warn('Trial data corrupted, resetting...');\n      return null;\n    }\n  }\n\n  // Save trial data to storage (encrypted)\n  saveTrialData(data) {\n    try {\n      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.hashKey).toString();\n      localStorage.setItem(this.storageKey, encrypted);\n    } catch (error) {\n      console.error('Failed to save trial data:', error);\n    }\n  }\n\n  // Check if more deals are allowed\n  canPlayDeals() {\n    const data = this.getTrialData();\n    if (!data) return false;\n    return !data.isExpired && data.dealsPlayed < data.maxDeals;\n  }\n\n  // Increment the deal counter\n  incrementDeals() {\n    const data = this.getTrialData();\n    if (!data) return false;\n    data.dealsPlayed++;\n\n    // Check if limit reached\n    if (data.dealsPlayed >= data.maxDeals) {\n      data.isExpired = true;\n    }\n    this.saveTrialData(data);\n    console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${data.maxDeals} completed`);\n    return !data.isExpired;\n  }\n\n  // Get remaining deals\n  getRemainingDeals() {\n    const data = this.getTrialData();\n    if (!data) return 0;\n    return Math.max(0, data.maxDeals - data.dealsPlayed);\n  }\n\n  // Check if warning should be shown\n  shouldShowWarning() {\n    const data = this.getTrialData();\n    if (!data) return false;\n\n    // Show warning at exactly 3 deals (60% of 5), but not if expired\n    return data.dealsPlayed >= this.warningThreshold && !data.isExpired;\n  }\n\n  // Check if trial is expired\n  isExpired() {\n    const data = this.getTrialData();\n    return data ? data.isExpired : false;\n  }\n\n  // Reset trial (for suspicious activity)\n  resetTrial() {\n    localStorage.removeItem(this.storageKey);\n    const expiredData = {\n      startDate: new Date().toISOString(),\n      fingerprint: this.browserFingerprint,\n      dealsPlayed: this.maxDeals,\n      maxDeals: this.maxDeals,\n      isExpired: true,\n      suspicious: true,\n      extensions: [] // Reset extensions list\n    };\n    this.saveTrialData(expiredData);\n  }\n\n  // Get trial statistics for display\n  getStats() {\n    const data = this.getTrialData();\n    if (!data) return null;\n    const startDate = new Date(data.startDate);\n    const daysUsed = Math.floor((new Date() - startDate) / (1000 * 60 * 60 * 24));\n\n    // Ensure extensions array exists\n    const extensions = data.extensions || [];\n    return {\n      dealsPlayed: data.dealsPlayed || 0,\n      maxDeals: data.maxDeals || this.maxDeals,\n      remainingDeals: Math.max(0, (data.maxDeals || this.maxDeals) - (data.dealsPlayed || 0)),\n      gamesCompleted: data.gamesCompleted || 0,\n      daysUsed: Math.max(1, daysUsed),\n      startDate: startDate.toLocaleDateString(),\n      extensions: extensions,\n      totalDealsEverGranted: extensions.reduce((sum, ext) => sum + (ext.dealsGranted || 0), data.maxDeals || this.maxDeals)\n    };\n  }\n\n  // Generate feedback email with extension request\n  generateFeedbackEmail() {\n    const stats = this.getStats();\n    if (!stats) return null;\n    const subject = 'Bonus Bridge - Trial Complete - Extension Request';\n    const body = `Dear Mike,\n\nI have completed my evaluation of the Bonus Bridge app and would like to request an extension to continue using it.\n\nTRIAL SUMMARY:\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\nâ€¢ Games Completed: ${stats.gamesCompleted}\nâ€¢ Days Used: ${stats.daysUsed}\nâ€¢ Started: ${stats.startDate}\n${stats.extensions.length > 0 ? `â€¢ Previous Extensions: ${stats.extensions.length}` : ''}\n\nMY FEEDBACK:\n[Please share your thoughts about the app here]\n\nEXTENSION REQUEST:\nI would like to purchase additional deals:\n\nPRICING TABLE:\nDeals   US$    GBÂ£    EUâ‚¬    Aus$\n100     $18    Â£14    â‚¬16    $28\n200     $34    Â£26    â‚¬30    $53\n300     $48    Â£36    â‚¬43    $75\n400     $60    Â£45    â‚¬53    $94\n500     $70    Â£53    â‚¬62    $109\n600     $78    Â£59    â‚¬69    $122\n700     $84    Â£63    â‚¬75    $131\n800     $92    Â£69    â‚¬82    $144\n900     $99    Â£74    â‚¬88    $154\n\nSelected package: _____ deals\n\nOVERALL RATING: ___/10\n\nPlease inform me of any changes, bugs, or suggestions you may have for improving the App.\n\nPlease send me a 7-digit extension code for my chosen package.\n\nBest regards,\n[Your name]\n[Your email]`;\n    return {\n      subject: encodeURIComponent(subject),\n      body: encodeURIComponent(body)\n    };\n  }\n\n  // Get list of all used extension codes (for admin/debugging)\n  getUsedCodes() {\n    const data = this.getTrialData();\n    if (!data || !data.extensions) return [];\n    return data.extensions.map(ext => ({\n      code: ext.code,\n      dealsGranted: ext.dealsGranted,\n      appliedDate: ext.appliedDate\n    }));\n  }\n\n  // Reset trial for testing (REMOVE IN PRODUCTION)\n  resetTrialForTesting() {\n    localStorage.removeItem(this.storageKey);\n    this.initialize();\n    console.log('ðŸ”„ Trial reset for testing - 5 deals available');\n  }\n}\nexport default TrialManager;","map":{"version":3,"names":["CryptoJS","TrialManager","constructor","maxDeals","warningThreshold","storageKey","hashKey","browserFingerprint","generateFingerprint","initialize","data","userAgent","navigator","language","screen","window","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","SHA256","JSON","stringify","toString","existing","getTrialData","trialData","startDate","Date","toISOString","fingerprint","dealsPlayed","gamesCompleted","isExpired","warnings","extensions","saveTrialData","console","log","warn","resetTrial","validateExtensionCode","code","cleanCode","replace","toUpperCase","length","test","firstSix","substring","lastDigit","parseInt","sum","split","reduce","acc","char","charCodeAt","dealsGranted","isValid","codeUsed","multiplier","generateSampleCode","dealPackage","Error","values","remainingSum","i","maxForThis","Math","min","minForThis","max","value","floor","random","push","j","letters","map","String","fromCharCode","join","letterValues","extendTrial","validation","success","message","some","ext","newMaxDeals","extensionRecord","appliedDate","previousMaxDeals","dealsAdded","totalDeals","remainingDeals","encrypted","localStorage","getItem","decrypted","AES","decrypt","enc","Utf8","parse","error","encrypt","setItem","canPlayDeals","incrementDeals","getRemainingDeals","shouldShowWarning","removeItem","expiredData","suspicious","getStats","daysUsed","toLocaleDateString","totalDealsEverGranted","generateFeedbackEmail","stats","subject","body","encodeURIComponent","getUsedCodes","resetTrialForTesting"],"sources":["C:/Users/mikec/MikesBridge/bonusbridge/src/utils/TrialManager.js"],"sourcesContent":["// TrialManager.js - Complete version with 7-digit code system and one-time use\r\nimport CryptoJS from 'crypto-js';\r\n\r\nclass TrialManager {\r\n  constructor() {\r\n    // TEST SETTINGS - 5 deals total, warning at 60% (3 deals)\r\n    this.maxDeals = 5;         // Initial trial deals  \r\n    this.warningThreshold = 3; // Warning at 3 deals (60%)\r\n    \r\n    // Security settings\r\n    this.storageKey = 'bonus_bridge_trial';\r\n    this.hashKey = 'bb_secure_2025';\r\n    \r\n    // Generate unique identifier for this browser\r\n    this.browserFingerprint = this.generateFingerprint();\r\n    \r\n    // Initialize the trial\r\n    this.initialize();\r\n  }\r\n\r\n  // Create a unique identifier for this browser/device\r\n  generateFingerprint() {\r\n    const data = {\r\n      userAgent: navigator.userAgent,\r\n      language: navigator.language,\r\n      screen: `${window.screen.width}x${window.screen.height}`,\r\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    };\r\n    \r\n    return CryptoJS.SHA256(JSON.stringify(data)).toString();\r\n  }\r\n\r\n  // Initialize trial data on first load\r\n  initialize() {\r\n    const existing = this.getTrialData();\r\n    \r\n    if (!existing) {\r\n      // First time user - create new trial\r\n      const trialData = {\r\n        startDate: new Date().toISOString(),\r\n        fingerprint: this.browserFingerprint,\r\n        dealsPlayed: 0,\r\n        maxDeals: this.maxDeals,\r\n        gamesCompleted: 0,\r\n        isExpired: false,\r\n        warnings: 0,\r\n        extensions: [] // Track all extensions applied (prevents reuse)\r\n      };\r\n      \r\n      this.saveTrialData(trialData);\r\n      console.log(`ðŸŽ¯ Trial initialized: ${this.maxDeals} deals available`);\r\n    } else {\r\n      // Existing user - check fingerprint\r\n      if (existing.fingerprint !== this.browserFingerprint) {\r\n        console.warn('ðŸš« Browser fingerprint mismatch - trial reset');\r\n        this.resetTrial();\r\n      }\r\n      \r\n      // Update maxDeals from stored data (in case it was extended)\r\n      this.maxDeals = existing.maxDeals || this.maxDeals;\r\n    }\r\n  }\r\n\r\n  // Validate 7-character extension code (6 letters/digits + 1 digit)  \r\n  // Custom mapping: A=3, B=4, C=5, ..., Z=28, and 0=0, 1=1, ..., 9=9\r\n  validateExtensionCode(code) {\r\n    if (!code || typeof code !== 'string') return null;\r\n    \r\n    // Remove any spaces and convert to uppercase\r\n    const cleanCode = code.replace(/\\s/g, '').toUpperCase();\r\n    if (cleanCode.length !== 7) return null;\r\n    \r\n    // Check format: 6 letters/digits + 1 digit (1-9)\r\n    if (!/^[A-Z0-9]{6}[1-9]$/.test(cleanCode)) return null;\r\n    \r\n    // Extract first 6 characters and last digit\r\n    const firstSix = cleanCode.substring(0, 6);\r\n    const lastDigit = parseInt(cleanCode.substring(6, 7));\r\n    \r\n    // Calculate sum of first 6 characters\r\n    const sum = firstSix.split('').reduce((acc, char) => {\r\n      if (char >= 'A' && char <= 'Z') {\r\n        // Letters: A=3, B=4, etc.\r\n        return acc + (char.charCodeAt(0) - 62); // A=65, so 65-62=3\r\n      } else {\r\n        // Digits: 0=0, 1=1, etc.\r\n        return acc + parseInt(char);\r\n      }\r\n    }, 0);\r\n    \r\n    // Check if sum equals 100\r\n    if (sum !== 100) return null;\r\n    \r\n    // Calculate number of deals this code grants\r\n    const dealsGranted = lastDigit * 100;\r\n    \r\n    return {\r\n      isValid: true,\r\n      dealsGranted: dealsGranted,\r\n      codeUsed: cleanCode,\r\n      sum: sum,\r\n      multiplier: lastDigit\r\n    };\r\n  }\r\n\r\n  // Generate a sample extension code (for testing/demonstration)\r\n  // Using custom mapping: A=3, B=4, C=5, ..., Z=28\r\n  generateSampleCode(dealPackage = 100) {\r\n    // dealPackage should be 100, 200, 300, etc. up to 900\r\n    const multiplier = dealPackage / 100;\r\n    if (multiplier < 1 || multiplier > 9 || dealPackage % 100 !== 0) {\r\n      throw new Error('Deal package must be 100, 200, 300, ... up to 900');\r\n    }\r\n    \r\n    // Generate 6 random letter values that sum to 100\r\n    // Letter values: A=3, B=4, ..., Z=28\r\n    let values = [];\r\n    let remainingSum = 100;\r\n    \r\n    // Generate first 5 letters (values 3-28 each)\r\n    for (let i = 0; i < 5; i++) {\r\n      const maxForThis = Math.min(28, remainingSum - (5 - i) * 3); // Ensure we can finish\r\n      const minForThis = Math.max(3, remainingSum - (5 - i) * 28); // Ensure we don't exceed\r\n      const value = Math.floor(Math.random() * (maxForThis - minForThis + 1)) + minForThis;\r\n      values.push(value);\r\n      remainingSum -= value;\r\n    }\r\n    \r\n    // Last letter value is whatever makes the sum = 100\r\n    values.push(remainingSum);\r\n    \r\n    // Shuffle the values to make them less predictable\r\n    for (let i = values.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [values[i], values[j]] = [values[j], values[i]];\r\n    }\r\n    \r\n    // Convert values to letters (3=A, 4=B, etc.)\r\n    const letters = values.map(value => String.fromCharCode(62 + value));\r\n    \r\n    // Create the 7-character code\r\n    const code = letters.join('') + multiplier.toString();\r\n    \r\n    return {\r\n      code: code,\r\n      dealsGranted: dealPackage,\r\n      sum: 100,\r\n      multiplier: multiplier,\r\n      letterValues: values\r\n    };\r\n  }\r\n\r\n  // Extend trial with 7-digit code (ONE-TIME USE ONLY)\r\n  extendTrial(code) {\r\n    const validation = this.validateExtensionCode(code);\r\n    \r\n    if (!validation || !validation.isValid) {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid extension code. Please check the 7-digit code and try again.' \r\n      };\r\n    }\r\n    \r\n    const data = this.getTrialData();\r\n    if (!data) {\r\n      return { success: false, message: 'No trial data found' };\r\n    }\r\n    \r\n    // CRITICAL: Check if this code has already been used (prevents reuse)\r\n    if (data.extensions && data.extensions.some(ext => ext.code === validation.codeUsed)) {\r\n      return { \r\n        success: false, \r\n        message: 'This extension code has already been used.' \r\n      };\r\n    }\r\n    \r\n    // Apply the extension\r\n    const newMaxDeals = data.maxDeals + validation.dealsGranted;\r\n    const extensionRecord = {\r\n      code: validation.codeUsed,\r\n      dealsGranted: validation.dealsGranted,\r\n      appliedDate: new Date().toISOString(),\r\n      previousMaxDeals: data.maxDeals,\r\n      newMaxDeals: newMaxDeals\r\n    };\r\n    \r\n    // Update trial data\r\n    data.maxDeals = newMaxDeals;\r\n    data.isExpired = false; // Remove expiry status\r\n    data.warnings = 0; // Reset warnings\r\n    data.extensions = data.extensions || [];\r\n    data.extensions.push(extensionRecord); // STORE USED CODE PERMANENTLY\r\n    \r\n    // Update instance variable\r\n    this.maxDeals = newMaxDeals;\r\n    \r\n    this.saveTrialData(data);\r\n    \r\n    console.log(`ðŸŽ‰ Trial extended! +${validation.dealsGranted} deals (Total: ${newMaxDeals})`);\r\n    console.log(`ðŸ”’ Code ${validation.codeUsed} marked as used and cannot be reused`);\r\n    \r\n    return { \r\n      success: true, \r\n      message: `Trial extended successfully! You now have ${newMaxDeals - data.dealsPlayed} deals remaining.`,\r\n      dealsAdded: validation.dealsGranted,\r\n      totalDeals: newMaxDeals,\r\n      remainingDeals: newMaxDeals - data.dealsPlayed\r\n    };\r\n  }\r\n\r\n  // Get trial data from storage (decrypted)\r\n  getTrialData() {\r\n    try {\r\n      const encrypted = localStorage.getItem(this.storageKey);\r\n      if (!encrypted) return null;\r\n      \r\n      const decrypted = CryptoJS.AES.decrypt(encrypted, this.hashKey).toString(CryptoJS.enc.Utf8);\r\n      return JSON.parse(decrypted);\r\n    } catch (error) {\r\n      console.warn('Trial data corrupted, resetting...');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Save trial data to storage (encrypted)\r\n  saveTrialData(data) {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.hashKey).toString();\r\n      localStorage.setItem(this.storageKey, encrypted);\r\n    } catch (error) {\r\n      console.error('Failed to save trial data:', error);\r\n    }\r\n  }\r\n\r\n  // Check if more deals are allowed\r\n  canPlayDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n    \r\n    return !data.isExpired && data.dealsPlayed < data.maxDeals;\r\n  }\r\n\r\n  // Increment the deal counter\r\n  incrementDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n\r\n    data.dealsPlayed++;\r\n    \r\n    // Check if limit reached\r\n    if (data.dealsPlayed >= data.maxDeals) {\r\n      data.isExpired = true;\r\n    }\r\n    \r\n    this.saveTrialData(data);\r\n    \r\n    console.log(`ðŸ“Š Deal ${data.dealsPlayed}/${data.maxDeals} completed`);\r\n    return !data.isExpired;\r\n  }\r\n\r\n  // Get remaining deals\r\n  getRemainingDeals() {\r\n    const data = this.getTrialData();\r\n    if (!data) return 0;\r\n    \r\n    return Math.max(0, data.maxDeals - data.dealsPlayed);\r\n  }\r\n\r\n  // Check if warning should be shown\r\n  shouldShowWarning() {\r\n    const data = this.getTrialData();\r\n    if (!data) return false;\r\n    \r\n    // Show warning at exactly 3 deals (60% of 5), but not if expired\r\n    return data.dealsPlayed >= this.warningThreshold && !data.isExpired;\r\n  }\r\n\r\n  // Check if trial is expired\r\n  isExpired() {\r\n    const data = this.getTrialData();\r\n    return data ? data.isExpired : false;\r\n  }\r\n\r\n  // Reset trial (for suspicious activity)\r\n  resetTrial() {\r\n    localStorage.removeItem(this.storageKey);\r\n    \r\n    const expiredData = {\r\n      startDate: new Date().toISOString(),\r\n      fingerprint: this.browserFingerprint,\r\n      dealsPlayed: this.maxDeals,\r\n      maxDeals: this.maxDeals,\r\n      isExpired: true,\r\n      suspicious: true,\r\n      extensions: [] // Reset extensions list\r\n    };\r\n    \r\n    this.saveTrialData(expiredData);\r\n  }\r\n\r\n  // Get trial statistics for display\r\n  getStats() {\r\n    const data = this.getTrialData();\r\n    if (!data) return null;\r\n    \r\n    const startDate = new Date(data.startDate);\r\n    const daysUsed = Math.floor((new Date() - startDate) / (1000 * 60 * 60 * 24));\r\n    \r\n    // Ensure extensions array exists\r\n    const extensions = data.extensions || [];\r\n    \r\n    return {\r\n      dealsPlayed: data.dealsPlayed || 0,\r\n      maxDeals: data.maxDeals || this.maxDeals,\r\n      remainingDeals: Math.max(0, (data.maxDeals || this.maxDeals) - (data.dealsPlayed || 0)),\r\n      gamesCompleted: data.gamesCompleted || 0,\r\n      daysUsed: Math.max(1, daysUsed),\r\n      startDate: startDate.toLocaleDateString(),\r\n      extensions: extensions,\r\n      totalDealsEverGranted: extensions.reduce((sum, ext) => sum + (ext.dealsGranted || 0), data.maxDeals || this.maxDeals)\r\n    };\r\n  }\r\n\r\n  // Generate feedback email with extension request\r\n  generateFeedbackEmail() {\r\n    const stats = this.getStats();\r\n    if (!stats) return null;\r\n    \r\n    const subject = 'Bonus Bridge - Trial Complete - Extension Request';\r\n    const body = `Dear Mike,\r\n\r\nI have completed my evaluation of the Bonus Bridge app and would like to request an extension to continue using it.\r\n\r\nTRIAL SUMMARY:\r\nâ€¢ Deals Played: ${stats.dealsPlayed}/${stats.maxDeals}\r\nâ€¢ Games Completed: ${stats.gamesCompleted}\r\nâ€¢ Days Used: ${stats.daysUsed}\r\nâ€¢ Started: ${stats.startDate}\r\n${stats.extensions.length > 0 ? `â€¢ Previous Extensions: ${stats.extensions.length}` : ''}\r\n\r\nMY FEEDBACK:\r\n[Please share your thoughts about the app here]\r\n\r\nEXTENSION REQUEST:\r\nI would like to purchase additional deals:\r\n\r\nPRICING TABLE:\r\nDeals   US$    GBÂ£    EUâ‚¬    Aus$\r\n100     $18    Â£14    â‚¬16    $28\r\n200     $34    Â£26    â‚¬30    $53\r\n300     $48    Â£36    â‚¬43    $75\r\n400     $60    Â£45    â‚¬53    $94\r\n500     $70    Â£53    â‚¬62    $109\r\n600     $78    Â£59    â‚¬69    $122\r\n700     $84    Â£63    â‚¬75    $131\r\n800     $92    Â£69    â‚¬82    $144\r\n900     $99    Â£74    â‚¬88    $154\r\n\r\nSelected package: _____ deals\r\n\r\nOVERALL RATING: ___/10\r\n\r\nPlease inform me of any changes, bugs, or suggestions you may have for improving the App.\r\n\r\nPlease send me a 7-digit extension code for my chosen package.\r\n\r\nBest regards,\r\n[Your name]\r\n[Your email]`;\r\n\r\n    return {\r\n      subject: encodeURIComponent(subject),\r\n      body: encodeURIComponent(body)\r\n    };\r\n  }\r\n\r\n  // Get list of all used extension codes (for admin/debugging)\r\n  getUsedCodes() {\r\n    const data = this.getTrialData();\r\n    if (!data || !data.extensions) return [];\r\n    \r\n    return data.extensions.map(ext => ({\r\n      code: ext.code,\r\n      dealsGranted: ext.dealsGranted,\r\n      appliedDate: ext.appliedDate\r\n    }));\r\n  }\r\n\r\n  // Reset trial for testing (REMOVE IN PRODUCTION)\r\n  resetTrialForTesting() {\r\n    localStorage.removeItem(this.storageKey);\r\n    this.initialize();\r\n    console.log('ðŸ”„ Trial reset for testing - 5 deals available');\r\n  }\r\n}\r\n\r\nexport default TrialManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}